// created by jay 1.0.2 (c) 2002-2004 ats@cs.rit.edu
// skeleton Java 1.0 (c) 2002 ats@cs.rit.edu

					// line 2 "RubyParser.y"
/***** BEGIN LICENSE BLOCK *****
 * Version: EPL 1.0/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Common Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.eclipse.org/legal/cpl-v10.html
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * Copyright (C) 2008-2009 Thomas E Enebo <enebo@acm.org>
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the EPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the EPL, the GPL or the LGPL.
 ***** END LICENSE BLOCK *****/
package org.jruby.parser;

import java.io.IOException;

import org.jruby.ast.ArgsNode;
import org.jruby.ast.ArgumentNode;
import org.jruby.ast.ArrayNode;
import org.jruby.ast.AssignableNode;
import org.jruby.ast.BackRefNode;
import org.jruby.ast.BeginNode;
import org.jruby.ast.BlockAcceptingNode;
import org.jruby.ast.BlockArgNode;
import org.jruby.ast.BlockNode;
import org.jruby.ast.BlockPassNode;
import org.jruby.ast.BreakNode;
import org.jruby.ast.CallNode;
import org.jruby.ast.ClassNode;
import org.jruby.ast.ClassVarNode;
import org.jruby.ast.ClassVarAsgnNode;
import org.jruby.ast.Colon3Node;
import org.jruby.ast.ConstNode;
import org.jruby.ast.ConstDeclNode;
import org.jruby.ast.DStrNode;
import org.jruby.ast.DSymbolNode;
import org.jruby.ast.DXStrNode;
import org.jruby.ast.DefnNode;
import org.jruby.ast.DefsNode;
import org.jruby.ast.DotNode;
import org.jruby.ast.EncodingNode;
import org.jruby.ast.EnsureNode;
import org.jruby.ast.EvStrNode;
import org.jruby.ast.FalseNode;
import org.jruby.ast.FileNode;
import org.jruby.ast.FCallNode;
import org.jruby.ast.FixnumNode;
import org.jruby.ast.FloatNode;
import org.jruby.ast.ForNode;
import org.jruby.ast.GlobalAsgnNode;
import org.jruby.ast.GlobalVarNode;
import org.jruby.ast.HashNode;
import org.jruby.ast.IfNode;
import org.jruby.ast.InstAsgnNode;
import org.jruby.ast.InstVarNode;
import org.jruby.ast.IterNode;
import org.jruby.ast.LambdaNode;
import org.jruby.ast.ListNode;
import org.jruby.ast.LiteralNode;
import org.jruby.ast.ModuleNode;
import org.jruby.ast.MultipleAsgn19Node;
import org.jruby.ast.NextNode;
import org.jruby.ast.NilImplicitNode;
import org.jruby.ast.NilNode;
import org.jruby.ast.Node;
import org.jruby.ast.NonLocalControlFlowNode;
import org.jruby.ast.NumericNode;
import org.jruby.ast.OpAsgnAndNode;
import org.jruby.ast.OpAsgnNode;
import org.jruby.ast.OpAsgnOrNode;
import org.jruby.ast.OptArgNode;
import org.jruby.ast.PostExeNode;
import org.jruby.ast.PreExe19Node;
import org.jruby.ast.RationalNode;
import org.jruby.ast.RedoNode;
import org.jruby.ast.RegexpNode;
import org.jruby.ast.RequiredKeywordArgumentValueNode;
import org.jruby.ast.RescueBodyNode;
import org.jruby.ast.RescueNode;
import org.jruby.ast.RestArgNode;
import org.jruby.ast.RetryNode;
import org.jruby.ast.ReturnNode;
import org.jruby.ast.SClassNode;
import org.jruby.ast.SelfNode;
import org.jruby.ast.StarNode;
import org.jruby.ast.StrNode;
import org.jruby.ast.SymbolNode;
import org.jruby.ast.TrueNode;
import org.jruby.ast.UnnamedRestArgNode;
import org.jruby.ast.UntilNode;
import org.jruby.ast.VAliasNode;
import org.jruby.ast.WhileNode;
import org.jruby.ast.XStrNode;
import org.jruby.ast.YieldNode;
import org.jruby.ast.ZArrayNode;
import org.jruby.ast.ZSuperNode;
import org.jruby.ast.ZYieldNode;
import org.jruby.ast.types.ILiteralNode;
import org.jruby.common.IRubyWarnings;
import org.jruby.common.IRubyWarnings.ID;
import org.jruby.lexer.yacc.ISourcePosition;
import org.jruby.lexer.yacc.ISourcePositionHolder;
import org.jruby.lexer.yacc.LexerSource;
import org.jruby.lexer.yacc.RubyLexer;
import org.jruby.lexer.yacc.RubyLexer.LexState;
import org.jruby.lexer.yacc.StrTerm;
import org.jruby.lexer.yacc.SyntaxException;
import org.jruby.lexer.yacc.SyntaxException.PID;
import org.jruby.util.ByteList;
import org.jruby.util.KeyValuePair;
import org.jruby.util.cli.Options;

public class RubyParser {
    protected ParserSupport support;
    protected RubyLexer lexer;

    public RubyParser() {
        this(new ParserSupport());
    }

    public RubyParser(ParserSupport support) {
        this.support = support;
        lexer = new RubyLexer();
        lexer.setParserSupport(support);
        support.setLexer(lexer);
    }

    public void setWarnings(IRubyWarnings warnings) {
        support.setWarnings(warnings);
        lexer.setWarnings(warnings);
    }
					// line 152 "-"
  // %token constants
  public static final int kCLASS = 257;
  public static final int kMODULE = 258;
  public static final int kDEF = 259;
  public static final int kUNDEF = 260;
  public static final int kBEGIN = 261;
  public static final int kRESCUE = 262;
  public static final int kENSURE = 263;
  public static final int kEND = 264;
  public static final int kIF = 265;
  public static final int kUNLESS = 266;
  public static final int kTHEN = 267;
  public static final int kELSIF = 268;
  public static final int kELSE = 269;
  public static final int kCASE = 270;
  public static final int kWHEN = 271;
  public static final int kWHILE = 272;
  public static final int kUNTIL = 273;
  public static final int kFOR = 274;
  public static final int kBREAK = 275;
  public static final int kNEXT = 276;
  public static final int kREDO = 277;
  public static final int kRETRY = 278;
  public static final int kIN = 279;
  public static final int kDO = 280;
  public static final int kDO_COND = 281;
  public static final int kDO_BLOCK = 282;
  public static final int kRETURN = 283;
  public static final int kYIELD = 284;
  public static final int kSUPER = 285;
  public static final int kSELF = 286;
  public static final int kNIL = 287;
  public static final int kTRUE = 288;
  public static final int kFALSE = 289;
  public static final int kAND = 290;
  public static final int kOR = 291;
  public static final int kNOT = 292;
  public static final int kIF_MOD = 293;
  public static final int kUNLESS_MOD = 294;
  public static final int kWHILE_MOD = 295;
  public static final int kUNTIL_MOD = 296;
  public static final int kRESCUE_MOD = 297;
  public static final int kALIAS = 298;
  public static final int kDEFINED = 299;
  public static final int klBEGIN = 300;
  public static final int klEND = 301;
  public static final int k__LINE__ = 302;
  public static final int k__FILE__ = 303;
  public static final int k__ENCODING__ = 304;
  public static final int kDO_LAMBDA = 305;
  public static final int kSIGNAL = 306;
  public static final int tIDENTIFIER = 307;
  public static final int tFID = 308;
  public static final int tGVAR = 309;
  public static final int tIVAR = 310;
  public static final int tCONSTANT = 311;
  public static final int tCVAR = 312;
  public static final int tLABEL = 313;
  public static final int tCHAR = 314;
  public static final int tUPLUS = 315;
  public static final int tUMINUS = 316;
  public static final int tUMINUS_NUM = 317;
  public static final int tPOW = 318;
  public static final int tCMP = 319;
  public static final int tEQ = 320;
  public static final int tEQQ = 321;
  public static final int tNEQ = 322;
  public static final int tGEQ = 323;
  public static final int tLEQ = 324;
  public static final int tANDOP = 325;
  public static final int tOROP = 326;
  public static final int tMATCH = 327;
  public static final int tNMATCH = 328;
  public static final int tDOT = 329;
  public static final int tDOT2 = 330;
  public static final int tDOT3 = 331;
  public static final int tAREF = 332;
  public static final int tASET = 333;
  public static final int tLSHFT = 334;
  public static final int tRSHFT = 335;
  public static final int tCOLON2 = 336;
  public static final int tCOLON3 = 337;
  public static final int tOP_ASGN = 338;
  public static final int tASSOC = 339;
  public static final int tLPAREN = 340;
  public static final int tLPAREN2 = 341;
  public static final int tRPAREN = 342;
  public static final int tLPAREN_ARG = 343;
  public static final int tLBRACK = 344;
  public static final int tRBRACK = 345;
  public static final int tLBRACE = 346;
  public static final int tLBRACE_ARG = 347;
  public static final int tSTAR = 348;
  public static final int tSTAR2 = 349;
  public static final int tAMPER = 350;
  public static final int tAMPER2 = 351;
  public static final int tTILDE = 352;
  public static final int tPERCENT = 353;
  public static final int tDIVIDE = 354;
  public static final int tPLUS = 355;
  public static final int tMINUS = 356;
  public static final int tLT = 357;
  public static final int tGT = 358;
  public static final int tPIPE = 359;
  public static final int tBANG = 360;
  public static final int tCARET = 361;
  public static final int tLCURLY = 362;
  public static final int tRCURLY = 363;
  public static final int tBACK_REF2 = 364;
  public static final int tSYMBEG = 365;
  public static final int tSTRING_BEG = 366;
  public static final int tXSTRING_BEG = 367;
  public static final int tREGEXP_BEG = 368;
  public static final int tWORDS_BEG = 369;
  public static final int tQWORDS_BEG = 370;
  public static final int tSTRING_DBEG = 371;
  public static final int tSTRING_DVAR = 372;
  public static final int tSTRING_END = 373;
  public static final int tLAMBDA = 374;
  public static final int tLAMBEG = 375;
  public static final int tNTH_REF = 376;
  public static final int tBACK_REF = 377;
  public static final int tSTRING_CONTENT = 378;
  public static final int tINTEGER = 379;
  public static final int tIMAGINARY = 380;
  public static final int tFLOAT = 381;
  public static final int tRATIONAL = 382;
  public static final int tREGEXP_END = 383;
  public static final int tSYMBOLS_BEG = 384;
  public static final int tQSYMBOLS_BEG = 385;
  public static final int tDSTAR = 386;
  public static final int tSTRING_DEND = 387;
  public static final int tLABEL_END = 388;
  public static final int tLOWEST = 389;
  public static final int yyErrorCode = 256;

  /** number of final state.
    */
  protected static final int yyFinal = 1;

  /** parser tables.
      Order is mandated by <i>jay</i>.
    */
  protected static final short[] yyLhs = {
//yyLhs 637
    -1,   140,     0,   133,   134,   134,   134,   134,   135,   143,
   135,    37,    36,    38,    38,    38,    38,    44,   144,    44,
   145,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    31,    31,    40,    40,    40,    40,
    40,    40,    45,    32,    32,    59,    59,   147,   110,   139,
    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
    43,   111,   111,   122,   122,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,    71,    71,   100,   100,   101,
   101,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,     6,
     6,    30,    30,    30,     7,     7,     7,     7,     7,   115,
   115,   116,   116,    61,   148,    61,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    73,    76,    76,    76,    76,    53,    57,
    57,   125,   125,   125,   125,   125,    51,    51,    51,    51,
    51,   150,    55,   104,   103,   103,    79,    79,    79,    79,
    35,    35,    70,    70,    70,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,   151,    42,   152,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,   154,
   156,    42,   157,   158,    42,    42,    42,   159,   160,    42,
   161,    42,   163,   164,    42,   165,    42,   166,    42,   167,
   168,    42,    42,    42,    42,    42,    42,    46,   153,   153,
   153,   155,   155,    49,    49,    47,    47,   124,   124,   126,
   126,    84,    84,   127,   127,   127,   127,   127,   127,   127,
   127,   127,    91,    91,    91,    91,    90,    90,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    68,    68,    67,    67,    67,   119,   119,
   118,   118,   128,   128,   169,   121,    65,    65,   120,   120,
   170,   109,    58,    58,    58,    58,    22,    22,    22,    22,
    22,    22,    22,    22,    22,   171,   108,   172,   108,    74,
    48,    48,   113,   113,    75,    75,    75,    50,    50,    52,
    52,    28,    28,    28,    15,    16,    16,    16,    17,    18,
    19,    25,    25,    81,    81,    27,    27,    87,    87,    85,
    85,    26,    26,    88,    88,    80,    80,    86,    86,    20,
    20,    21,    21,    24,    24,    23,   173,    23,   174,   175,
    23,    62,    62,    62,    62,     2,     1,     1,     1,     1,
    29,    33,    33,    34,    34,    34,    34,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,    63,    63,    54,   176,    54,    54,    69,   177,    69,
    92,    92,    92,    92,    89,    89,    64,    64,    64,    64,
    64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    64,   132,   132,   132,   132,     9,     9,   117,   117,    82,
    82,   138,    93,    93,    94,    94,    95,    95,    96,    96,
   136,   136,   137,   137,    60,   123,   102,   102,    83,    83,
    11,    11,    13,    13,    12,    12,   107,   106,   106,    14,
   178,    14,    97,    97,    98,    98,    99,    99,    99,    99,
     3,     3,     3,     4,     4,     4,     4,     5,     5,     5,
    10,    10,   141,   141,   146,   146,   129,   130,   149,   149,
   149,   162,   162,   142,   142,    78,   105,
    }, yyLen = {
//yyLen 637
     2,     0,     2,     2,     1,     1,     3,     2,     1,     0,
     5,     4,     2,     1,     1,     3,     2,     1,     0,     5,
     0,     4,     3,     3,     3,     2,     3,     3,     3,     3,
     3,     4,     1,     3,     3,     6,     5,     5,     5,     5,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     2,     1,     1,     1,     1,     1,     4,     0,     5,     1,
     2,     3,     4,     5,     4,     5,     2,     2,     2,     2,
     2,     1,     3,     1,     3,     1,     2,     3,     5,     2,
     4,     2,     4,     1,     3,     1,     3,     2,     3,     1,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     4,     3,     3,     3,     3,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     4,     3,     3,     3,     3,     2,     1,     1,
     1,     2,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     5,     3,     5,     6,     5,     5,     5,     5,     4,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     4,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     2,     2,     3,     3,     3,     3,
     3,     6,     1,     1,     1,     2,     4,     2,     3,     1,
     1,     1,     1,     2,     4,     2,     1,     2,     2,     4,
     1,     0,     2,     2,     2,     1,     1,     2,     3,     4,
     1,     1,     3,     4,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     0,     3,     0,
     4,     3,     3,     2,     3,     3,     1,     4,     3,     1,
     5,     4,     3,     2,     1,     2,     2,     6,     6,     0,
     0,     7,     0,     0,     7,     5,     4,     0,     0,     9,
     0,     6,     0,     0,     8,     0,     5,     0,     6,     0,
     0,     9,     1,     1,     1,     1,     3,     1,     1,     1,
     2,     1,     1,     1,     5,     1,     2,     1,     1,     1,
     3,     1,     3,     1,     4,     6,     3,     5,     2,     4,
     1,     3,     4,     2,     2,     1,     2,     0,     6,     8,
     4,     6,     4,     2,     6,     2,     4,     6,     2,     4,
     2,     4,     1,     1,     1,     3,     1,     4,     1,     4,
     1,     3,     1,     1,     0,     3,     4,     1,     3,     3,
     0,     5,     2,     4,     5,     5,     2,     4,     4,     3,
     3,     3,     2,     1,     4,     0,     5,     0,     5,     5,
     1,     1,     6,     0,     1,     1,     1,     2,     1,     2,
     1,     1,     1,     1,     1,     1,     1,     2,     3,     3,
     3,     3,     3,     0,     3,     1,     2,     3,     3,     0,
     3,     3,     3,     3,     3,     0,     3,     0,     3,     0,
     2,     0,     2,     0,     2,     1,     0,     3,     0,     0,
     5,     1,     1,     1,     1,     2,     1,     1,     1,     1,
     3,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     4,     2,     3,     0,     3,
     4,     2,     2,     1,     2,     0,     6,     8,     4,     6,
     4,     6,     2,     4,     6,     2,     4,     2,     4,     1,
     0,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     3,     1,     2,     1,     2,     1,     1,     3,     1,     3,
     1,     1,     2,     1,     3,     3,     1,     3,     1,     3,
     1,     1,     2,     1,     1,     1,     2,     2,     0,     1,
     0,     4,     1,     2,     1,     3,     3,     2,     4,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     1,     0,     1,     2,     2,     0,     1,
     1,     1,     1,     1,     2,     0,     0,
    }, yyDefRed = {
//yyDefRed 1091
     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   329,   332,     0,     0,     0,   354,   355,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     9,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   455,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   479,   481,   483,     0,     0,   414,
   531,   532,   503,   506,   504,   505,     0,     0,   452,    59,
   296,     0,   456,   297,   298,     0,   299,   300,   295,   453,
    32,    46,   451,   501,     0,     0,     0,     0,     0,     0,
   303,     0,    54,     0,     0,    85,     0,     4,   301,   302,
     0,     0,    71,     0,     2,     0,     5,     0,     7,   352,
   353,   316,     0,     0,   513,   512,   514,   515,     0,     0,
   517,   516,   518,     0,   509,   508,     0,   511,     0,     0,
     0,     0,   132,     0,   357,     0,   304,     0,   345,   186,
   197,   187,   210,   183,   203,   193,   192,   208,   191,   190,
   185,   211,   195,   184,   198,   202,   204,   196,   189,   205,
   212,   207,     0,     0,     0,     0,   182,   201,   200,   213,
   214,   216,   217,   218,   181,   188,   179,   180,     0,     0,
     0,   215,     0,   136,     0,   171,   172,   168,   149,   150,
   151,   158,   155,   157,   152,   153,   173,   174,   159,   160,
   600,   165,   164,   148,   170,   167,   166,   162,   163,   156,
   154,   146,   169,   147,   175,   161,   347,   137,     0,   599,
   138,   206,   199,   209,   194,   176,   177,   178,   134,   135,
   140,   139,   142,     0,   141,   143,     0,     0,     0,     0,
     0,     0,    14,    13,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   631,   632,     0,     0,     0,   633,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   367,   368,     0,
     0,     0,     0,     0,   479,     0,     0,   276,    69,     0,
     0,     0,   604,   280,    70,    68,     0,    67,     0,     0,
   432,    66,     0,   625,     0,     0,    20,     0,     0,     0,
     0,   239,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   264,     0,     0,     0,   602,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   255,    50,   254,
   498,   497,   499,   495,   496,     0,     0,     0,     0,     0,
     0,     0,     0,   326,     0,     0,     0,     0,     0,   457,
   437,   435,   325,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   420,   422,     0,     0,
     0,   620,   621,     0,     0,    87,     0,     0,     0,     0,
     0,     0,     3,     0,   426,     0,   323,     0,   502,     0,
   129,     0,   131,     0,   534,   340,   533,     0,     0,     0,
     0,     0,     0,   349,   144,     0,     0,     0,     0,   306,
    12,     0,     0,   359,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   634,     0,     0,     0,
     0,     0,     0,   337,   607,   287,   283,     0,   609,     0,
     0,   277,   285,     0,   278,     0,   318,     0,   282,   272,
   271,     0,     0,     0,     0,   322,    49,    22,    24,    23,
     0,     0,     0,     0,     0,   356,     0,     0,     0,     0,
     0,   311,     0,     0,   308,   314,     0,   629,   265,     0,
   267,   315,   603,     0,    89,     0,     0,     0,     0,     0,
   488,   486,   500,   485,   482,   458,   480,   459,   460,   484,
   461,   462,   465,     0,   471,   472,     0,   566,   563,   562,
   561,   564,   571,   580,     0,     0,   591,   590,   595,   594,
   581,     0,     0,     0,     0,   588,   417,     0,     0,     0,
   559,   578,     0,   543,   569,   565,     0,     0,     0,   467,
   468,     0,   473,   474,     0,     0,     0,    26,    27,    28,
    29,    30,    47,    48,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   615,     0,     0,   616,   430,     0,     0,     0,
     0,   429,     0,   431,     0,   613,   614,     0,    40,     0,
     0,    45,    44,     0,    41,   286,     0,     0,     0,     0,
     0,    88,    33,    42,   290,     0,    34,     0,     6,    57,
    61,     0,   536,     0,     0,     0,     0,     0,     0,   133,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   445,
     0,     0,   446,     0,     0,   365,    15,     0,   360,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   336,   362,
   330,   361,   333,     0,     0,     0,     0,     0,     0,     0,
   606,     0,     0,     0,   284,   605,   317,   626,     0,     0,
   268,   321,    21,     0,     0,    31,     0,     0,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,   489,     0,
   464,   466,   476,     0,     0,   369,     0,   371,     0,     0,
     0,   592,   596,     0,   557,     0,     0,   415,     0,   552,
     0,   555,     0,   541,   582,     0,   542,   572,   470,   478,
   406,     0,   404,     0,   403,     0,     0,     0,     0,     0,
   270,     0,   427,   269,     0,     0,   428,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    86,     0,     0,     0,
     0,   343,     0,     0,   434,   346,   601,     0,     0,     0,
   350,   145,     0,     0,     0,   448,   366,     0,    11,   450,
     0,   363,     0,     0,     0,     0,     0,     0,     0,   335,
     0,     0,     0,     0,     0,     0,   608,   289,   279,     0,
   320,    10,   266,    90,     0,     0,   491,   492,   493,   487,
   494,     0,     0,     0,     0,   568,     0,     0,   584,   567,
     0,   544,     0,     0,     0,     0,   570,     0,   589,     0,
   579,   597,     0,     0,     0,     0,     0,   402,   576,     0,
     0,   385,     0,   586,     0,     0,     0,     0,     0,     0,
    36,     0,    37,     0,    63,    39,     0,    38,     0,    65,
     0,   627,   425,   424,     0,     0,     0,     0,     0,     0,
     0,   535,   341,   537,   348,   539,     0,    19,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   447,     0,   449,     0,   327,     0,   328,
   288,     0,     0,     0,   338,     0,     0,   370,     0,     0,
     0,   372,   416,     0,     0,   558,   419,   418,     0,   550,
     0,   548,     0,   553,   556,   540,     0,     0,   400,     0,
     0,   395,     0,   383,     0,   398,   405,   384,     0,     0,
     0,     0,   438,   436,     0,   421,    35,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   440,   439,
   441,   331,   334,     0,   490,     0,     0,     0,     0,   412,
     0,   410,   413,     0,     0,     0,     0,     0,     0,   386,
   407,     0,     0,   577,     0,     0,     0,   587,   313,     0,
    58,   344,     0,     0,     0,     0,     0,     0,   442,     0,
     0,     0,     0,     0,   409,   551,     0,   546,   549,   554,
     0,   401,     0,   392,     0,   390,   382,     0,   396,   399,
     0,     0,   351,     0,   364,   339,     0,   411,     0,     0,
     0,     0,     0,   547,   394,     0,   388,   391,   397,     0,
   389,
    }, yyDgoto = {
//yyDgoto 179
     1,   363,    68,    69,   678,   641,   132,   231,   635,   869,
   423,   572,   573,   574,   218,    70,    71,    72,    73,    74,
   366,   365,    75,   544,   368,    76,    77,   553,    78,    79,
   133,    80,    81,    82,    83,   663,   238,   239,   240,   241,
    85,    86,    87,    88,   242,   258,   322,   831,  1009,   832,
   824,   499,   828,   643,   445,   307,    90,   792,    91,    92,
   575,   233,   859,   260,   576,   577,   885,   782,   783,   684,
   654,    94,    95,   299,   475,   691,   332,   261,   243,   501,
   372,   370,   578,   579,   756,   376,   378,    98,    99,   764,
   978,  1029,   871,   581,   888,   889,   582,   338,   502,   302,
   100,   535,   890,   491,   303,   492,   773,   583,   436,   417,
   670,   101,   102,   458,   262,   234,   235,   584,  1020,   866,
   767,   373,   329,   893,   289,   503,   757,   758,  1021,   496,
   798,   220,   585,   104,   105,   106,   586,   587,   588,   137,
     2,   267,   268,   318,   456,   510,   497,   810,   687,   528,
   308,   331,   523,   464,   270,   710,   842,   271,   843,   718,
  1013,   674,   465,   671,   920,   450,   452,   686,   926,   374,
   630,   596,   595,   749,   748,   855,   673,   685,   451,
    }, yySindex = {
//yySindex 1091
     0,     0, 17976, 19275,  5855, 21210, 17409, 17748, 18106, 20436,
 20436,  8013,     0,     0, 20952, 18365, 18365,     0,     0, 18365,
  -176,  -161,     0,     0,     0,     0,    70, 17635,   192,     0,
  -113,     0,     0,     0, 18106,     0,     0,     0,     0,     0,
     0,     0, 20565, 20565,   968,   -14, 18236, 20436, 18755, 19145,
 16891, 20565, 20694, 17522,     0,     0,     0,   251,   315,     0,
     0,     0,     0,     0,     0,     0,   329,   341,     0,     0,
     0,   -36,     0,     0,     0,  -140,     0,     0,     0,     0,
     0,     0,     0,     0,  1618,   -31,  5289,     0,    99,   -13,
     0,   -40,     0,    95,   357,     0,   416,     0,     0,     0,
 21081,   440,     0,   125,     0,   158,     0,   -98,     0,     0,
     0,     0,  -176,  -161,     0,     0,     0,     0,   266,   192,
     0,     0,     0,     0,     0,     0,     0,     0,   968, 20436,
   401, 18106,     0,   110,     0,   306,     0,   -98,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -40,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   580,     0,     0, 19404, 18106,   364,   377,
   158,  1618,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   332,   -31,   193,   373,
   320,   583,   330,   193,     0,     0,   158,   399,   618,     0,
 20436, 20436,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   374,   536,     0,     0,     0,   408,
 20565, 20565, 20565, 20565,     0, 20565,  5289,     0,     0,   367,
   667,   685,     0,     0,     0,     0,  6356,     0, 18365, 18365,
     0,     0,  6766,     0, 20436,   -95,     0, 19533,   372, 18106,
   473,     0,   555,   425,   429,   417, 18236,   414,     0,   192,
   -31,   192,   434,     0,    81,   150,   367,     0,   418,   150,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   476, 21339,   571,     0,   746,     0,     0,     0,
     0,     0,     0,     0,     0,   405,   736,   915,   774,   419,
   923,   421,   -56,     0,  2305,   422,  1035,   433,   -34,     0,
     0,     0,     0, 20436, 20436, 20436, 20436, 19404, 20436, 20436,
 20565, 20565, 20565, 20565, 20565, 20565, 20565, 20565, 20565, 20565,
 20565, 20565, 20565, 20565, 20565, 20565, 20565, 20565, 20565, 20565,
 20565, 20565, 20565, 20565, 20565, 20565,     0,     0, 21676, 21731,
 18365,     0,     0, 22391, 20694,     0, 19662, 18236, 17021,   766,
 19662, 20694,     0, 17151,     0,   467,     0,   470,     0,   -31,
     0,     0,     0,   158,     0,     0,     0, 21786, 21841, 18365,
 18106, 20436,   477,     0,     0,  1618,   459, 19791,   559,     0,
     0, 17280,   417,     0, 18106,   563, 21896, 21951, 18365, 20565,
 20565, 20565, 18106,   399, 19920,   576,     0,    79,    79,     0,
 22006, 22061, 18365,     0,     0,     0,     0,   666,     0, 20565,
 18495,     0,     0, 18885,     0,   192,     0,   500,     0,     0,
     0,   806,   813,   192,    50,     0,     0,     0,     0,     0,
 17748, 20436,  5289, 17976,   505,     0, 21896, 21951, 20565, 20565,
   192,     0,     0,   192,     0,     0, 19015,     0,     0, 19145,
     0,     0,     0,     0,     0,   833, 22116, 22171, 18365, 21339,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   172,     0,     0,   846,     0,     0,     0,
     0,     0,     0,     0,  1584,  2761,     0,     0,     0,     0,
     0,   828,   581,   587,   851,     0,     0,  -163,   853,   855,
     0,     0,   857,     0,     0,     0,   597,   865, 20565,     0,
     0,   203,     0,     0,   881,  -120,  -120,     0,     0,     0,
     0,     0,     0,     0,   425,  2779,  2779,  2779,  2779,  2323,
  2323,  3360,  3257,  2779,  2779,  2858,  2858,   386,   386,   425,
  2142,   425,   425,   420,   420,  2323,  2323,  2334,  2334,  5709,
  -120,   577,     0,   578,  -161,     0,     0,   579,     0,   588,
  -161,     0,     0,     0,   192,     0,     0,  -161,     0,  5289,
 20565,     0,     0,  4283,     0,     0,   871,   901,   192, 21339,
   902,     0,     0,     0,     0,     0,     0,  4786,     0,     0,
     0,   158,     0, 20436, 18106,  -161,     0,     0,  -161,     0,
   192,   686,    50,  2761, 18106,  2761, 17861, 17748, 17976,     0,
     0,   613,     0, 18106,   688,     0,     0,   102,     0,   616,
   626,   628,   630,   192,  4283,   559,   703,   689,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   192, 20436, 20565,
     0, 20565,   367,   685,     0,     0,     0,     0, 18495, 18885,
     0,     0,     0,    50,   611,     0,   425,  5289,     0,     0,
   150, 21339,     0,     0,     0,     0,   192,   833,     0,   -19,
     0,     0,     0,  1584,  1028,     0,   931,     0,   192,   192,
 20565,     0,     0,  2206,     0, 18106, 18106,     0,  2761,     0,
  2761,     0,  1004,     0,     0,    34,     0,     0,     0,     0,
     0,   928,     0, 18106,     0, 18106,   919, 18106, 20694, 20694,
     0,   467,     0,     0, 20694, 20694,     0,   467,   642,   639,
    99,  -140,     0, 20565, 20694, 20049,     0,   833, 21339, 20565,
  -120,     0,   158,   717,     0,     0,     0,   192,   721,   158,
     0,     0,   635, 21468,   193,     0,     0, 18106,     0,     0,
 20436,     0,   727, 20565, 20565, 20565, 20565,   669,   747,     0,
 20178, 18106, 18106, 18106,     0,    79,     0,     0,     0,   960,
     0,     0,     0,     0,     0, 18106,     0,     0,     0,     0,
     0,   192,  1783,   966,  1777,     0,   670,   956,     0,     0,
   970,     0,   763,   665,   986,   987,     0,   997,     0,   970,
     0,     0,   865,   982,  1006,   192,  1012,     0,     0,  1017,
  1020,     0,   708,     0,   865, 21597,   784,   705, 20565,   807,
     0,  5289,     0,  5289,     0,     0,  5289,     0,  5289,     0,
 20694,     0,     0,     0,  5289, 20565,     0,   833,  5289, 18106,
 18106,     0,     0,     0,     0,     0,   477,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   767,   619,     0,     0, 18106,     0,   193,     0, 20565,     0,
     0,    62,   815,   823,     0, 18885,   725,     0,  1046,  1783,
  1082,     0,     0,  1324,  2206,     0,     0,     0,  2206,     0,
  2761,     0,  2206,     0,     0,     0, 21597,  2206,     0,   734,
  2808,     0,  1004,     0,  2808,     0,     0,     0,     0,     0,
   785,   636,     0,     0,  5289,     0,     0,  5289,     0,   737,
   840, 18106,     0, 22226, 22281, 18365,   364, 18106,     0,     0,
     0,     0,     0, 18106,     0,  1783,  1046,  1783,  1053,     0,
   174,     0,     0,   970,  1066,   970,   970,   636,  1068,     0,
     0,  1072,  1080,     0,   865,  1083,  1068,     0,     0, 22336,
     0,     0,   868,     0,     0,     0,     0,   192,     0,   102,
   878,  1046,  1783,  1324,     0,     0,  2206,     0,     0,     0,
  2206,     0,  2206,     0,  2808,     0,     0,  2206,     0,     0,
     0,     0,     0,     0,     0,     0,  1046,     0,   970,  1068,
  1085,  1068,  1068,     0,     0,  2206,     0,     0,     0,  1068,
     0,
    }, yyRindex = {
//yyRindex 1091
     0,     0,   189,     0,     0,     0,     0,     0,   789,     0,
     0,   873,     0,     0,     0, 14736, 14841,     0,     0, 14947,
  4988,  4485, 15236, 15313, 15419, 15539, 20823,     0, 20307,     0,
     0, 15616, 15720, 15842,   370,  5118,  3609, 15968, 16084,  5491,
 16194,     0,     0,     0,     0,     0,    71,    54,   819,   788,
   171,     0,     0,  1070,     0,     0,     0,  1148,    -6,     0,
     0,     0,     0,     0,     0,     0,  1359,   287,     0,     0,
     0, 10190,     0,     0,     0, 10365,     0,     0,     0,     0,
     0,     0,     0,     0,    40,  1773,  1498, 10496, 16391,     0,
     0, 16759,     0, 16271,     0,     0,     0,     0,     0,     0,
   260,     0,     0,     0,     0,    67,     0, 18625,     0,     0,
     0,     0, 10606,  8308,     0,     0,     0,     0,     0,   824,
     0,     0,     0,  6939,     0,     0,  7069,     0,     0,     0,
     0,    71,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1016,  1259,  1515,  1569,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1654,  2194,
  2712,     0,  3215,     0,  3718,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0, 16846,     0,     0,     0,    87,   574,     0,
  1217,    56,     0,     0,  8418,  8549,  8724,  8855,  8965,  9096,
  9271,  2470,  9402,  9512,  2603,  9643,     0,  9768,     0,     0,
  9949,     0,     0,     0,     0,     0,   873,     0,   895,     0,
     0,     0,   517,   740,   744,   827,  1040,  1118,  1174,   918,
  1506,  1568,  2242,  1593,     0,     0,  1644,     0,     0,     0,
     0,     0,     0,     0,     0,     0, 14497,     0,     0, 15069,
 16544, 16544,     0,     0,     0,     0,   830,     0,     0,    58,
     0,     0,   830,     0,     0,     0,     0,     0,     0,    52,
     0,     0,     0, 10846, 10737, 16373,    71,     0,   162,   830,
   116,   830,     0,     0,   825,   825,     0,     0,     0,   820,
  1170,  1793,  1801,  2381,  5121,  5624,  6127,   812,  7061,  8072,
  1655,  8185,     0,     0,     0,  8316,   298,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -147,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    63,     0,     0,     0,     0,     0,     0,    71,   384,   485,
     0,     0,     0,    69,     0,  1169,     0,     0,     0,   236,
     0,  7483,     0,     0,     0,     0,     0,     0,     0,    63,
   789,     0,   810,     0,     0,    74,     0,   557,   350,     0,
     0,  2184, 10059,     0,    84,  7613,     0,     0,    63,     0,
     0,     0,   709,     0,     0,     0,     0,     0,     0,  1679,
     0,     0,    63,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   830,     0,     0,     0,     0,
     0,    33,    33,   830,   830,     0,     0,     0,     0,     0,
     0,     0, 13592,    52,     0,     0,     0,     0,     0,     0,
   830,     0,   180,   830,     0,     0,   831,     0,     0,   -91,
     0,     0,     0,  8362,     0,   510,     0,     0,    63,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   167,   240,     0,    60,     0,     0,     0,    60,    60,
     0,     0,   100,     0,     0,     0,   687,   100,   209,     0,
     0,     0,     0,     0,     0,  7744,  7882,     0,     0,     0,
     0,     0,     0,     0, 10966, 12807, 12893, 12984, 13072, 12372,
 12469, 13158, 13418, 13244, 13332,  1412, 13504, 11785, 11916, 11075,
 12026, 11206, 11316, 11556, 11676, 12586, 12710, 12131, 12252,  1115,
  7744,  5621,     0,  5994,  4615,     0,     0,  6124,  3982,  6497,
 18625,     0,  4112,     0,   843,     0,     0,  6627,     0, 13678,
     0,     0,     0, 16809,     0,     0,     0,     0,   830,     0,
   600,     0,     0,     0,     0, 10315,     0, 14586,     0,     0,
     0,     0,     0,     0,   789,  9818,  7211,  7341,     0,     0,
   843,     0,   830,   177,   789,   305,     0,     0,    52,     0,
   657,   226,     0,   612,   926,     0,     0,   926,     0,  2976,
  3106,  3479,  2053,   843, 14648,   926,     0,     0,     0,     0,
     0,     0,     0,  2813,  3315,  3818,   870,   843,     0,     0,
     0,     0, 16482, 16544,     0,     0,     0,     0,    41,   241,
     0,     0,     0,   830,     0,     0, 11435, 13764,   131,     0,
   825,     0,  1927,  1937,  9207,  1326,   843,   629,     0,     0,
     0,     0,     0,     0,   210,     0,   211,     0,   830,    13,
     0,     0,     0,     0,     0,   370,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   -27,     0,   370,     0,    52,     0,   370,     0,     0,
     0,  1930,     0,     0,     0,     0,     0, 16646, 15130,     0,
 16795, 16706,  1682,     0,     0,     0,     0,   644,     0,     0,
  7882,     0,     0,     0,     0,     0,     0,   830,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   370,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  8177,     0,     0,
     0,   641,   370,   370,  1262,     0,     0,     0,     0,    33,
     0,     0,     0,     0,  1541,    52,     0,     0,     0,     0,
     0,   830,     0,   215,     0,     0,     0,  -166,     0,     0,
    60,     0,     0,     0,    60,    60,     0,    60,     0,    60,
     0,     0,   100,   119,    75,   -27,    75,     0,     0,    80,
    75,     0,     0,     0,    80,   151,     0,     0,     0,     0,
     0, 13852,     0, 13938,     0,     0, 14024,     0, 14112,     0,
     0,     0,     0,     0, 14198,     0,  8674,   664, 14284,    52,
   789,     0,     0,     0,     0,     0,   810,     0,   888,  1224,
  1320,  1915,  2295,  3217,  3720,  1194,  4223,  4726,  1282,  5229,
     0,     0,  6235,     0,   789,     0,     0,     0,     0,     0,
     0,   926,     0,     0,     0,   246,     0,     0,   223,     0,
   227,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,     0,     0,     0,   464,   654,
     0,   156,     0,     0, 14372,     0,     0, 14458,  9221,     0,
     0,   789,  7127,     0,     0,    63,   574,    84,     0,     0,
     0,     0,     0,   370,     0,     0,   237,     0,   247,     0,
   -73,     0,     0,    60,    60,    60,    60,   157,    75,     0,
     0,    75,    75,     0,    80,    75,    75,     0,     0,     0,
     0,     0,     0,  1386,  1923,  2222,  1809,   843,     0,   926,
     0,   248,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1022,  1039,     0,   753,     0,     0,   255,     0,    60,    75,
    75,    75,    75,     0,     0,     0,     0,     0,     0,    75,
     0,
    }, yyGindex = {
//yyGindex 179
     0,     0,    27,     0,  -331,     0,   -72,     2,    -5,   537,
   975,     0,     0,   163,     0,     0,     0,  1123,     0,     0,
   909,  1140,     0,   449,     0,     0,     0,   829,     0,    30,
  1202,  -417,    66,     0,   112,     0,   402,  -429,     0,     8,
   264,  1765,    24,    20,   749,     6,    98,  -413,     0,   159,
     0,   614,     0,    -9,     0,    44,  1207,   569,     0,     0,
  -699,     0,     0,   955,  -382,     0,     0,     0,  -422,   295,
  -266,   -86,    -1,   130,  -448,     0,     0,   799,    -2,   138,
     0,     0, 11901,   462,  -786,     0,     0,     0,     0,  -274,
  1554,   455,   244,   478,   269,     0,     0,     0,     4,  -466,
     0,  -462,   262,  -295,  -449,     0,  -580,  8181,   -71,   448,
  -491,  1238,   -28,   249,  1264,     0,   -12,  -686,     0,  -676,
     0,     0,  -189,  -822,     0,  -407,  -781,   503,   205,  -141,
  -624,     0,  -840,  -427,     0,    28,     0,  1645,  2022,   751,
     0,    47,   -10,     0,     0,     0,   -23,     0,     0,  -309,
     0,     0,     0,  -239,     0,  -419,     0,     0,     0,     0,
     0,     0,    22,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    };
  protected static final short[] yyTable = {
//yyTable 22778
    97,   217,   217,   314,   382,   317,   494,   776,   216,   651,
    84,    84,   310,   644,   429,   316,   263,   266,   328,   301,
   301,   681,   217,   301,   472,   706,   530,   725,   134,   134,
   532,   108,   624,   269,   230,   297,   297,   232,   134,   297,
     8,   724,   680,   636,   724,   694,   333,   337,   217,   356,
     8,   273,   335,   339,   230,   364,   814,   232,   442,   712,
   313,   703,   635,   725,   307,   311,    17,   622,   635,   623,
   545,   878,   624,   635,   134,   717,   958,   747,   420,   837,
   313,   635,   876,   961,    16,   387,   734,   634,   640,   265,
   598,   527,   647,   844,   635,   433,   437,   635,   434,     8,
    89,    89,   135,   135,   310,   892,    89,   259,   259,   259,
   598,   635,   285,   259,   259,    17,   675,   259,   358,   545,
   265,   393,   854,  1022,   134,   526,   309,   269,   434,   566,
   635,   746,    89,    16,   387,   634,   640,   520,   264,   598,
   380,    74,   765,   635,    89,   259,   635,   560,   354,   675,
   259,   435,   432,   300,   300,   446,   324,   300,   560,   598,
   527,   575,  1037,   566,   664,   306,   574,   585,   265,   264,
   393,   505,    73,  1016,   785,    86,   408,   567,   566,   336,
   309,    83,   380,   759,   313,   675,   334,   560,   522,   635,
   524,   689,    72,   408,   529,   575,   560,   807,   354,   635,
   574,   585,   313,   265,   750,   675,   780,   494,   787,   979,
   575,   567,   766,  1022,   507,   574,   585,   264,  1053,   573,
   380,   373,   381,    71,    86,   378,   567,   259,   560,    89,
   461,  1051,    83,   381,   961,   778,   635,   376,   658,   781,
   438,    72,  1037,   309,   455,   813,   342,   379,   635,   319,
   593,   275,   264,   573,   630,   818,   274,   374,   377,   388,
   389,   822,   269,   725,   381,   375,  1076,   534,   573,   624,
    75,   878,   630,   257,   257,   257,   477,   478,   876,   724,
   724,   508,   509,   369,   593,   635,   624,   460,   269,   421,
   856,   857,   838,   858,   876,   342,   422,   325,   328,   593,
   904,   817,   975,   819,   769,   771,   909,   500,    81,   983,
   301,   330,   301,   473,   987,   560,   418,   555,    17,    17,
    17,    75,   556,   419,    17,    17,   297,    17,   297,   297,
    54,   693,   624,   474,    89,    89,    16,    16,    16,   593,
   388,   389,    16,    16,   594,    16,   917,   371,   635,   635,
   635,   635,   635,   635,   726,   624,   635,    60,    61,    81,
   709,   375,   730,   731,   560,   545,   443,   475,   259,   259,
   830,   693,   475,   377,   876,   636,   679,   134,   636,   738,
   635,   416,   739,   273,   568,   569,   273,   651,   919,   597,
   598,   599,   600,   439,    79,   601,   307,   449,    17,   328,
   635,   425,   545,     8,   259,   598,   259,   259,   635,   636,
   259,   312,   259,   635,   642,   635,    16,    89,   500,    17,
   484,   485,   486,  1073,    89,   488,   954,   660,   848,   635,
   622,   852,   623,   424,   387,   545,   320,    16,   636,   598,
   297,    84,   598,   642,   300,    79,   300,   500,   327,    18,
    83,   354,   134,   534,  1066,   692,   695,   636,   309,    72,
   463,   668,   642,   431,   468,   672,   500,   444,   841,   297,
   393,   636,   567,    74,   507,   598,   642,   426,   566,   560,
   500,   259,   259,   259,   259,    89,   259,   259,   297,   725,
   648,  1000,   652,   635,   723,    76,   662,   666,   732,   711,
   711,   430,   297,  1010,    73,   217,   724,   636,   507,   567,
   575,    97,   642,    83,   573,   574,   585,   806,   259,   560,
    84,    84,   259,   507,   259,    89,   354,   636,   259,   259,
   740,    89,   642,   327,   257,   257,   500,   230,  1008,    75,
   232,   816,   567,   540,   541,   593,    76,   259,    89,   259,
   543,   573,   380,   373,   848,   507,   655,   378,   297,    89,
   665,    97,    89,   134,   657,   381,   259,   635,   657,   376,
    89,    84,  1042,   534,   540,   541,   504,    81,   506,   379,
   259,   543,   593,   275,   573,   944,   275,   690,   274,   374,
   377,   274,   850,   784,   784,   657,   965,   375,  1047,   593,
   969,   971,    75,   973,   655,   974,   786,   312,   513,   259,
    77,    89,   707,   635,   635,   593,   635,   865,   580,   720,
   722,   799,   635,   336,   454,   790,   457,   482,   784,   298,
   304,   796,   793,   305,   635,   447,   259,   354,   790,    82,
    81,   459,   448,   462,   470,   793,   468,   257,   257,   257,
   257,   635,   602,   603,    80,   853,   722,   799,   469,   336,
   477,    77,   538,    79,   510,   477,   790,   444,   471,   796,
   474,   635,   675,   793,    78,   821,   923,   476,   791,   812,
   799,   217,   217,   134,   797,   479,    97,   483,   820,   825,
    82,   800,   829,   811,   799,   695,    84,   583,   510,   265,
   635,   286,   466,   695,   390,    80,   489,  1007,   440,   467,
  1005,   490,   441,   510,   230,   682,   444,   232,   777,   635,
   957,   514,   534,   799,   845,    78,    79,   449,   327,   493,
   913,   583,   849,   840,   513,   405,   867,   515,   390,   407,
   408,   409,   410,   390,   610,   510,   583,   518,   264,  1055,
  1057,  1058,  1059,   107,   107,   519,   521,   354,   867,   107,
   107,   107,   107,   122,    76,   134,   107,   107,   635,   405,
   107,   259,    89,   407,   408,   733,   540,   541,   542,   525,
   802,   531,    89,   543,    96,   107,    89,   533,    98,    84,
   539,    89,   550,   507,   554,   589,   116,   107,   107,   635,
   507,    96,    96,   107,  1083,   610,   592,    96,   784,   580,
   661,   511,   122,   287,   669,   546,   259,   549,   683,   552,
   538,   688,    91,   507,   635,   552,   610,    76,   693,   327,
   698,   512,   134,    96,   921,   514,   946,   443,   443,   354,
   708,   925,   727,   443,   434,    96,   513,   134,   635,   846,
   728,   847,    84,   513,   900,   902,    91,   729,   722,   336,
   905,   907,   867,    89,    89,   480,   697,   711,   735,   538,
   652,    99,   481,    91,   705,   635,   635,   741,   752,    77,
   107,    89,   107,    89,   516,    89,   259,   259,   761,   760,
   868,   517,   259,   259,   762,   763,   635,   768,   116,   770,
   536,   772,   259,   507,   774,   635,   354,   537,    82,   775,
   635,   571,   635,   779,   107,   788,   789,   794,   515,   134,
   495,   941,   498,    80,   444,    89,   795,   580,   259,   580,
    96,   874,   804,   877,   611,   916,   546,   257,   313,    89,
    89,    89,    77,    78,   884,   805,   808,   116,  1003,   695,
   815,   827,   823,    89,   833,  1004,   463,    93,    93,   136,
   136,   312,    91,    93,   834,   447,   835,   839,   836,   286,
   950,    82,  1039,   635,   851,   864,   996,   898,   635,   513,
   910,   922,   257,   510,   911,   924,    80,   107,   107,    93,
   510,   947,   583,   991,   636,   611,   444,  1054,   927,   642,
   134,    93,   751,   500,   955,   355,    78,   948,   259,   507,
   959,   949,   962,   510,   964,   963,   611,    89,    89,   115,
   122,   107,   107,   117,   799,   297,   206,   966,   967,   583,
   968,   970,   617,   434,   642,    96,    96,   540,   541,   545,
   751,   972,    89,   976,   543,   998,   583,   695,   992,   312,
   977,   635,   635,   635,   719,   355,   980,   107,   635,   107,
   107,   982,   583,   107,   984,   107,   617,   986,   993,   512,
   107,   995,   862,   514,  1027,   206,   512,   107,  1002,  1011,
   514,   617,   434,   312,   101,   336,    93,  1012,  1014,   434,
  1015,    91,   610,  1030,   257,   826,  1038,  1052,   312,    89,
  1040,   755,   571,   259,  1041,    89,   118,   540,   541,   545,
  1056,    89,  1060,   617,   543,   434,  1062,   538,    96,   538,
   538,   538,   538,   538,  1064,    96,  1017,  1067,   538,  1085,
   312,   517,  1072,  1024,   107,   107,   107,   107,   107,   107,
   107,   507,  1075,  1031,   622,   540,   541,  1035,   507,   126,
   538,   635,   543,   610,    91,   116,   515,   548,   538,   538,
   538,   538,   100,   515,   635,   624,   623,   872,   873,    60,
   628,   107,   624,   624,   610,   107,   630,   107,   107,    60,
    97,   107,   107,   628,   107,   896,    96,   897,   624,   899,
   635,    93,    93,   453,   379,   367,   538,   110,   610,   312,
   107,   107,   107,   487,   110,   591,   312,   138,  1074,   516,
   696,   614,   107,   219,    97,   107,   801,   513,   102,   107,
   571,  1001,   571,   107,   513,   656,    96,  1080,    60,   945,
   875,    97,    96,   107,   115,   883,   887,   558,   559,   560,
   561,   562,  1032,   951,   952,   953,   563,   507,   912,    96,
   880,  1033,   288,   110,   507,  1048,   861,   956,  1077,   610,
    96,   513,   107,    96,   107,   518,   103,   103,   564,   199,
     0,    96,   103,     0,    93,     0,   566,   567,   568,   569,
   610,    93,     0,   115,     0,   507,   540,   541,   547,   107,
   755,   863,   113,   543,   540,   541,   551,     0,   103,     0,
     0,   543,   617,     0,     0,   571,   103,   571,   355,     0,
   103,     0,    96,     0,   570,   512,     0,   562,   199,   120,
     0,   999,   563,   206,     0,   206,   206,   206,   206,   206,
   117,     0,     0,     0,   206,   557,   107,   558,   559,   560,
   561,   113,    93,     0,     0,   513,  1006,    62,    63,    64,
    65,   617,   513,   434,   568,   569,   206,   206,   617,     0,
     0,     0,     0,   613,   206,   206,   206,   206,   312,   517,
   107,     0,     0,   510,     0,   312,   517,     0,     0,   117,
   614,   617,    93,   355,   617,     0,     0,   107,    93,   557,
   570,   558,   559,   560,   561,   103,   123,   119,   312,   755,
     0,   755,   206,     0,     0,    93,   540,   541,   590,  1049,
     0,   514,   230,   543,     0,  1050,    93,   312,     0,    93,
     0,     0,   230,     0,   107,   107,     0,    93,     0,     0,
     0,    60,    60,    60,     0,   107,    60,    60,    60,   107,
    60,   481,   481,   481,   107,   123,     0,   516,   481,    97,
    60,    60,     0,   121,   516,     0,   230,     0,     0,    60,
    60,   110,    60,    60,    60,    60,    60,     0,    93,   107,
   230,   230,     0,    96,   610,   230,     0,   613,     0,   622,
   622,   622,     0,    96,     0,   622,   622,    96,   622,     0,
     0,   115,    96,     0,   355,     0,   755,  1018,    51,   513,
   103,   103,     0,   518,     0,     0,   513,   571,    51,     0,
   518,    60,    97,     0,    60,     0,   107,   107,     0,   463,
   463,   463,     0,   507,     0,   209,   463,     0,     0,     0,
   507,     0,    60,     0,   107,   610,   107,     0,   107,   107,
   107,   122,   434,     0,     0,   107,   107,     0,     0,   113,
    93,   103,   755,   512,   755,   107,   610,    51,     0,   622,
   512,     0,   611,     0,    96,    96,   199,     0,   199,   199,
   199,   199,   199,     0,   209,     0,     0,   199,   107,   194,
   622,   107,    96,   103,    96,   103,    96,   117,   512,   755,
   103,   434,   107,   107,   107,   512,     0,   509,   434,   199,
   199,     0,   103,   656,     0,   107,   107,   199,   199,   199,
   199,   510,    92,     0,   355,     0,     0,     0,   510,     0,
     0,     0,   943,   611,   434,     0,    96,     0,   194,    93,
     0,  1019,   434,   558,   559,   560,   561,    95,     0,    93,
    96,    96,    96,    93,   611,   199,     0,     0,    93,   514,
     0,   103,     0,   123,    96,   312,   514,     0,     0,   508,
     0,   107,   312,     0,   176,    94,   613,   614,   107,     0,
   107,   107,     0,     0,   230,   230,   230,     0,     0,   230,
   230,   230,   294,   230,   511,     0,     0,     0,   109,     0,
     0,   103,   294,   230,   230,   107,   355,   103,     0,    94,
     0,     0,   230,   230,   860,   230,   230,   230,   230,   230,
     0,     0,     0,   176,   103,   613,    94,   230,    96,    96,
    93,    93,   613,   108,     0,   103,   287,   613,   103,     0,
   469,   469,   469,     0,     0,   304,   103,   469,    93,     0,
    93,   294,    93,    96,     0,     0,   510,     0,   613,     0,
     0,   230,   107,     0,   230,     0,   107,   230,   107,   230,
    51,    51,    51,   355,   107,    51,    51,    51,     0,    51,
   313,     0,     0,    43,     0,   230,     0,   103,   942,    51,
   296,   296,    93,    43,   296,   112,     0,   230,    51,    51,
     0,    51,    51,    51,    51,    51,    93,    93,    93,     0,
    96,     0,     0,    96,     0,     0,    96,   321,   323,     0,
    93,    98,    96,   296,   296,     0,   357,   359,     0,   126,
   103,   434,   209,     0,   209,   209,   209,   209,   209,     0,
     0,     0,    43,   209,     0,   509,     0,    96,     0,     0,
    51,     0,   509,     0,   514,    98,     0,   111,     0,     0,
   136,   514,     0,     0,    96,   209,   209,     0,     0,     0,
     0,    51,    98,   209,   209,   209,   209,     0,   126,     0,
   434,     0,   114,     0,    93,    93,   194,   434,   194,   194,
   194,   194,   194,   103,   512,     0,     0,   194,     0,     0,
     0,   557,   514,   558,   559,   560,   561,   508,   515,    93,
   312,   209,     0,   434,   508,   515,     0,     0,     0,   194,
   194,   383,   384,   385,   386,   387,     0,   194,   194,   194,
   194,     0,   511,   128,   753,   118,     0,     0,     0,   511,
    62,   136,   754,   125,    94,   611,     0,   104,   103,     0,
    62,     0,     0,     0,   294,   294,   294,   106,   103,   294,
   294,   294,   103,   294,     0,   194,    93,   103,   127,     0,
     0,   176,    93,   176,   176,   176,   176,   176,    93,     0,
     0,   104,   176,   304,   118,   294,   294,   294,   294,   294,
   304,   106,   125,   517,   510,     0,     0,     0,   104,    62,
   517,   510,     0,     0,   176,   176,   611,    94,   106,     0,
     0,     0,   176,   176,   176,   176,   515,     0,   313,     0,
     0,     0,     0,     0,   614,   313,     0,   611,   613,     0,
     0,   294,     0,     0,   294,     0,     0,     0,   614,   103,
   103,     0,     0,     0,     0,    43,    43,    43,     0,     0,
   176,    43,    43,     0,    43,   294,     0,   103,     0,   103,
     0,   103,     0,   312,     0,   296,   296,   296,   359,     0,
   296,     0,     0,   312,     0,     0,    43,    43,    43,    43,
    43,   296,    96,   296,   296,     0,   126,     0,     0,     0,
    98,     0,   512,     0,   557,     0,   558,   559,   560,   561,
   557,   103,   558,   559,   560,   561,     0,   312,     0,     0,
     0,     0,     0,     0,     0,   103,   103,   103,     0,     0,
     0,   312,   312,     0,   126,    43,   312,   753,     0,   103,
     0,     0,   512,   753,     0,   960,     0,     0,     0,   512,
   514,     0,     0,     0,     0,    96,    43,   514,   312,     0,
     0,     0,     0,    98,   312,   312,     0,     0,     0,     0,
   614,     0,     0,     0,     0,   604,   605,   606,   607,   608,
   609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
   619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
   629,     0,   118,   103,   103,   296,     0,     0,     0,   649,
   125,   653,    62,    62,    62,   296,   667,    62,    62,    62,
     0,    62,     0,   614,   177,     0,   104,   613,   103,     0,
     0,    62,    62,     0,   296,     0,   106,   614,     0,     0,
    62,    62,   296,    62,    62,    62,    62,    62,     0,     0,
     0,     0,   124,   296,   649,   704,   667,     0,     0,   296,
     0,     0,     0,     0,   515,     0,     0,   296,     0,     0,
     0,   515,   614,   177,   296,   296,   613,     0,   296,   614,
     0,     0,     0,   613,   614,   103,   614,     0,   613,   104,
     0,   103,    62,   614,     0,    62,     0,   103,   614,   106,
     0,   124,     0,   736,   737,   614,    94,     0,     0,   613,
     0,   296,     0,    62,   296,     0,     0,     0,     0,   614,
     0,     0,     0,   296,     0,   120,     0,     0,     0,     0,
   614,   614,   614,   617,   614,   312,   312,   312,   614,   614,
   312,   312,   312,   614,   312,   614,   614,   614,   614,   614,
   614,   614,     0,   510,   312,   312,   614,   614,   614,   614,
   614,   614,   614,   312,   312,   614,   312,   312,   312,   312,
   312,     0,   614,   296,   120,   614,   614,   614,   312,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   312,   312,   312,   312,   312,   312,   312,   312,   312,
   312,   312,   312,   312,   312,     0,   517,   312,   312,   312,
   614,    99,   312,   614,   614,   312,   614,   614,   312,   614,
   312,   614,   312,   614,   312,   614,   312,   312,   312,   312,
   312,   312,   312,   614,   312,   296,   312,   882,   614,   614,
   614,   614,   614,   614,     0,    99,   894,   614,   312,   614,
   614,     0,   614,   614,   614,   614,     0,   614,   614,   614,
   981,     0,    99,     0,   985,     0,   623,   623,   623,     0,
     0,     0,   623,   623,     0,   623,     0,     0,     0,     0,
   390,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   507,     0,   515,     0,     0,     0,   403,   404,     0,     0,
   507,     0,     0,     0,   296,     0,   296,     0,     0,   124,
     0,   405,     0,   296,   296,   407,   408,   409,   410,     0,
     0,   177,   617,   177,   177,   177,   177,   177,     0,     0,
     0,     0,   177,   557,   507,   558,   559,   560,   561,   562,
     0,   113,   611,   516,   563,   296,   623,     0,   507,   507,
   516,   110,     0,   507,   177,   177,     0,     0,     0,     0,
     0,     0,   177,   177,   177,   177,   564,   623,     0,     0,
     0,   617,     0,   901,   903,     0,   568,   569,   617,   906,
   908,   507,   120,   613,     0,     0,     0,     0,   914,   704,
   296,   510,     0,     0,   918,     0,     0,     0,   510,     0,
   177,     0,  1061,   611,   617,  1063,  1065,     0,     0,  1068,
  1069,     0,   570,     0,     0,     0,     0,     0,   901,   903,
   906,   908,     0,   510,   611,   296,     0,     0,     0,     0,
     0,     0,   557,   510,   558,   559,   560,   561,   562,     0,
     0,     0,   894,   563,   517,   894,     0,  1034,     0,   894,
     0,   517,     0,  1084,  1086,  1087,  1088,     0,     0,     0,
     0,   390,     0,  1090,     0,   564,   565,   510,     0,     0,
     0,     0,   390,   566,   567,   568,   569,   403,   404,     0,
    99,   510,   510,   994,   113,     0,   510,     0,   403,   404,
     0,     0,   405,     0,   406,   997,   407,   408,   409,   410,
   296,     0,   413,   405,   414,   406,     0,   407,   408,   409,
   410,   570,     0,     0,   510,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   894,     0,   894,     0,   894,
   515,     0,   894,   997,     0,     0,     0,   515,     0,     0,
   296,     0,   178,    99,     0,     0,     0,   610,   610,   610,
   894,   610,   507,   507,   507,   610,   610,   507,   507,   507,
   610,   507,   610,   610,   610,   610,   610,   610,   610,     0,
   610,   507,   507,   610,   610,   610,   610,   610,   610,   610,
   507,   507,   610,   507,   507,   507,   507,   507,     0,   610,
   296,   178,   610,   610,   610,   507,   610,   610,   610,   610,
   610,   610,   610,   610,   610,   610,   610,   610,   507,   507,
   507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
   507,   507,     0,   895,   507,   507,   507,   610,   519,   507,
   610,   610,   507,   610,   610,   507,   610,   507,   610,   507,
   610,   507,   610,   507,   507,   507,   507,   507,   507,   507,
   610,   507,   610,   507,     0,   610,   610,   610,   610,   610,
   610,     0,     0,     0,   610,   507,   610,   610,     0,   610,
   610,   610,   610,     0,   610,   610,   610,   104,     0,     0,
   611,   611,   611,     0,   611,   510,   510,   510,   611,   611,
   510,   510,   510,   611,   510,   611,   611,   611,   611,   611,
   611,   611,     0,   611,   510,   510,   611,   611,   611,   611,
   611,   611,   611,   510,   510,   611,   510,   510,   510,   510,
   510,     0,   611,     0,   613,   611,   611,   611,   510,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   510,   510,   510,   510,   510,   510,   510,   510,   510,
   510,   510,   510,   510,   510,     0,     0,   510,   510,   510,
   611,   522,   510,   611,   611,   510,   611,   611,   510,   611,
   510,   611,   510,   611,   510,   611,   510,   510,   510,   510,
   510,   510,   510,   611,   510,   611,   510,     0,   611,   611,
   611,   611,   611,   611,     0,     0,   613,   611,   510,   611,
   611,     0,   611,   611,   611,   611,   613,   611,   611,   611,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   895,
     0,     0,   895,     0,   895,     0,   895,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   178,
   613,   178,   178,   178,   178,   178,     0,     0,     0,     0,
   178,     0,     0,     0,   613,   613,     0,   123,     0,   613,
     0,   518,     0,     0,     0,     0,     0,     0,   518,     0,
     0,     0,   178,   178,     0,     0,     0,     0,     0,     0,
   178,   178,   178,   178,     0,     0,     0,   613,   557,     0,
   558,   559,   560,   561,   562,     0,     0,     0,     0,   563,
     0,     0,   895,     0,   895,     0,   895,     0,     0,   895,
     0,     0,   123,   613,     0,     0,     0,   390,   178,     0,
     0,   564,   395,   396,     0,     0,   614,   895,     0,   566,
   567,   568,   569,   403,   404,   883,   614,   558,   559,   560,
   561,   562,     0,     0,     0,     0,   563,     0,   405,     0,
   406,     0,   407,   408,   409,   410,   411,   412,   413,     0,
   414,     0,   613,     0,     0,     0,     0,   570,   564,   613,
   614,     0,     0,     0,   613,     0,   566,   567,   568,   569,
     0,     0,     0,     0,   614,   614,     0,   125,     0,   614,
     0,     0,     0,     0,     0,   613,   390,   391,   392,   393,
   394,   395,   396,   397,   398,   399,   400,     0,     0,     0,
     0,     0,   403,   404,   570,     0,     0,   614,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   405,     0,   406,
     0,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     0,     0,     0,     0,     0,   134,     0,   119,     0,     0,
     0,     0,     0,   613,   613,   613,     0,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,     0,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   134,   613,   119,     0,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   516,     0,
   613,   613,   613,   613,     0,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     0,   613,   613,   613,   613,   613,   613,     0,     0,     0,
   613,   613,   613,   613,     0,   613,   613,   613,   613,   106,
   613,   613,   613,   614,   614,   614,     0,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,     0,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,     0,   614,   614,     0,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,     0,     0,
   614,   614,   614,   614,     0,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
     0,   614,   614,   614,   614,   614,   614,     0,     0,   617,
   614,   614,   614,   614,   119,   614,   614,   614,   614,   617,
   614,   614,   614,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   134,   617,   134,   134,   134,   134,   134,     0,
     0,     0,     0,   134,     0,     0,     0,   617,   617,     0,
   124,     0,   617,     0,   507,     0,   516,     0,     0,     0,
     0,   507,     0,   516,     0,   134,   134,     0,     0,     0,
     0,     0,     0,   134,   134,   134,   134,     0,     0,     0,
   617,     0,     0,     0,     0,   390,   391,   392,   393,   394,
   395,   396,   397,     0,   399,   400,     0,     0,     0,     0,
     0,   403,   404,     0,   125,   614,     0,     0,     0,     0,
     0,   134,     0,     0,     0,     0,   405,     0,   406,   305,
   407,   408,   409,   410,   411,   412,   413,     0,   414,   305,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   614,     0,     0,     0,     0,     0,
     0,   614,     0,   305,     0,     0,   614,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   305,   305,     0,
     0,     0,   305,     0,     0,     0,     0,   614,   390,   391,
   392,   393,   394,   395,   396,     0,     0,   399,   400,     0,
     0,     0,     0,     0,   403,   404,     0,     0,     0,     0,
   305,     0,     0,     0,     0,     0,     0,     0,     0,   405,
     0,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     0,   414,     0,     0,     0,     0,     0,     0,   135,     0,
   121,     0,     0,     0,     0,     0,   613,   613,   613,     0,
   613,   617,   617,   617,   613,   613,   617,   617,   617,   613,
   617,   613,   613,   613,   613,   613,   613,   613,     0,   617,
   617,   617,   613,   613,   613,   613,   613,   613,   613,   617,
   617,   613,   617,   617,   617,   617,   617,   135,   613,   121,
     0,   613,   613,   613,   617,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   518,     0,   617,   617,   617,   613,     0,   617,   613,
   613,   617,   613,   613,   617,   613,   617,   613,   617,   613,
   617,   613,   617,   617,   617,   617,   617,   617,   617,   613,
   617,   617,   617,     0,   613,   613,   613,   613,   613,   613,
     0,     0,     0,   613,   617,   613,   613,     0,   613,   613,
   613,   613,   105,   613,   613,   613,   612,   612,   612,     0,
   612,   305,   305,   305,   612,   612,   305,   305,   305,   612,
   305,   612,   612,   612,   612,   612,   612,   612,     0,   612,
   305,   305,   612,   612,   612,   612,   612,   612,   612,   305,
   305,   612,   305,   305,   305,   305,   305,     0,   612,   617,
     0,   612,   612,   612,   305,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   305,   305,   305,
   305,   305,   305,   305,   305,   305,   305,   305,   305,   305,
   305,     0,     0,   305,   305,   305,   612,     0,   305,   612,
   612,   305,   612,   612,   305,   612,   305,   612,   305,   612,
   305,   612,   305,   305,   305,   305,   305,   305,   305,   612,
   305,   612,   305,     0,   612,   612,   612,   612,   612,   612,
     0,     0,   618,   612,   305,   612,   612,   121,   612,   612,
   612,   612,   618,   612,   612,   612,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   135,   618,   135,   135,   135,
   135,   135,     0,     0,     0,     0,   135,     0,     0,     0,
   618,   618,     0,     0,     0,   618,     0,   510,     0,   518,
     0,     0,     0,     0,   510,     0,   518,     0,   135,   135,
     0,     0,     0,     0,     0,     0,   135,   135,   135,   135,
     0,     0,     0,   618,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   124,   617,     0,
     0,     0,     0,     0,   135,     0,     0,     0,     0,     0,
     0,     0,   619,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   619,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   617,     0,     0,
     0,     0,     0,     0,   617,     0,   619,     0,     0,   613,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   619,   619,     0,     0,     0,   619,     0,     0,     0,     0,
   617,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   619,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   112,     0,     0,     0,     0,     0,   615,
   615,   615,     0,   615,   618,   618,   618,   615,   615,   618,
   618,   618,   615,   618,   615,   615,   615,   615,   615,   615,
   615,     0,   618,   618,   618,   615,   615,   615,   615,   615,
   615,   615,   618,   618,   615,   618,   618,   618,   618,   618,
     0,   615,   112,     0,   615,   615,   615,   618,   615,   615,
   615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
   618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
   618,   618,   618,   618,   509,     0,   618,   618,   618,   615,
     0,   618,   615,   615,   618,   615,   615,   618,   615,   618,
   615,   618,   615,   618,   615,   618,   618,   618,   618,   618,
   618,   618,   615,   618,   618,   618,   415,   615,   615,   615,
   615,   615,   615,     0,     0,     0,   615,   618,   615,   615,
     0,   615,   615,   615,   615,     0,   615,   615,   615,   616,
   616,   616,     0,   616,   619,   619,   619,   616,   616,   619,
   619,   619,   616,   619,   616,   616,   616,   616,   616,   616,
   616,     0,   619,   619,   619,   616,   616,   616,   616,   616,
   616,   616,   619,   619,   616,   619,   619,   619,   619,   619,
     0,   616,     0,     0,   616,   616,   616,   619,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   619,   619,   619,   619,   619,   619,   619,   619,   619,   619,
   619,   619,   619,   619,     0,     0,   619,   619,   619,   616,
     0,   619,   616,   616,   619,   616,   616,   619,   616,   619,
   616,   619,   616,   619,   616,   619,   619,   619,   619,   619,
   619,   619,   616,   619,   619,   619,     0,   616,   616,   616,
   616,   616,   616,     0,     0,   433,   616,   619,   616,   616,
   112,   616,   616,   616,   616,   433,   616,   616,   616,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   433,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   433,     0,     0,     0,   433,     0,
     0,     0,   509,     0,     0,     0,     0,     0,     0,   509,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   433,     0,     0,     0,
   803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
   399,   400,     0,   401,   402,   635,     0,   403,   404,     0,
     0,     0,     0,     0,     0,   635,     0,     0,     0,     0,
     0,     0,   405,     0,   406,     0,   407,   408,   409,   410,
   411,   412,   413,     0,   414,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   635,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   635,     0,     0,     0,   635,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   635,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   111,     0,     0,     0,
     0,     0,   281,   281,   281,     0,   281,   433,   433,   433,
   281,   281,   433,   433,   433,   281,   433,   281,   281,   281,
   281,   281,   281,   281,     0,   433,   433,   433,   281,   281,
   281,   281,   281,   281,   281,   433,   433,   281,   433,   433,
   433,   433,   433,     0,   281,   111,     0,   281,   281,   281,
     0,   281,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   281,   281,   433,   433,   433,   433,   433,   433,   433,
   433,   433,   433,   433,   433,   433,   433,   508,     0,   433,
   433,   433,   281,     0,   433,   281,     0,   433,   281,   281,
   433,   281,   433,   281,   433,   281,   433,   281,   433,   433,
   433,   433,   433,   433,   433,   281,   433,   433,   433,   415,
   281,   281,   281,   281,   281,   281,     0,     0,     0,   281,
     0,   281,   281,     0,   281,   281,   281,   281,     0,   281,
   281,   281,   281,   281,   281,     0,   281,   635,   635,   635,
   281,   281,   635,   635,   635,   281,   635,   281,   281,   281,
   281,   281,   281,   281,     0,   635,   635,   635,   281,   281,
   281,   281,   281,   281,   281,   635,   635,   281,   635,   635,
   635,   635,   635,     0,   281,     0,     0,   281,   281,   281,
     0,   281,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   281,   281,   635,   635,   635,   635,   635,   635,   635,
   635,   635,   635,   635,   635,   635,   635,     0,     0,   635,
   635,   635,   281,     0,   635,   281,     0,   635,   281,   281,
   635,   281,   635,   281,   635,   281,   635,   281,   635,   635,
   635,   635,   635,   635,   635,   281,   635,   635,   635,     0,
   281,   281,   281,   281,   281,   281,     0,     0,   319,   281,
     0,   281,   281,   111,   281,   281,   281,   281,   319,   281,
   281,   281,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   319,     0,     0,
     0,   319,     0,     0,     0,   508,     0,     0,     0,     0,
     0,     0,   508,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   319,
     0,     0,     0,   809,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   390,   391,   392,   393,   394,   395,
   396,   397,   398,   399,   400,     0,   401,   402,   507,     0,
   403,   404,     0,     0,     0,     0,     0,     0,   507,     0,
     0,   101,     0,     0,     0,   405,     0,   406,     0,   407,
   408,   409,   410,   411,   412,   413,     0,   414,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    91,     0,     0,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   507,     0,   110,
     0,   507,   101,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   507,
     0,     0,   517,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     0,     0,     0,     0,     0,   281,   281,   281,     0,   281,
   319,   319,   319,   281,   281,   319,   319,   319,   281,   319,
   281,   281,   281,   281,   281,   281,   281,     0,     0,   319,
   319,   281,   281,   281,   281,   281,   281,   281,   319,   319,
   281,   319,   319,   319,   319,   319,     0,   281,   114,     0,
   281,   281,   281,     0,   281,   281,   281,   281,   281,   281,
   281,   281,   281,   281,   281,   281,   319,   319,   319,   319,
   319,   319,   319,   319,   319,   319,   319,   319,   319,   319,
   511,     0,   319,   319,   319,   281,     0,   319,   281,     0,
   319,   281,   281,   319,   281,   319,   281,   319,   281,   319,
   281,   319,   319,   319,   319,   319,   319,   319,   281,   319,
     0,   319,   415,   281,   281,   281,   281,   281,   281,     0,
     0,     0,   281,     0,   281,   281,     0,   281,   281,   281,
   281,     0,   281,   281,   281,   610,   610,   610,     0,   610,
   507,   507,   507,   610,   610,     0,   507,   507,   610,   507,
   610,   610,   610,   610,   610,   610,   610,     0,   610,     0,
   101,   610,   610,   610,   610,   610,   610,   610,   507,   507,
   610,   507,   507,   507,   507,   507,     0,   610,     0,     0,
   610,   610,   610,     0,   610,   610,   610,   610,   610,   610,
   610,   610,   610,   610,   610,   610,   507,   507,   507,   507,
   507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
   517,     0,   507,   507,   507,   610,   519,   517,   610,   610,
   507,   610,   610,   101,   610,     0,   610,   507,   610,   507,
   610,   507,   507,   507,   507,   507,   507,   507,   610,   507,
   610,   507,     0,   610,   610,   610,   610,   610,   610,     0,
     0,   510,   610,     0,   610,   610,   114,   610,   610,   610,
   610,   510,   610,   610,   610,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    94,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   510,     0,   113,     0,   510,     0,     0,     0,   511,     0,
     0,     0,     0,     0,     0,   511,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   510,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   399,   400,     0,   401,
   402,   613,     0,   403,   404,     0,     0,     0,     0,     0,
     0,   613,     0,     0,   100,     0,     0,     0,   405,     0,
   406,     0,   407,   408,   409,   410,   411,   412,   413,     0,
   414,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   104,     0,     0,   100,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   613,     0,   123,     0,   613,   100,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   613,     0,     0,   516,     0,     0,     0,   313,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   611,   611,
   611,     0,   611,   510,   510,   510,   611,   611,     0,   510,
   510,   611,   510,   611,   611,   611,   611,   611,   611,   611,
     0,   611,   415,     0,   611,   611,   611,   611,   611,   611,
   611,   510,   510,   611,   510,   510,   510,   510,   510,     0,
   611,     0,     0,   611,   611,   611,     0,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   510,
   510,   510,   510,   510,   510,   510,   510,   510,   510,   510,
   510,   510,   510,     0,     0,   510,   510,   510,   611,   522,
     0,   611,   611,   510,   611,   611,     0,   611,     0,   611,
   510,   611,   510,   611,   510,   510,   510,   510,   510,   510,
   510,   611,   510,   611,   510,     0,   611,   611,   611,   611,
   611,   611,     0,     0,     0,   611,     0,   611,   611,     0,
   611,   611,   611,   611,     0,   611,   611,   611,   613,   613,
   613,     0,   613,   613,   613,   613,   613,   613,     0,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     0,   613,     0,   100,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,     0,
   613,     0,     0,   613,   613,   613,     0,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   516,     0,   613,   613,   613,   613,     0,
   516,   613,   613,   613,   613,   613,   100,   613,     0,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   613,     0,   613,   613,   613,   613,
   613,   613,     0,     0,   614,   613,     0,   613,   613,     0,
   613,   613,   613,   613,   614,   613,   613,   613,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   399,   400,   106,   401,
   402,     0,     0,   403,   404,     0,     0,     0,     0,     0,
     0,     0,     0,   614,     0,   125,     0,   614,   405,     0,
   406,     0,   407,   408,   409,   410,   411,   412,   413,     0,
   414,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   614,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,   617,    11,     0,    12,    13,    14,
   109,   110,    17,    18,   617,     0,     0,   102,   111,   112,
   113,   114,   115,   116,   117,     0,     0,   118,     0,     0,
     0,     0,     0,     0,   119,     0,     0,   120,   121,   122,
     0,    34,   123,    36,   124,   125,   126,   127,   105,    41,
     0,   102,   128,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   617,     0,   124,     0,   617,   102,   129,
     0,     0,   130,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   617,     0,     0,   518,     0,
    53,    54,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,     0,     0,     0,     0,   128,     0,     0,     0,     0,
     0,   614,   614,   614,     0,   614,   614,   614,   614,   614,
   614,     0,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,     0,   614,     0,     0,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,     0,   614,   128,     0,   614,   614,   614,     0,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   304,     0,   614,   614,
   614,   614,     0,     0,   614,   614,   614,   614,   614,     0,
   614,     0,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,     0,   614,
   614,   614,   614,   614,   614,     0,   313,     0,   614,     0,
   614,   614,     0,   614,   614,   614,   614,     0,   614,   614,
   614,   613,   613,   613,     0,   613,   617,   617,   617,   613,
   613,     0,   617,   617,   613,   617,   613,   613,   613,   613,
   613,   613,   613,     0,   617,     0,   102,   613,   613,   613,
   613,   613,   613,   613,   617,   617,   613,   617,   617,   617,
   617,   617,     0,   613,     0,     0,   613,   613,   613,     0,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   518,     0,   617,   617,
   617,   613,     0,   518,   613,   613,   617,   613,   613,   102,
   613,     0,   613,   617,   613,   617,   613,   617,   617,   617,
   617,   617,   617,   617,   613,   617,   617,   617,     0,   613,
   613,   613,   613,   613,   613,     0,     0,   312,   613,     0,
   613,   613,   128,   613,   613,   613,   613,   312,   613,   613,
   613,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   312,     0,   126,     0,
   312,     0,     0,     0,   304,     0,     0,     0,     0,     0,
     0,   304,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   312,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,   635,    12,    13,
    14,    15,    16,    17,    18,     0,     0,   635,     0,    19,
    20,    21,   244,   245,   246,   247,     0,     0,   118,     0,
     0,     0,     0,     0,     0,    28,     0,     0,   248,   249,
   250,     0,    34,   251,    36,   252,   253,   254,   255,   290,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   635,     0,     0,     0,
     0,     0,     0,   256,     0,     0,   131,     0,     0,    47,
    48,     0,    49,     0,   291,     0,   292,     0,    51,     0,
     0,     0,     0,     0,     0,     0,   293,     0,     0,     0,
     0,    53,   294,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,   295,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   614,   614,   614,     0,   614,   312,
   312,   312,   614,   614,     0,   312,   312,   614,   312,   614,
   614,   614,   614,   614,   614,   614,   313,     0,     0,     0,
   614,   614,   614,   614,   614,   614,   614,   312,   312,   614,
   312,   312,   312,   312,   312,     0,   614,     0,     0,   614,
   614,   614,     0,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   312,   312,   312,   312,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   312,     0,
     0,   312,   312,   312,   614,     0,     0,   614,   614,   312,
   614,   614,     0,   614,     0,   614,   312,   614,   312,   614,
   312,   312,   312,   312,   312,   312,   312,   614,   312,     0,
   312,     0,   614,   614,   614,   614,   614,   614,     0,     0,
     0,   614,     0,   614,   614,     0,   614,   614,   614,   614,
     0,   614,   614,   614,   281,   281,   281,     0,   281,   635,
   635,   635,   281,   281,   635,   635,   635,   281,   635,   281,
   281,   281,   281,   281,   281,   281,     0,   635,   635,     0,
   281,   281,   281,   281,   281,   281,   281,   635,   635,   281,
   635,   635,   635,   635,   635,     0,   281,     0,     0,   281,
   281,   281,     0,   281,   281,   281,   281,   281,   281,   281,
   281,   281,   281,   281,   281,     0,     0,     0,     0,   129,
     0,     0,     0,     0,     0,     0,   635,     0,     0,     0,
     0,     0,     0,   635,   281,     0,     0,   281,     0,   635,
   281,   281,     0,   281,     0,   281,     0,   281,     0,   281,
     0,     0,     0,     0,     0,     0,     0,   281,     0,   635,
   635,     0,   281,   281,   281,   281,   281,   281,   129,     0,
     0,   281,     0,   281,   281,     0,   281,   281,   281,   281,
     0,   281,   281,   281,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     4,     5,     6,     0,     8,     0,     0,
   507,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,   244,   245,   246,   247,     0,     0,    26,     0,
     0,     0,     0,     0,     0,    28,     0,     0,   248,   249,
   250,    93,    34,   251,    36,   252,   253,   254,   255,   130,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   256,     0,    93,   131,     0,     0,    47,
    48,     0,    49,     0,     0,     0,     0,     0,    51,     0,
     0,     0,    93,     0,     0,     0,    52,     0,   130,     0,
     0,    53,    54,    55,    56,    57,    58,   127,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,   509,     0,     0,     0,     0,     0,     0,     0,
   510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   127,     0,     0,     0,
     0,     0,     0,     0,     0,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,     0,     0,   129,   129,
     0,   129,   129,   129,   129,   129,   129,   129,   313,   610,
     0,   129,   129,   129,   129,   129,   129,   129,   129,     0,
     0,   129,     0,     0,     0,     0,     0,   129,   129,     0,
   129,   129,   129,   129,     0,   129,   129,   129,   129,   129,
   129,   129,     0,   129,   129,   129,   129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   507,     0,
   129,     0,     0,     0,     0,   507,   129,     0,     0,   129,
   610,     0,   129,   129,     0,   129,     0,   129,     0,     0,
     0,   129,     0,     0,     0,     0,   129,     0,     0,   129,
     0,   610,   617,     0,   129,   129,   129,   129,   129,   129,
     0,     0,     0,   129,     0,   129,   129,     0,   129,   129,
   129,   129,     0,   129,   129,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,     0,     0,   130,   130,
    93,   130,   130,   130,   130,   130,   130,   130,     0,   611,
     0,   130,   130,   130,   130,   130,   130,   130,   130,     0,
     0,   130,     0,     0,     0,     0,     0,   130,   130,     0,
   130,   130,   130,   130,     0,   130,   130,   130,   130,   130,
   130,   130,     0,   130,   130,   130,   130,     0,     0,     0,
   509,     0,     0,     0,   127,     0,     0,   509,   510,     0,
   130,     0,     0,    93,     0,   510,   130,     0,     0,   130,
   611,     0,   130,   130,     0,   130,     0,   130,     0,     0,
     0,   130,     0,     0,     0,     0,   130,     0,     0,   130,
     0,   611,   312,     0,   130,   130,   130,   130,   130,   130,
     0,     0,     0,   130,     0,   130,   130,     0,   130,   130,
   130,   130,     0,   130,   130,     0,   313,     0,     0,     0,
     0,     0,     0,   313,     0,     0,     0,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,     0,     0,
   129,   129,     0,   129,   129,   129,   129,   129,   129,   129,
     0,   617,     0,   130,   129,   129,   129,   129,   129,   129,
   129,     0,     0,   129,     0,     0,     0,     0,     0,   129,
   129,     0,   129,   129,   129,   129,     0,   129,   129,   129,
   129,   129,   129,   129,     0,   129,   129,   129,   129,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   617,     0,   130,     0,     0,     0,     0,   617,   129,     0,
     0,   129,   613,     0,   129,   129,     0,   129,     0,   129,
     0,     0,     0,   129,     0,     0,     0,     0,   129,     0,
     0,   129,     0,   617,   313,     0,   129,   129,   129,   129,
   129,   129,     0,     0,     0,   129,     0,   129,   129,     0,
   129,   129,   129,   129,     0,   129,   129,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,     0,     0,
   130,   130,     0,   130,   130,   130,   130,   130,   130,   130,
     0,     0,     0,   358,   130,   130,   130,   130,   130,   130,
   130,     0,     0,   130,     0,     0,     0,     0,     0,   130,
   130,     0,   130,   130,   130,   130,     0,   130,   130,   130,
   130,   130,   130,   130,     0,   130,   130,   130,   130,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   312,     0,   358,     0,     0,     0,     0,   312,   130,     0,
     0,   130,   614,     0,   130,   130,     0,   130,     0,   130,
     0,     0,     0,   130,     0,     0,     0,     0,   130,     0,
     0,   130,     0,     0,     0,     0,   130,   130,   130,   130,
   130,   130,     0,     0,     0,   130,     0,   130,   130,     0,
   130,   130,   130,   130,     0,   130,   130,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
     0,     0,   130,   130,   635,   130,   130,   130,   130,   130,
   130,   130,     0,     0,     0,     0,   130,   130,   130,   130,
   130,   130,   130,     0,     0,   130,     0,     0,     0,     0,
     0,   130,   130,     0,   130,   130,   130,   130,     0,   130,
   130,   130,   130,   130,   130,   130,     0,   130,   130,   130,
   130,     0,     0,   635,     0,     0,     0,     0,     0,     0,
     0,     0,   313,     0,     0,     0,     0,     0,     0,   313,
   130,     0,     0,   130,     0,     0,   130,   130,     0,   130,
     0,   130,     0,     0,     0,   130,     0,     0,     0,     0,
   130,     0,     0,   130,     0,     0,     0,     0,   130,   130,
   130,   130,   130,   130,     0,     0,     0,   130,     0,   130,
   130,     0,   130,   130,   130,   130,     0,   130,   130,   358,
   358,   358,   358,   358,   358,   358,   358,   358,   358,   358,
     0,   358,   358,   358,   358,   358,   358,   358,   358,   358,
   358,   358,   635,     0,     0,     0,   358,   358,   358,   358,
   358,   358,   358,     0,     0,   358,     0,     0,     0,     0,
     0,   358,   358,     0,   358,   358,   358,   358,     0,   358,
   358,   358,   358,   358,   358,   358,     0,   358,   358,   358,
   358,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   635,     0,     0,     0,     0,     0,     0,     0,     0,
   358,     0,     0,   358,     0,     0,   358,   358,     0,   358,
     0,   358,     0,     0,     0,   358,     0,     0,     0,     0,
     0,     0,     0,   358,     0,     0,     0,     0,   358,   358,
   358,   358,   358,   358,     0,     0,     0,   358,     0,   358,
   358,     0,   358,   358,   358,   358,     0,   358,   358,     0,
   635,   635,   635,   635,   635,   635,     0,     0,   635,   635,
   635,     0,     0,     0,   635,     0,   635,   635,   635,   635,
   635,   635,   635,   265,     0,     0,     0,   635,   635,   635,
   635,   635,   635,   635,     0,     0,   635,     0,     0,     0,
     0,     0,   635,   635,     0,   635,   635,   635,   635,     0,
   635,   635,   635,   635,   635,   635,   635,     0,   635,   635,
   635,   635,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   264,     0,     0,     0,     0,     0,     0,     0,
     0,   635,    92,     0,   635,     0,     0,   635,   635,     0,
   635,     0,   635,     0,     0,     0,   635,     0,     0,     0,
     0,     0,     0,     0,   635,     0,     0,     0,     0,   635,
   635,   635,   635,   635,   635,     0,    92,     0,   635,     0,
   635,   635,     0,   635,   635,   635,   635,     0,   635,   635,
     0,     0,     0,    92,     0,     0,     0,     0,   635,   635,
   635,   635,   635,   635,     0,     0,     0,   635,   635,     0,
     0,     0,   635,     0,   635,   635,   635,   635,   635,   635,
   635,     0,     0,   508,     0,   635,   635,   635,   635,   635,
   635,   635,     0,     0,   635,     0,     0,   434,     0,     0,
   635,   635,     0,   635,   635,   635,   635,   434,   635,   635,
   635,   635,   635,   635,   635,    95,   635,   635,   635,   635,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   635,
     0,   434,   635,     0,     0,   635,   635,     0,   635,    95,
   635,     0,     0,     0,   635,   434,   434,     0,   122,     0,
   434,     0,   635,     0,     0,   635,    95,   635,   635,   635,
   635,   635,   635,     0,     0,     0,   635,     0,   635,   635,
     0,   635,   635,   635,   635,     0,   635,   635,   434,     0,
     4,     5,     6,     0,     8,     0,   511,     0,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,     0,    19,    20,    21,   244,
   245,   246,   247,     0,     0,    26,     0,     0,   433,     0,
     0,     0,    28,     0,     0,   248,   249,   250,   433,    34,
   251,    36,   252,   253,   254,   255,   109,    41,    42,    43,
    44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   256,    92,   433,   131,     0,     0,    47,    48,     0,    49,
   109,     0,     0,     0,     0,    51,   433,   433,     0,     0,
     0,   433,   108,    52,     0,     0,     0,   109,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,   433,
     0,   508,     0,     0,     0,     0,   108,   304,   508,     0,
     0,     0,     0,     0,    92,     0,     0,     0,   513,     0,
     0,     0,     0,   108,     0,     0,     0,     0,   513,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
   434,   434,     0,     0,   434,   434,   434,     0,   434,     0,
     0,     0,     0,   313,     0,     0,     0,   434,   434,   434,
     0,     0,   513,     0,    95,     0,     0,   434,   434,     0,
   434,   434,   434,   434,   434,     0,   513,   513,     0,   116,
     0,   513,   434,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   434,   434,   434,   434,   434,
   434,   434,   434,   434,   434,   434,   434,   434,   434,   513,
     0,   434,   434,   434,   511,     0,   434,     0,     0,   434,
     0,   511,   434,     0,   434,     0,   434,    95,   434,     0,
   434,   434,   434,   434,   434,   434,   434,     0,   434,   434,
   434,     0,     0,     0,     0,     0,     0,     0,     0,   512,
     0,     0,   434,     0,     0,     0,     0,     0,     0,   512,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   433,   433,   433,     0,     0,   433,   433,   433,     0,   433,
     0,     0,     0,     0,     0,     0,     0,     0,   433,   433,
   433,     0,     0,   512,     0,   109,     0,     0,   433,   433,
     0,   433,   433,   433,   433,   433,     0,   512,   512,     0,
   115,     0,   512,   433,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   433,   433,   433,   433,
   433,   433,   433,   433,   433,   433,   433,   433,   433,   433,
   512,   108,   433,   433,   433,   304,     0,   433,     0,     0,
   433,     0,   304,   433,     0,   433,     0,   433,   109,   433,
     0,   433,   433,   433,   433,   433,   433,   433,     0,   433,
   433,   433,     0,     0,   292,     0,     0,     0,     0,     0,
   513,   513,   513,   433,   292,   513,   513,   513,     0,   513,
     0,   313,     0,     0,     0,     0,     0,     0,   313,   513,
   513,     0,     0,     0,   108,     0,     0,     0,   513,   513,
     0,   513,   513,   513,   513,   513,     0,     0,   288,     0,
     0,     0,     0,   513,   514,     0,     0,     0,     0,     0,
     0,     0,     0,   292,   514,     0,   513,   513,   513,   513,
   513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
     0,     0,   513,   513,   513,     0,   525,   513,     0,     0,
   513,     0,     0,   513,     0,   513,     0,   513,   514,   513,
     0,   513,   513,   513,   513,   513,   513,   513,     0,   513,
     0,   513,   514,   514,     0,   117,     0,   514,     0,     0,
     0,     0,     0,   513,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   512,   512,   512,     0,   514,   512,   512,   512,     0,
   512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   512,   512,     0,     0,     0,     0,     0,     0,     0,   512,
   512,     0,   512,   512,   512,   512,   512,     0,     0,     0,
     0,     0,     0,     0,   512,   515,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   515,     0,   512,   512,   512,
   512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
   512,     0,     0,   512,   512,   512,     0,   524,   512,     0,
     0,   512,     0,     0,   512,     0,   512,     0,   512,   515,
   512,     0,   512,   512,   512,   512,   512,   512,   512,     0,
   512,     0,   512,   515,   515,     0,   118,     0,   515,     0,
     0,     0,     0,     0,   512,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   292,   292,   292,     0,
     0,   292,   292,   292,     0,   292,   515,     0,     0,     0,
     0,     0,     0,   881,     0,     0,   881,     0,     0,     0,
     0,     0,   891,     0,     0,   517,     0,   292,   292,   292,
   292,   292,     0,     0,     0,   517,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   514,   514,   514,     0,
     0,   514,   514,   514,     0,   514,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   514,   514,     0,     0,   517,
     0,     0,     0,   292,   514,   514,   292,   514,   514,   514,
   514,   514,     0,   517,   517,     0,   120,     0,   517,   514,
     0,     0,     0,     0,     0,     0,     0,   292,     0,     0,
     0,     0,   514,   514,   514,   514,   514,   514,   514,   514,
   514,   514,   514,   514,   514,   514,   517,     0,   514,   514,
   514,     0,   526,   514,     0,     0,   514,     0,     0,   514,
     0,   514,     0,   514,     0,   514,     0,   514,   514,   514,
   514,   514,   514,   514,     0,   514,     0,   514,     0,     0,
     0,     0,     0,     0,     0,     0,   516,     0,     0,   514,
     0,     0,     0,     0,     0,     0,   516,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   515,   515,   515,
     0,     0,   515,   515,   515,     0,   515,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   515,   515,     0,     0,
   516,     0,     0,     0,     0,   515,   515,     0,   515,   515,
   515,   515,   515,     0,   516,   516,     0,   119,   891,   516,
   515,   891,     0,   881,     0,   891,     0,     0,     0,     0,
     0,     0,     0,   515,   515,   515,   515,   515,   515,   515,
   515,   515,   515,   515,   515,   515,   515,   516,     0,   515,
   515,   515,     0,   527,   515,     0,     0,   515,     0,     0,
   515,     0,   515,     0,   515,     0,   515,     0,   515,   515,
   515,   515,   515,   515,   515,     0,   515,   105,   515,     0,
     0,   293,     0,     0,     0,     0,     0,   517,   517,   517,
   515,   293,   517,   517,   517,     0,   517,     0,     0,     0,
     0,   891,     0,   891,     0,   891,   517,   517,   891,     0,
     0,   105,     0,     0,     0,   517,   517,     0,   517,   517,
   517,   517,   517,     0,     0,   289,   891,     0,   105,     0,
   517,   518,     0,     0,     0,     0,     0,     0,     0,     0,
   293,   518,     0,   517,   517,   517,   517,   517,   517,   517,
   517,   517,   517,   517,   517,   517,   517,     0,   617,   517,
   517,   517,     0,   529,   517,     0,     0,   517,     0,     0,
   517,     0,   517,     0,   517,   518,   517,     0,   517,   517,
   517,   517,   517,   517,   517,     0,   517,     0,   517,   518,
   518,     0,   121,     0,   518,     0,     0,     0,     0,     0,
   517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   516,   516,
   516,     0,   518,   516,   516,   516,     0,   516,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   516,   516,     0,
     0,     0,     0,     0,     0,     0,   516,   516,     0,   516,
   516,   516,   516,   516,     0,     0,     0,     0,     0,     0,
     0,   516,   509,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   509,     0,   516,   516,   516,   516,   516,   516,
   516,   516,   516,   516,   516,   516,   516,   516,     0,     0,
   516,   516,   516,     0,   528,   516,     0,     0,   516,     0,
     0,   516,     0,   516,     0,   516,   509,   516,     0,   516,
   516,   516,   516,   516,   516,   516,     0,   516,     0,   516,
   509,   509,     0,   112,     0,   509,     0,     0,     0,     0,
     0,   516,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   293,   293,   293,   105,   617,   293,   293,
   293,     0,   293,   509,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   508,     0,   293,   293,   293,   293,   293,     0,
     0,     0,   508,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   518,   518,   518,   617,     0,   518,   518,
   518,     0,   518,   617,     0,     0,     0,     0,   613,   105,
     0,     0,   518,   518,     0,     0,   508,     0,     0,     0,
   293,   518,   518,   293,   518,   518,   518,   518,   518,   617,
   508,   508,     0,   111,     0,   508,   518,     0,     0,     0,
     0,     0,     0,     0,   293,     0,     0,     0,     0,   518,
   518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
   518,   518,   518,   508,     0,   518,   518,   518,     0,   530,
   518,     0,     0,   518,     0,     0,   518,     0,   518,     0,
   518,     0,   518,     0,   518,   518,   518,   518,   518,   518,
   518,     0,   518,     0,   518,     0,     0,     0,     0,     0,
     0,     0,     0,   511,     0,     0,   518,     0,     0,     0,
     0,     0,     0,   511,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   509,   509,   509,     0,     0,   509,
   509,   509,     0,   509,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   509,   509,     0,     0,   511,     0,     0,
     0,     0,   509,   509,     0,   509,   509,   509,   509,   509,
     0,   511,   511,     0,   114,     0,   511,   509,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   509,   509,   509,   509,   509,   509,   509,   509,   509,   509,
   509,   509,   509,   509,   511,     0,   509,   509,   509,     0,
   521,   509,     0,     0,   509,     0,     0,   509,     0,   509,
     0,   509,     0,   509,     0,   509,   509,   509,   509,   509,
   509,   509,     0,   509,     0,   509,     0,     0,    52,     0,
     0,     0,     0,     0,   508,   508,   508,   509,    52,   508,
   508,   508,     0,   508,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   508,   508,     0,     0,     0,     0,     0,
     0,     0,   508,   508,     0,   508,   508,   508,   508,   508,
     0,     0,     0,     0,     0,     0,     0,   508,   635,     0,
     0,     0,     0,     0,     0,     0,     0,    52,   635,     0,
   508,   508,   508,   508,   508,   508,   508,   508,   508,   508,
   508,   508,   508,   508,     0,     0,   508,   508,   508,     0,
   520,   508,     0,     0,   508,     0,     0,   508,     0,   508,
     0,   508,   635,   508,     0,   508,   508,   508,   508,   508,
   508,   508,     0,   508,     0,   508,   635,   635,     0,     0,
     0,   635,     0,     0,     0,     0,     0,   508,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   511,   511,   511,     0,   635,
   511,   511,   511,     0,   511,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   511,   511,     0,     0,     0,     0,
     0,     0,     0,   511,   511,     0,   511,   511,   511,   511,
   511,     0,     0,     0,     0,     0,     0,     0,   511,   304,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   304,
     0,   511,   511,   511,   511,   511,   511,   511,   511,   511,
   511,   511,   511,   511,   511,     0,     0,   511,   511,   511,
     0,   523,   511,     0,     0,   511,     0,     0,   511,     0,
   511,     0,   511,   304,   511,     0,   511,   511,   511,   511,
   511,   511,   511,     0,   511,     0,   511,   304,   304,     0,
   128,     0,   304,     0,     0,     0,     0,     0,   511,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,    52,    52,     0,     0,    52,    52,    52,     0,    52,
   304,     0,     0,     0,     0,     0,     0,     0,     0,    52,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
     0,    52,    52,    52,    52,    52,     0,     0,     0,   313,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   635,   635,   635,     0,     0,   635,   635,   635,     0,   635,
     0,     0,     0,     0,     0,     0,     0,     0,   635,   635,
   635,     0,     0,   313,     0,     0,     0,     0,   635,   635,
    52,   635,   635,   635,   635,   635,     0,   313,   313,     0,
   127,     0,   313,   635,     0,     0,     0,     0,     0,     0,
     0,    52,     0,     0,     0,     0,   635,   635,   635,   635,
   635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
   313,     0,   635,   635,   635,     0,     0,   635,     0,     0,
   635,     0,     0,   635,     0,   635,     0,   635,     0,   635,
     0,   635,   635,   635,   635,   635,   635,   635,     0,   635,
   635,   635,     0,     0,     0,     0,     0,     0,     0,     0,
   454,     0,     0,   635,     0,     0,     0,     0,     0,     0,
   454,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,   304,   304,     0,     0,   304,   304,   304,     0,
   304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,   304,     0,     0,   454,     0,     0,     0,     0,   304,
   304,     0,   304,   304,   304,   304,   304,     0,   454,   454,
     0,     0,     0,   454,   304,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   454,     0,   304,   304,   304,     0,     0,   304,     0,
     0,   304,     0,     0,   304,     0,   304,     0,   304,     0,
   304,     0,   304,   304,   304,   304,   304,   304,   304,     0,
   304,     0,   304,     0,     0,   291,     0,     0,     0,     0,
     0,   313,   313,   313,   304,   291,   313,   313,   313,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   313,   313,     0,     0,     0,     0,     0,     0,     0,   313,
   313,     0,   313,   313,   313,   313,   313,     0,     0,   286,
     0,     0,     0,     0,   313,   324,     0,     0,     0,     0,
     0,     0,     0,     0,   291,   324,     0,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,     0,     0,   313,   313,   313,     0,     0,   313,     0,
     0,   313,     0,     0,   313,     0,   313,     0,   313,   324,
   313,     0,   313,   313,   313,   313,   313,   313,   313,     0,
   313,     0,   313,   324,   324,     0,     0,     0,   324,     0,
     0,     0,     0,     0,   313,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   454,   454,   454,     0,   324,   454,   454,   454,
     0,   454,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   454,   454,     0,     0,     0,     0,     0,     0,     0,
   454,   454,     0,   454,   454,   454,   454,   454,     0,     0,
     0,     0,     0,     0,     0,   454,   262,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   262,     0,   454,   454,
   454,   454,   454,   454,   454,   454,   454,   454,   454,   454,
   454,   454,     0,     0,   454,   454,   454,     0,     0,   454,
     0,     0,   454,     0,     0,   454,     0,   454,     0,   454,
   262,   454,     0,   454,   454,   454,   454,   454,   454,   454,
     0,   454,     0,   454,   262,   262,     0,     0,     0,   262,
     0,     0,     0,     0,     0,   454,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   291,   291,   291,
     0,     0,     0,   291,   291,     0,   291,   357,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   319,     0,   291,   291,
   291,   291,   291,     0,     0,     0,   319,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   324,   324,   324,
     0,     0,   324,   324,   324,     0,   324,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   324,   324,     0,     0,
   319,     0,     0,     0,     0,   324,   324,   291,   324,   324,
   324,   324,   324,     0,   319,   319,     0,     0,     0,   319,
   324,     0,     0,     0,     0,     0,     0,     0,   291,     0,
     0,     0,     0,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   324,   324,   324,   324,   319,     0,   324,
   324,   324,     0,     0,   324,     0,     0,   324,     0,     0,
   324,     0,   324,     0,   324,     0,   324,     0,   324,   324,
   324,   324,   324,   324,   324,     0,   324,     0,   324,     0,
     0,     0,     0,     0,     0,     0,     0,   502,     0,     0,
   324,     0,     0,     0,     0,     0,     0,   502,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   262,   262,
   262,     0,     0,   262,   262,   262,     0,   262,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   262,   262,     0,
     0,   502,     0,     0,     0,     0,   262,   262,     0,   262,
   262,   262,   262,   262,     0,   502,   502,     0,     0,     0,
   502,   262,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   262,   357,   262,   262,   502,     0,
   262,   262,   357,     0,     0,   262,     0,     0,   262,     0,
     0,   262,     0,   262,     0,   262,   240,   262,     0,   262,
   262,   262,   262,   262,   262,   262,   240,   262,     0,   262,
     0,     0,     0,     0,     0,     0,     0,     0,   319,   319,
   319,   262,     0,   319,   319,   319,     0,   319,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   319,   319,     0,
   240,     0,     0,     0,     0,     0,   319,   319,     0,   319,
   319,   319,   319,   319,   240,   240,     0,     0,     0,   240,
     0,   319,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   319,   319,   319,   319,   319,   319,
   319,   319,   319,   319,   319,   319,   319,   319,     0,     0,
   319,   319,   319,     0,     0,   319,     0,     0,   319,     0,
     0,   319,     0,   319,     0,   319,     0,   319,     0,   319,
   319,   319,   319,   319,   319,   319,   237,   319,     0,   319,
     0,     0,     0,     0,     0,     0,   237,     0,     0,     0,
     0,   319,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   502,
   502,   502,     0,     0,   502,   502,   502,     0,   502,     0,
   237,     0,     0,     0,     0,     0,     0,     0,   502,   502,
     0,     0,     0,     0,   237,   237,     0,   502,   502,   237,
   502,   502,   502,   502,   502,     0,     0,     0,     0,     0,
     0,     0,   502,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   502,   502,   502,   502,
   502,   502,   502,   502,   502,   502,   502,   502,   502,     0,
     0,   502,   502,   502,     0,   234,   502,     0,     0,   502,
     0,     0,   502,     0,   502,   234,   502,     0,   502,     0,
   502,   502,   502,   502,   502,   502,   502,     0,   502,     0,
   502,     0,     0,     0,     0,     0,     0,     0,   240,   240,
   240,     0,   502,   240,   240,   240,     0,   240,     0,   234,
     0,     0,     0,     0,     0,     0,     0,   240,   240,     0,
     0,     0,     0,   234,   234,     0,   240,   240,   234,   240,
   240,   240,   240,   240,     0,     0,     0,     0,     0,     0,
     0,   240,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,     0,   240,   240,     0,     0,
   240,   240,     0,     0,     0,   240,     0,     0,   240,     0,
     0,   240,     0,   240,     0,   240,     0,   240,     0,   240,
   240,   240,   240,   240,   240,   240,   236,   240,     0,   240,
     0,     0,     0,     0,     0,     0,   236,     0,     0,     0,
     0,   240,     0,     0,     0,     0,     0,     0,   237,   237,
   237,     0,     0,   237,   237,   237,     0,   237,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   237,   237,     0,
   236,     0,     0,     0,     0,     0,   237,   237,     0,   237,
   237,   237,   237,   237,   236,   236,     0,     0,     0,   236,
     0,   237,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,     0,   237,   237,     0,     0,
   237,   237,     0,     0,     0,   237,     0,     0,   237,     0,
     0,   237,     0,   237,     0,   237,   235,   237,     0,   237,
   237,   237,   237,   237,   237,   237,   235,   237,     0,   237,
     0,     0,     0,     0,     0,     0,     0,   234,   234,   234,
     0,   237,   234,   234,   234,     0,   234,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   234,   234,     0,     0,
   235,     0,     0,     0,     0,   234,   234,     0,   234,   234,
   234,   234,   234,     0,   235,   235,     0,     0,     0,   235,
   234,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   234,   234,   234,   234,   234,   234,
   234,   234,   234,   234,     0,   234,   234,     0,     0,   234,
   234,     0,     0,     0,   234,     0,     0,   234,     0,     0,
   234,     0,   234,     0,   234,     0,   234,     0,   234,   234,
   234,   234,   234,   234,   234,   238,   234,     0,   234,     0,
     0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
   234,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   236,   236,
   236,     0,     0,   236,   236,   236,     0,   236,     0,   238,
     0,     0,     0,     0,     0,     0,     0,   236,   236,     0,
     0,     0,     0,   238,   238,     0,   236,   236,   238,   236,
   236,   236,   236,   236,     0,     0,     0,     0,     0,     0,
     0,   236,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,     0,   236,   236,     0,     0,
   236,   236,     0,     0,     0,   236,     0,     0,   236,     0,
     0,   236,     0,   236,     0,   236,   232,   236,     0,   236,
   236,   236,   236,   236,   236,   236,   232,   236,     0,   236,
     0,     0,     0,     0,     0,     0,     0,     0,   235,   235,
   235,   236,     0,   235,   235,   235,     0,   235,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   235,   235,     0,
   232,     0,     0,     0,     0,     0,   235,   235,     0,   235,
   235,   235,   235,   235,   232,   232,     0,     0,     0,   232,
     0,   235,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   235,   235,   235,   235,   235,
   235,   235,   235,   235,   235,     0,   235,   235,     0,     0,
   235,   235,     0,     0,     0,   235,     0,     0,   235,     0,
     0,   235,     0,   235,     0,   235,     0,   235,     0,   235,
   235,   235,   235,   235,   235,   235,   233,   235,     0,   235,
     0,     0,     0,     0,     0,     0,   233,     0,     0,     0,
     0,   235,     0,     0,     0,     0,     0,   238,   238,   238,
     0,     0,   238,   238,   238,     0,   238,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   238,   238,     0,     0,
   233,     0,     0,     0,     0,   238,   238,     0,   238,   238,
   238,   238,   238,     0,   233,   233,     0,     0,     0,   233,
   238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,     0,   238,   238,     0,     0,   238,
   238,     0,     0,     0,   238,     0,     0,   238,     0,     0,
   238,     0,   238,     0,   238,   256,   238,     0,   238,   238,
   238,   238,   238,   238,   238,   256,   238,     0,   238,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   238,     0,     0,     0,     0,     0,     0,     0,   232,   232,
   232,     0,     0,   232,   232,   232,     0,   232,     0,   256,
     0,     0,     0,     0,     0,     0,     0,   232,   232,     0,
     0,     0,     0,   256,   256,     0,   232,   232,   256,   232,
   232,   232,   232,   232,     0,     0,     0,     0,     0,     0,
     0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   232,   232,   232,   232,   232,
   232,   232,   232,   232,   232,     0,   232,   232,     0,     0,
   232,   232,     0,     0,     0,   232,     0,     0,   232,     0,
     0,   232,     0,   232,     0,     0,     0,   232,     0,     0,
     0,   232,   232,   232,   232,   232,   257,   232,     0,   232,
     0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
     0,   232,     0,     0,     0,     0,     0,     0,   233,   233,
   233,     0,     0,   233,   233,   233,     0,   233,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   233,   233,     0,
   257,     0,     0,     0,     0,     0,   233,   233,     0,   233,
   233,   233,   233,   233,   257,   257,     0,     0,     0,   257,
     0,   233,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,     0,   233,   233,     0,     0,
   233,   233,     0,     0,     0,   233,     0,     0,   233,     0,
     0,   233,     0,   233,     0,     0,   243,   233,     0,     0,
     0,   233,   233,   233,   233,   233,   243,   233,     0,   233,
     0,     0,     0,     0,     0,     0,     0,   256,   256,   256,
     0,   233,   256,   256,   256,     0,   256,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   256,   256,     0,     0,
   243,     0,     0,     0,     0,   256,   256,     0,   256,   256,
   256,   256,   256,     0,   243,   243,     0,     0,     0,   243,
   256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   256,     0,   256,   256,     0,     0,   256,
   256,     0,     0,     0,   256,     0,     0,   256,     0,     0,
   256,   241,   256,     0,     0,     0,   256,     0,     0,     0,
     0,   241,   256,   256,   256,     0,   256,     0,   256,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   241,     0,     0,   257,   257,
   257,     0,     0,   257,   257,   257,     0,   257,     0,   241,
   241,     0,     0,     0,   241,     0,     0,   257,   257,     0,
     0,     0,     0,     0,     0,     0,   257,   257,     0,   257,
   257,   257,   257,   257,     0,     0,     0,     0,     0,     0,
     0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   257,     0,   257,   257,     0,     0,
   257,   257,   242,     0,     0,   257,     0,     0,   257,     0,
     0,   257,   242,   257,     0,     0,     0,   257,     0,     0,
     0,     0,     0,   257,   257,   257,     0,   257,     0,   257,
     0,     0,     0,     0,     0,     0,     0,     0,   243,   243,
   243,   257,     0,   243,   243,   243,   242,   243,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   243,   243,     0,
   242,   242,     0,     0,     0,   242,   243,   243,     0,   243,
   243,   243,   243,   243,     0,     0,     0,     0,     0,     0,
     0,   243,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,     0,   243,   243,     0,     0,
     0,     0,     0,     0,     0,   243,     0,     0,   243,     0,
     0,   243,   246,   243,     0,     0,     0,   243,     0,     0,
     0,     0,   246,   243,   243,   243,     0,   243,     0,   243,
     0,     0,     0,   241,   241,   241,     0,     0,   241,   241,
   241,   243,   241,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   241,   241,     0,     0,   246,     0,     0,     0,
     0,   241,   241,     0,   241,   241,   241,   241,   241,     0,
   246,   246,     0,     0,     0,   246,   241,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     0,   241,   241,     0,     0,     0,     0,     0,     0,   248,
   241,     0,     0,   241,     0,     0,   241,     0,   241,   248,
     0,     0,     0,     0,     0,     0,     0,     0,   241,   241,
   241,     0,   241,     0,   241,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   241,     0,     0,     0,
     0,     0,     0,   248,   242,   242,   242,     0,     0,   242,
   242,   242,     0,   242,     0,     0,     0,   248,   248,     0,
     0,     0,   248,   242,   242,     0,     0,     0,     0,     0,
     0,     0,   242,   242,     0,   242,   242,   242,   242,   242,
     0,     0,     0,     0,     0,     0,     0,   242,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,     0,   242,   242,     0,     0,   247,     0,     0,     0,
     0,   242,     0,     0,   242,     0,   247,   242,     0,   242,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   242,
   242,   242,     0,   242,     0,   242,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   242,     0,     0,
   247,     0,     0,     0,   246,   246,   246,     0,     0,   246,
   246,   246,     0,   246,   247,   247,     0,     0,     0,   247,
     0,     0,     0,   246,   246,     0,     0,     0,     0,     0,
     0,     0,   246,   246,   870,   246,   246,   246,   246,   246,
     0,   879,     0,     0,     0,     0,     0,   246,     0,     0,
     0,     0,   886,     0,     0,     0,     0,     0,     0,     0,
     0,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,     0,   246,   246,     0,     0,     0,     0,     0,     0,
   245,   246,     0,     0,   246,     0,     0,   246,     0,   246,
   245,     0,     0,     0,     0,     0,     0,     0,     0,   246,
   246,   248,   248,   248,     0,   246,   248,   248,   248,     0,
   248,     0,     0,     0,     0,     0,     0,   246,     0,     0,
   248,   248,     0,     0,   245,     0,     0,     0,     0,   248,
   248,     0,   248,   248,   248,   248,   248,     0,   245,   245,
     0,     0,     0,   245,   248,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,     0,   248,
   248,     0,     0,     0,     0,     0,     0,   244,   248,     0,
     0,   248,     0,     0,   248,     0,   248,   244,     0,     0,
     0,     0,     0,     0,     0,     0,   248,   248,     0,     0,
     0,     0,   248,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   248,     0,     0,     0,   247,   247,
   247,   244,     0,   247,   247,   247,     0,   247,     0,     0,
     0,     0,     0,     0,     0,   244,   244,   247,   247,  1023,
   244,  1025,     0,  1026,     0,     0,   247,   247,  1028,   247,
   247,   247,   247,   247,     0,  1036,     0,     0,     0,     0,
     0,   247,     0,   249,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   249,     0,   247,   247,   247,   247,   247,
   247,   247,   247,   247,   247,     0,   247,   247,     0,     0,
     0,     0,     0,     0,     0,   247,     0,     0,   247,     0,
     0,   247,     0,   247,     0,     0,     0,   249,     0,     0,
     0,     0,     0,   247,   247,     0,     0,     0,     0,   247,
     0,   249,   249,     0,     0,     0,   249,  1078,     0,     0,
     0,   247,     0,  1079,     0,  1081,     0,     0,  1082,     0,
     0,     0,   245,   245,   245,     0,     0,   245,   245,   245,
     0,   245,     0,     0,   250,     0,  1089,     0,     0,     0,
     0,   245,   245,     0,   250,     0,     0,     0,     0,     0,
   245,   245,     0,   245,   245,   245,   245,   245,     0,     0,
     0,     0,     0,     0,     0,   245,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   250,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,     0,
   245,   245,   250,   250,     0,     0,     0,   250,     0,   245,
     0,     0,   245,     0,     0,   245,     0,   245,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   245,   245,   244,
   244,   244,   251,   245,   244,   244,   244,     0,   244,     0,
     0,     0,   251,     0,     0,   245,     0,     0,   244,   244,
     0,     0,     0,     0,     0,     0,     0,   244,   244,     0,
   244,   244,   244,   244,   244,     0,     0,     0,     0,     0,
     0,     0,   244,     0,     0,     0,   251,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   251,   251,   244,   244,     0,   251,     0,   244,   244,     0,
     0,     0,     0,     0,     0,     0,   244,     0,     0,   244,
     0,     0,   244,     0,   244,   249,   249,   249,   258,     0,
   249,   249,   249,     0,   249,     0,     0,     0,   258,     0,
   244,     0,     0,     0,   249,   249,     0,     0,     0,     0,
     0,     0,   244,   249,   249,     0,   249,   249,   249,   249,
   249,     0,     0,     0,     0,     0,     0,     0,   249,     0,
     0,     0,   258,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   258,   258,   249,   249,
     0,   258,     0,   249,   249,     0,     0,     0,     0,     0,
     0,     0,   249,     0,     0,   249,     0,     0,   249,     0,
   249,     0,     0,     0,   252,     0,   250,   250,   250,     0,
     0,   250,   250,   250,   252,   250,   249,     0,     0,     0,
     0,     0,     0,     0,     0,   250,   250,     0,   249,     0,
     0,     0,     0,     0,   250,   250,     0,   250,   250,   250,
   250,   250,     0,     0,     0,     0,     0,     0,   252,   250,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   252,   252,     0,     0,     0,   252,     0,   250,
   250,     0,     0,     0,   250,   250,     0,     0,     0,     0,
     0,     0,     0,   250,     0,     0,   250,     0,     0,   250,
     0,   250,   253,     0,   251,   251,   251,     0,     0,   251,
   251,   251,   253,   251,     0,     0,     0,   250,     0,     0,
     0,     0,     0,   251,   251,     0,     0,     0,     0,   250,
     0,     0,   251,   251,     0,   251,   251,   251,   251,   251,
     0,     0,     0,     0,     0,     0,   253,   251,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   253,   253,     0,     0,     0,   253,     0,   251,   251,     0,
     0,     0,   251,   251,     0,     0,     0,     0,     0,     0,
     0,   251,     0,     0,   251,     0,     0,   251,   259,   251,
   258,   258,   258,     0,     0,   258,   258,   258,   259,   258,
     0,     0,     0,     0,     0,   251,     0,     0,     0,   258,
   258,     0,     0,     0,     0,     0,     0,   251,   258,   258,
     0,   258,   258,   258,   258,   258,     0,     0,     0,     0,
     0,     0,   259,   258,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   259,   259,     0,     0,
     0,   259,     0,   258,   258,     0,     0,     0,   258,   258,
     0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
   258,     0,     0,   258,   231,   258,   252,   252,   252,     0,
     0,   252,   252,   252,   231,   252,     0,     0,     0,     0,
     0,   258,     0,     0,     0,   252,   252,     0,     0,     0,
     0,     0,     0,   258,   252,   252,     0,   252,   252,   252,
   252,   252,     0,     0,     0,     0,     0,     0,   231,   252,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   231,   231,     0,     0,     0,   231,     0,   252,
   252,     0,     0,     0,   252,   252,     0,     0,     0,     0,
     0,     0,     0,   252,     0,     0,   252,     0,     0,   252,
     0,   252,   260,     0,   253,   253,   253,     0,     0,   253,
   253,   253,   260,   253,     0,     0,     0,   252,     0,     0,
     0,     0,     0,   253,   253,     0,     0,     0,     0,   252,
     0,     0,   253,   253,     0,   253,   253,   253,   253,   253,
     0,     0,     0,     0,     0,     0,   260,   253,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,   260,     0,     0,     0,     0,     0,   253,   253,     0,
     0,     0,   253,   253,     0,     0,     0,     0,     0,     0,
     0,   253,     0,     0,   253,     0,     0,   253,   229,   253,
   259,   259,   259,     0,     0,   259,   259,   259,   229,   259,
     0,     0,     0,     0,     0,   253,     0,     0,     0,   259,
   259,     0,     0,     0,     0,     0,     0,   253,   259,   259,
     0,   259,   259,   259,   259,   259,     0,     0,     0,     0,
     0,     0,   229,   259,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   229,   229,     0,     0,
     0,     0,     0,     0,   259,     0,     0,     0,   259,   259,
     0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
   259,     0,     0,   259,   228,   259,   231,   231,   231,     0,
     0,   231,   231,   231,   228,   231,     0,     0,     0,     0,
     0,   259,     0,     0,     0,   231,   231,     0,     0,     0,
     0,     0,     0,   259,   231,   231,     0,   231,   231,   231,
   231,   231,     0,     0,     0,     0,     0,     0,   228,   231,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   228,   228,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   231,     0,     0,   231,     0,     0,   231,
     0,   231,   224,     0,   260,   260,   260,     0,     0,   260,
   260,   260,   224,   260,     0,     0,     0,   231,     0,     0,
     0,     0,     0,   260,   260,     0,     0,     0,     0,   231,
     0,     0,   260,   260,     0,   260,   260,   260,   260,   260,
     0,     0,     0,     0,     0,     0,   224,   260,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   224,   224,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   260,     0,     0,   260,     0,     0,   260,   225,   260,
   229,   229,   229,     0,     0,   229,   229,   229,   225,   229,
     0,     0,     0,     0,     0,   260,     0,     0,     0,   229,
   229,     0,     0,     0,     0,     0,     0,   260,   229,   229,
     0,   229,   229,   229,   229,   229,     0,     0,     0,     0,
     0,     0,   225,   229,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   225,   225,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   229,     0,     0,
   229,     0,     0,   229,   226,   229,   228,   228,   228,     0,
     0,   228,   228,   228,   226,   228,     0,     0,     0,     0,
     0,   229,     0,     0,     0,   228,   228,     0,     0,     0,
     0,     0,     0,   229,   228,   228,     0,   228,   228,   228,
   228,   228,     0,     0,     0,     0,     0,     0,   226,   228,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   226,   226,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   228,     0,     0,   228,     0,     0,   228,
     0,   228,   227,     0,   224,   224,   224,     0,     0,   224,
   224,   224,   227,   224,     0,     0,     0,   228,     0,     0,
     0,     0,     0,   224,   224,     0,     0,     0,     0,   228,
     0,     0,   224,   224,     0,   224,   224,   224,   224,   224,
     0,     0,     0,     0,     0,     0,   227,   224,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   227,   227,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   224,     0,     0,   224,     0,     0,   224,   220,   224,
   225,   225,   225,     0,     0,   225,   225,   225,   220,   225,
     0,     0,     0,     0,     0,   224,     0,     0,     0,   225,
   225,     0,     0,     0,     0,     0,     0,   224,   225,   225,
     0,   225,   225,   225,   225,   225,     0,     0,     0,     0,
     0,     0,   220,   225,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   220,   220,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   225,     0,     0,
   225,     0,     0,   225,   222,   225,   226,   226,   226,     0,
     0,   226,   226,   226,   222,   226,     0,     0,     0,     0,
     0,   225,     0,     0,     0,   226,   226,     0,     0,     0,
     0,     0,     0,   225,   226,   226,     0,   226,   226,   226,
   226,   226,     0,     0,     0,     0,     0,     0,   222,   226,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   222,   222,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   226,     0,     0,   226,     0,     0,   226,
     0,   226,   261,     0,   227,   227,   227,     0,     0,   227,
   227,   227,   261,   227,     0,     0,     0,   226,     0,     0,
     0,     0,     0,   227,   227,     0,     0,     0,     0,   226,
     0,     0,   227,   227,     0,   227,   227,   227,   227,   227,
     0,     0,     0,     0,     0,     0,   261,   227,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   261,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   227,     0,     0,   227,     0,     0,   227,   223,   227,
   220,   220,   220,     0,     0,   220,   220,   220,   223,   220,
     0,     0,     0,     0,     0,   227,     0,     0,     0,   220,
   220,     0,     0,     0,     0,     0,     0,   227,   220,   220,
     0,   220,   220,   220,   220,   220,     0,   263,     0,     0,
     0,     0,   223,   220,     0,     0,     0,   263,     0,     0,
     0,     0,     0,     0,     0,     0,   223,   223,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   220,     0,     0,
   220,   263,     0,   220,     0,   220,   222,   222,   222,     0,
     0,   222,   222,   222,     0,   222,   263,     0,     0,     0,
     0,   220,     0,     0,     0,   222,   222,     0,     0,     0,
     0,     0,     0,   220,   222,   222,     0,   222,   222,   222,
   222,   222,     0,     0,     0,     0,   221,     0,     0,   222,
     0,     0,     0,     0,     0,     0,   221,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   222,     0,     0,   222,     0,     0,   222,
   221,   222,     0,     0,   261,   261,   261,     0,     0,   261,
   261,   261,     0,   261,   221,   221,     0,   222,   219,     0,
     0,     0,     0,   261,   261,     0,     0,     0,   219,   222,
     0,     0,   261,   261,     0,   261,   261,   261,   261,   261,
     0,     0,     0,     0,     0,     0,     0,   261,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   219,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   219,   219,     0,     0,
     0,   261,     0,     0,   261,     0,     0,   261,     0,   261,
   223,   223,   223,     0,     0,   223,   223,   223,     0,   223,
     0,     0,     0,     0,     0,   261,   352,     0,     0,   223,
   223,     0,     0,     0,     0,     0,   352,   261,   223,   223,
     0,   223,   223,   223,   223,   223,     0,     0,     0,   263,
   263,   263,     0,   223,   263,   263,   263,     0,   263,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   263,   263,
   352,     0,     0,     0,     0,     0,     0,   263,   263,     0,
   263,   263,   263,   263,   263,   352,     0,   223,     0,   352,
   223,     0,   263,   223,     0,   223,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   223,     0,     0,     0,     0,     0,   352,     0,     0,
     0,     0,     0,   223,     0,     0,   263,     0,     0,   263,
     0,   353,   263,     0,   263,     0,     0,     0,   221,   221,
   221,   353,     0,   221,   221,   221,     0,   221,     0,     0,
   263,     0,     0,     0,     0,     0,     0,   221,   221,     0,
     0,     0,   263,     0,     0,     0,   221,   221,     0,   221,
   221,   221,   221,     0,     0,   353,     0,     0,     0,     0,
     0,   221,     0,     0,     0,     0,     0,     0,     0,     0,
   353,     0,     0,     0,   353,     0,     0,     0,     0,     0,
   219,   219,   219,     0,     0,   219,   219,   219,     0,   219,
     0,     0,     0,     0,     0,   221,     0,     0,   221,   219,
   219,   221,   353,   221,     0,     0,     0,     0,   219,   219,
     0,   219,   219,   219,   219,     0,     0,   316,     0,   221,
     0,     0,     0,   219,     0,     0,     0,   316,     0,     0,
     0,   221,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   219,     0,     0,
   219,   316,     0,   219,     0,   219,     0,     0,   352,   352,
   352,     0,     0,   352,   352,   352,   316,   352,     0,     0,
   316,   219,     0,     0,     0,     0,     0,   352,   352,     0,
     0,     0,     0,   219,     0,     0,   352,   352,     0,   352,
   352,   352,   352,   352,     0,     0,     0,     0,   316,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   352,   352,   352,   352,   352,   352,
   352,   352,   352,   352,   352,   352,   352,   352,     0,   286,
   352,   352,   352,     0,     0,   352,     0,     0,   352,   286,
     0,   352,     0,   352,     0,   352,     0,   352,     0,   352,
   352,   352,   352,   352,   352,   352,     0,   352,     0,   352,
     0,     0,     0,   353,   353,   353,     0,     0,   353,   353,
   353,     0,   353,   286,     0,     0,     0,     0,     0,     0,
     0,     0,   353,   353,     0,     0,     0,     0,   286,     0,
   434,   353,   353,     0,   353,   353,   353,   353,   353,     0,
   434,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   353,
   353,   353,   353,   353,   353,   353,   353,   353,   353,   353,
   353,   353,   353,     0,   103,   353,   353,   353,     0,     0,
   353,     0,     0,   353,     0,     0,   353,     0,   353,   434,
   353,   122,   353,   434,   353,   353,   353,   353,   353,   353,
   353,     0,   353,     0,   353,     0,     0,     0,     0,   316,
   316,   316,     0,     0,   316,   316,   316,     0,   316,     0,
     0,   434,     0,     0,     0,     0,     0,     0,   316,   316,
     0,     0,     0,     0,     0,     0,   513,   316,   316,     0,
   316,   316,   316,   316,   316,     0,   513,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   316,   316,   316,   316,   316,
   316,   316,   316,   316,   316,   316,   316,   316,   316,     0,
    97,   316,   316,   316,     0,     0,   316,     0,     0,   316,
     0,     0,   316,     0,   316,   513,   316,   116,   316,   513,
   316,   316,   316,   316,   316,   316,   316,     0,   316,     0,
   316,     0,     0,   512,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   512,     0,     0,     0,   513,     0,     0,
     0,   286,   286,   286,     0,     0,   286,   286,   286,     0,
   286,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   286,   286,     0,     0,     0,     0,     0,    96,     0,   286,
   286,     0,   286,   286,   286,   286,   286,     0,     0,     0,
     0,     0,   512,     0,   115,     0,   512,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   434,   434,   434,     0,     0,     0,   434,   434,
     0,   434,     0,     0,   512,     0,     0,     0,     0,     0,
   434,   286,     0,     0,   286,     0,   286,     0,     0,   514,
   434,   434,     0,   434,   434,   434,   434,   434,     0,   514,
     0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   434,   434,
   434,   434,   434,   434,   434,   434,   434,   434,   434,   434,
   434,   434,     0,    98,   434,   434,   434,     0,     0,     0,
     0,     0,   434,     0,     0,     0,     0,     0,   514,   434,
   117,   434,   514,   434,   434,   434,   434,   434,   434,   434,
     0,   434,   434,   434,     0,     0,     0,     0,   513,   513,
   513,     0,     0,     0,   513,   513,     0,   513,     0,     0,
   514,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   513,   513,     0,   513,
   513,   513,   513,   513,     0,     0,     0,     0,     0,   515,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   515,
     0,     0,     0,     0,   513,   513,   513,   513,   513,   513,
   513,   513,   513,   513,   513,   513,   513,   513,     0,     0,
   513,   513,   513,     0,   525,   512,   512,   512,   513,     0,
     0,   512,   512,    99,   512,   513,     0,   513,     0,   513,
   513,   513,   513,   513,   513,   513,     0,   513,   515,   513,
   118,     0,   515,   512,   512,     0,   512,   512,   512,   512,
   512,     0,     0,     0,     0,     0,   517,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   517,     0,     0,     0,
   515,   512,   512,   512,   512,   512,   512,   512,   512,   512,
   512,   512,   512,   512,   512,     0,     0,   512,   512,   512,
     0,   524,     0,     0,     0,   512,     0,     0,     0,     0,
   101,     0,   512,     0,   512,     0,   512,   512,   512,   512,
   512,   512,   512,     0,   512,   517,   512,   120,     0,   517,
     0,   514,   514,   514,     0,     0,     0,   514,   514,     0,
   514,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   517,     0,   514,
   514,     0,   514,   514,   514,   514,   514,     0,     0,     0,
   516,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   516,     0,     0,     0,     0,     0,     0,   514,   514,   514,
   514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
   514,     0,     0,   514,   514,   514,     0,   526,     0,     0,
     0,   514,     0,     0,   100,     0,     0,     0,   514,     0,
   514,     0,   514,   514,   514,   514,   514,   514,   514,   516,
   514,   119,   514,   516,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   515,   515,   515,     0,     0,     0,   515,   515,     0,
   515,   516,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   515,
   515,     0,   515,   515,   515,   515,   515,     0,     0,     0,
     0,     0,   518,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   518,     0,     0,     0,     0,   515,   515,   515,
   515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
   515,     0,     0,   515,   515,   515,     0,   527,   517,   517,
   517,   515,     0,     0,   517,   517,   102,   517,   515,     0,
   515,     0,   515,   515,   515,   515,   515,   515,   515,     0,
   515,   518,   515,   121,     0,   518,   517,   517,     0,   517,
   517,   517,   517,   517,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   518,   517,   517,   517,   517,   517,   517,
   517,   517,   517,   517,   517,   517,   517,   517,     0,     0,
   517,   517,   517,     0,   529,     0,     0,     0,   517,     0,
     0,     0,     0,     0,     0,   517,     0,   517,   509,   517,
   517,   517,   517,   517,   517,   517,     0,   517,   509,   517,
     0,     0,   516,   516,   516,     0,     0,     0,   516,   516,
     0,   516,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   516,   516,    93,   516,   516,   516,   516,   516,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   509,     0,   112,
     0,   509,     0,     0,     0,     0,     0,     0,   516,   516,
   516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
   516,   516,     0,     0,   516,   516,   516,     0,   528,   509,
     0,     0,   516,     0,     0,     0,     0,     0,     0,   516,
     0,   516,     0,   516,   516,   516,   516,   516,   516,   516,
     0,   516,     0,   516,   508,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   508,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   518,   518,   518,     0,     0,     0,
   518,   518,     0,   518,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    92,     0,
     0,     0,   518,   518,     0,   518,   518,   518,   518,   518,
     0,     0,     0,   508,     0,   111,     0,   508,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
   518,   518,   518,   518,     0,   508,   518,   518,   518,     0,
   530,     0,     0,     0,   518,     0,     0,     0,     0,     0,
     0,   518,     0,   518,   511,   518,   518,   518,   518,   518,
   518,   518,     0,   518,   511,   518,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   509,   509,   509,     0,     0,     0,   509,   509,    95,   509,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   511,     0,   114,     0,   511,   509,   509,
     0,   509,   509,   509,   509,   509,     0,     0,     0,     0,
     0,   304,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,     0,     0,     0,   511,   509,   509,   509,   509,
   509,   509,   509,   509,   509,   509,   509,   509,   509,   509,
     0,     0,   509,   509,   509,     0,   521,     0,     0,     0,
   509,     0,     0,     0,     0,   109,     0,   509,     0,   509,
     0,   509,   509,   509,   509,   509,   509,   509,     0,   509,
   304,   509,   128,     0,   304,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   508,   508,   508,     0,
     0,     0,   508,   508,     0,   508,     0,     0,     0,     0,
     0,     0,   304,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   313,   508,   508,     0,   508,   508,   508,
   508,   508,     0,   313,     0,     0,     0,     0,     0,     0,
     0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    53,   508,   508,   508,   508,   508,   508,   508,   508,
   508,   508,   508,   508,   508,   508,     0,   108,   508,   508,
   508,     0,   520,     0,     0,     0,   508,     0,     0,     0,
     0,     0,   313,   508,   127,   508,   313,   508,   508,   508,
   508,   508,   508,   508,     0,   508,     0,   508,     0,     0,
    53,     0,     0,     0,     0,     0,   511,   511,   511,     0,
     0,     0,   511,   511,   313,   511,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   288,     0,   511,   511,     0,   511,   511,   511,
   511,   511,   288,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   511,   511,   511,   511,   511,   511,   511,   511,
   511,   511,   511,   511,   511,   511,   288,     0,   511,   511,
   511,     0,   523,   304,   304,   304,   511,     0,     0,   304,
   304,   288,   304,   511,   636,   511,     0,   511,   511,   511,
   511,   511,   511,   511,   636,   511,     0,   511,     0,     0,
     0,   304,   304,     0,   304,   304,   304,   304,   304,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   304,   304,   636,     0,   304,   304,   304,     0,     0,
     0,     0,     0,   304,     0,     0,     0,     0,     0,     0,
   304,     0,   304,     0,   304,   304,   304,   304,   304,   304,
   304,     0,   304,     0,   304,   313,   313,   313,     0,     0,
     0,   313,   313,     0,   313,     0,    64,     0,     0,     0,
     0,     0,     0,    53,    53,    53,    64,     0,    53,    53,
    53,     0,    53,   313,   313,     0,   313,   313,   313,   313,
   313,     0,    53,     0,     0,     0,     0,     0,     0,     0,
     0,    53,    53,     0,    53,    53,    53,    53,    53,     0,
     0,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,    64,   423,   313,   313,   313,
     0,     0,     0,     0,     0,   313,   423,     0,     0,     0,
     0,     0,   313,     0,   313,     0,   313,   313,   313,   313,
   313,   313,   313,    53,   313,     0,   313,     0,     0,     0,
     0,     0,     0,     0,   288,   288,   288,     0,     0,   288,
   288,   288,     0,   288,    53,     0,     0,     0,     0,    55,
     0,     0,     0,   288,   288,   423,     0,     0,     0,    55,
     0,     0,   288,   288,     0,   288,   288,   288,   288,   288,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    56,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    56,   636,   636,   636,   219,
     0,   636,   636,   636,     0,   636,     0,     0,    55,   219,
     0,     0,     0,     0,   288,   636,   636,   288,     0,   288,
     0,     0,     0,     0,   636,   636,     0,   636,   636,   636,
   636,   636,     0,     0,     0,   288,    25,     0,     0,     0,
     0,     0,     0,   263,    56,     0,    25,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   636,     0,     0,   636,
     0,   636,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    25,     0,   636,    64,    64,
    64,     0,     0,    64,    64,    64,     0,    64,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    64,    64,     0,
     0,     0,     0,     0,     0,   353,    64,    64,     0,    64,
    64,    64,    64,    64,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   423,   423,
   423,     0,     0,   423,   423,   423,     0,   423,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   423,    64,     0,
     0,    64,     0,     0,     0,     0,   423,   423,     0,   423,
   423,   423,   423,   423,     0,     0,     0,     0,     0,    64,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    55,    55,     0,     0,    55,    55,    55,     0,
    55,     0,     0,     0,     0,   423,     0,     0,     0,     0,
    55,     0,   423,     0,     0,     0,     0,     0,   423,    55,
    55,     0,    55,    55,    55,    55,    55,    56,    56,    56,
     0,     0,    56,    56,    56,   659,    56,     0,     0,   423,
     0,   219,   219,   219,     0,     0,    56,   219,   219,     0,
   219,     0,     0,     0,     0,    56,    56,     0,    56,    56,
    56,    56,    56,     0,     0,     0,     0,     0,     0,   219,
   219,    55,   219,   219,   219,   219,     0,     0,    25,    25,
    25,     0,     0,     0,    25,    25,     0,    25,     0,     0,
     0,     0,    55,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    56,     0,    25,
    25,    25,    25,    25,     0,     0,     0,     0,     4,     5,
     6,   219,     8,     0,     0,     0,     9,    10,    56,     0,
     0,    11,     0,    12,    13,    14,   109,   110,    17,    18,
     0,     0,   219,     0,   111,   112,   113,   340,   341,   342,
   343,     0,     0,   118,     0,     0,     0,     0,    25,     0,
   119,     0,     0,   344,   345,   346,     0,    34,   347,    36,
   348,   349,   350,   351,     0,    41,     0,     0,   128,    25,
   476,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   352,     0,
     0,   131,     0,     0,    47,    48,     0,    49,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    53,    54,    55,    56,
    57,    58,     0,     0,     0,    59,     0,    60,    61,     0,
    62,    63,    64,    65,     0,    66,    67,     0,     4,     5,
     6,     0,     8,     0,     0,     0,     9,    10,     0,     0,
     0,    11,     0,    12,    13,    14,   109,   110,    17,    18,
     0,     0,     0,     0,   111,   112,   113,   340,   341,   342,
   343,     0,     0,   118,     0,     0,     0,     0,     0,     0,
   119,     0,     0,   344,   345,   346,     0,    34,   347,    36,
   348,   349,   350,   351,     0,    41,     0,     0,   128,   476,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   352,     0,
     0,   131,     0,     0,    47,    48,     0,    49,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    53,    54,    55,    56,
    57,    58,     0,     0,     0,    59,     0,    60,    61,     0,
    62,    63,    64,    65,     0,    66,    67,     0,     4,     5,
     6,     7,     8,     0,     0,     0,     9,    10,     0,     0,
     0,    11,     0,    12,    13,    14,    15,    16,    17,    18,
     0,     0,     0,     0,    19,    20,    21,    22,    23,    24,
    25,     0,     0,    26,     0,     0,     0,     0,     0,    27,
    28,    29,    30,    31,    32,    33,     0,    34,    35,    36,
    37,    38,    39,    40,     0,    41,    42,    43,    44,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
     0,    46,     0,     0,    47,    48,     0,    49,     0,    50,
     0,     0,     0,    51,     0,     0,     0,     0,     0,     0,
     0,    52,     0,     0,     0,     0,    53,    54,    55,    56,
    57,    58,     0,     0,     0,    59,     0,    60,    61,     0,
    62,    63,    64,    65,     0,    66,    67,     4,     5,     6,
     7,   237,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,    22,    23,    24,    25,
     0,     0,    26,     0,     0,     0,     0,     0,    27,    28,
     0,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,     0,    41,    42,    43,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
    46,     0,     0,    47,    48,     0,    49,     0,    50,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,   139,   140,   141,   142,
   143,   144,   145,   146,     0,     0,   147,   148,   149,   150,
   151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
     0,     0,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,     0,   181,   182,   183,   124,   125,
   184,   127,     0,     0,   185,   186,     0,   187,   188,   189,
   190,   191,   192,   193,     0,     0,   194,   195,     0,     0,
     0,   196,   197,   198,   199,     0,     0,     0,     0,     0,
   200,     0,     0,     0,     0,     0,     0,   201,   202,     0,
   203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
   213,     0,     0,   214,     0,     0,     0,     0,     0,   139,
   140,   141,   142,   143,   144,   145,   146,     0,     0,   147,
   148,   149,   150,   151,     0,   215,   152,   153,   154,   155,
   156,   157,   158,     0,     0,   159,   160,   161,   221,   222,
   223,   224,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   225,   226,   227,     0,   181,   228,
   183,   360,   361,   229,   362,     0,     0,   185,   186,     0,
   187,   188,   189,   190,   191,   192,   193,     0,     0,   194,
   195,     0,     0,     0,   196,   197,   198,   199,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,     0,     0,   214,     0,     0,     0,
     0,     0,   139,   140,   141,   142,   143,   144,   145,   146,
     0,     0,   147,   148,   149,   150,   151,     0,   215,   152,
   153,   154,   155,   156,   157,   158,     0,     0,   159,   160,
   161,   221,   222,   223,   224,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   225,   226,   227,
     0,   181,   228,   183,   315,     0,   229,     0,     0,     0,
   185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     0,     0,   194,   195,     0,     0,     0,   196,   197,   198,
   199,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   201,   202,     0,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   212,   213,     0,     0,   214,
    53,     0,     0,     0,     0,   139,   140,   141,   142,   143,
   144,   145,   146,     0,     0,   147,   148,   149,   150,   151,
     0,   215,   152,   153,   154,   155,   156,   157,   158,     0,
     0,   159,   160,   161,   221,   222,   223,   224,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   225,   226,   227,     0,   181,   228,   183,     0,     0,   229,
     0,     0,     0,   185,   186,     0,   187,   188,   189,   190,
   191,   192,   193,     0,     0,   194,   195,     0,     0,     0,
   196,   197,   198,   199,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   201,   202,     0,   203,
   204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     0,     0,   214,    53,     0,     0,     0,     0,   139,   140,
   141,   142,   143,   144,   145,   146,     0,     0,   147,   148,
   149,   150,   151,     0,   215,   152,   153,   154,   155,   156,
   157,   158,     0,     0,   159,   160,   161,   221,   222,   223,
   224,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   225,   226,   227,     0,   181,   228,   183,
     0,     0,   229,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,     0,   196,   197,   198,   199,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     0,     0,     3,     4,     5,     6,     7,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,   215,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,    22,    23,    24,    25,     0,     0,    26,     0,
     0,     0,     0,     0,    27,    28,    29,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    45,     0,     0,    46,     0,     0,    47,
    48,     0,    49,     0,    50,     0,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,   236,     4,     5,     6,     7,   237,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,    22,    23,    24,    25,     0,     0,    26,     0,
     0,     0,     0,     0,    27,    28,     0,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    45,     0,     0,    46,     0,     0,    47,
    48,     0,    49,     0,    50,     0,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,   236,     4,     5,     6,     7,   237,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,    22,    23,    24,    25,     0,     0,    26,     0,
     0,     0,     0,     0,    27,    28,     0,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    45,     0,     0,   326,     0,     0,    47,
    48,     0,    49,     0,    50,     0,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
    15,    16,    17,    18,     0,     0,     0,     0,    19,    20,
    21,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,   290,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,   291,     0,   292,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,   294,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,   295,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   109,   110,    17,    18,     0,     0,     0,     0,   111,   112,
   113,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,   290,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,   721,     0,   292,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,   294,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,   295,   281,   281,   281,     0,   281,     0,     0,     0,
   281,   281,     0,     0,     0,   281,     0,   281,   281,   281,
   281,   281,   281,   281,     0,     0,     0,     0,   281,   281,
   281,   281,   281,   281,   281,     0,     0,   281,     0,     0,
     0,     0,     0,     0,   281,     0,     0,   281,   281,   281,
     0,   281,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   281,   281,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   281,     0,     0,   281,     0,     0,   281,   281,
     0,   281,     0,   281,     0,   281,     0,   281,     0,     0,
     0,     0,     0,     0,     0,   281,     0,     0,     0,     0,
   281,   281,   281,   281,   281,   281,     0,     0,     0,   281,
     0,   281,   281,     0,   281,   281,   281,   281,     0,   281,
   281,   281,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   109,   110,    17,    18,     0,     0,     0,     0,   111,   112,
   113,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,   290,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,   291,     0,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,   294,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,   295,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   109,   110,    17,    18,     0,     0,     0,     0,   111,   112,
   113,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,   290,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,     0,     0,   292,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,   294,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,   295,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   109,   110,    17,    18,     0,     0,     0,     0,   111,   112,
   113,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,   290,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,   721,     0,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,   294,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,   295,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   109,   110,    17,    18,     0,     0,     0,     0,   111,   112,
   113,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,   290,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,     0,     0,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,   294,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,   295,     4,     5,     6,     7,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
    15,    16,    17,    18,     0,     0,     0,     0,    19,    20,
    21,    22,    23,    24,    25,     0,     0,    26,     0,     0,
     0,     0,     0,    27,    28,    29,    30,    31,    32,    33,
     0,    34,    35,    36,    37,    38,    39,    40,     0,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    45,     0,     0,    46,     0,     0,    47,    48,
     0,    49,     0,    50,     0,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,    52,     0,     0,     0,     0,
    53,    54,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,     4,     5,     6,     7,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,     0,    19,    20,    21,
    22,    23,    24,    25,     0,     0,    26,     0,     0,     0,
     0,     0,    27,    28,     0,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
    43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    45,     0,     0,    46,     0,     0,    47,    48,     0,
    49,     0,    50,     0,     0,     0,    51,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,     0,     0,     0,    59,     0,
    60,    61,     0,    62,    63,    64,    65,     0,    66,    67,
     4,     5,     6,     0,     8,     0,     0,     0,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,   109,   110,
    17,    18,     0,     0,     0,     0,   111,   112,   113,   244,
   245,   246,   247,     0,     0,   118,     0,     0,     0,     0,
     0,     0,    28,     0,     0,   248,   249,   250,     0,    34,
   251,    36,   252,   253,   254,   255,     0,    41,    42,    43,
    44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   256,     0,     0,   131,   511,     0,    47,    48,     0,    49,
     0,     0,     0,     0,     0,    51,     0,     0,     0,     0,
     0,     0,     0,   293,     0,     0,     0,     0,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,     0,    19,    20,    21,   244,   245,
   246,   247,     0,     0,   118,     0,     0,     0,     0,     0,
     0,    28,     0,     0,   248,   249,   250,     0,    34,   251,
    36,   252,   253,   254,   255,     0,    41,    42,    43,    44,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
     0,     0,   131,     0,     0,    47,    48,     0,    49,     0,
   650,     0,     0,     0,    51,     0,     0,     0,     0,     0,
     0,     0,   293,     0,     0,     0,     0,    53,    54,    55,
    56,    57,    58,     0,     0,     0,    59,     0,    60,    61,
     0,    62,    63,    64,    65,     0,    66,    67,     4,     5,
     6,     0,     8,     0,     0,     0,     9,    10,     0,     0,
     0,    11,     0,    12,    13,    14,   109,   110,    17,    18,
     0,     0,     0,     0,   111,   112,   113,   244,   245,   246,
   247,     0,     0,   118,     0,     0,     0,     0,     0,     0,
    28,     0,     0,   248,   249,   250,     0,    34,   251,    36,
   252,   253,   254,   255,     0,    41,    42,    43,    44,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   256,     0,
     0,   131,     0,     0,    47,    48,     0,    49,     0,   650,
     0,     0,     0,    51,     0,     0,     0,     0,     0,     0,
     0,   293,     0,     0,     0,     0,    53,    54,    55,    56,
    57,    58,     0,     0,     0,    59,     0,    60,    61,     0,
    62,    63,    64,    65,     0,    66,    67,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,   109,   110,    17,    18,     0,
     0,     0,     0,   111,   112,   113,   244,   245,   246,   247,
     0,     0,   118,     0,     0,     0,     0,     0,     0,    28,
     0,     0,   248,   249,   250,     0,    34,   251,    36,   252,
   253,   254,   255,     0,    41,    42,    43,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   256,     0,     0,
   131,     0,     0,    47,    48,     0,    49,     0,   291,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
   293,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   109,   110,    17,    18,     0,     0,
     0,     0,   111,   112,   113,   244,   245,   246,   247,     0,
     0,   118,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   248,   249,   250,     0,    34,   251,    36,   252,   253,
   254,   255,     0,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   256,     0,     0,   131,
     0,     0,    47,    48,     0,    49,     0,   915,     0,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   293,
     0,     0,     0,     0,    53,    54,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,   109,   110,    17,    18,     0,     0,     0,
     0,   111,   112,   113,   244,   245,   246,   247,     0,     0,
   118,     0,     0,     0,     0,     0,     0,    28,     0,     0,
   248,   249,   250,     0,    34,   251,    36,   252,   253,   254,
   255,     0,    41,    42,    43,    44,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   256,     0,     0,   131,     0,
     0,    47,    48,     0,    49,     0,   721,     0,     0,     0,
    51,     0,     0,     0,     0,     0,     0,     0,   293,     0,
     0,     0,     0,    53,    54,    55,    56,    57,    58,     0,
     0,     0,    59,     0,    60,    61,     0,    62,    63,    64,
    65,     0,    66,    67,   624,   624,   624,     0,   624,     0,
     0,     0,   624,   624,     0,     0,     0,   624,     0,   624,
   624,   624,   624,   624,   624,   624,     0,     0,     0,     0,
   624,   624,   624,   624,   624,   624,   624,     0,     0,   624,
     0,     0,     0,     0,     0,     0,   624,     0,     0,   624,
   624,   624,     0,   624,   624,   624,   624,   624,   624,   624,
     0,   624,   624,   624,   624,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   624,     0,     0,   624,   624,     0,
   624,   624,     0,   624,     0,     0,     0,     0,     0,   624,
     0,     0,     0,     0,     0,     0,     0,   624,     0,     0,
     0,     0,   624,   624,   624,   624,   624,   624,     0,     0,
     0,   624,     0,   624,   624,     0,   624,   624,   624,   624,
     0,   624,   624,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,   244,   245,   246,   247,     0,     0,    26,     0,
     0,     0,     0,     0,     0,    28,     0,     0,   248,   249,
   250,     0,    34,   251,    36,   252,   253,   254,   255,     0,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   256,     0,     0,   131,     0,     0,    47,
    48,     0,    49,     0,     0,     0,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   109,   110,    17,    18,     0,     0,     0,     0,   111,   112,
   113,   244,   245,   246,   247,     0,     0,   118,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   248,   249,   250,
     0,    34,   251,    36,   252,   253,   254,   255,     0,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,   131,     0,     0,    47,    48,
     0,    49,     0,     0,     0,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
    53,    54,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,     0,    19,    20,    21,
   244,   245,   246,   247,     0,     0,   118,     0,     0,     0,
     0,     0,     0,    28,     0,     0,   248,   249,   250,     0,
    34,   251,    36,   252,   253,   254,   255,     0,    41,    42,
    43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   256,     0,     0,   131,     0,     0,    47,    48,     0,
    49,     0,     0,     0,     0,     0,    51,     0,     0,     0,
     0,     0,     0,     0,   293,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,     0,     0,     0,    59,     0,
    60,    61,     0,    62,    63,    64,    65,     0,    66,    67,
   624,   624,   624,     0,   624,     0,     0,     0,   624,   624,
     0,     0,     0,   624,     0,   624,   624,   624,   624,   624,
   624,   624,     0,     0,     0,     0,   624,   624,   624,   624,
   624,   624,   624,     0,     0,   624,     0,     0,     0,     0,
     0,     0,   624,     0,     0,   624,   624,   624,     0,   624,
   624,   624,   624,   624,   624,   624,     0,   624,   624,   624,
   624,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   624,     0,     0,   624,     0,     0,   624,   624,     0,   624,
     0,     0,     0,     0,     0,   624,     0,     0,     0,     0,
     0,     0,     0,   624,     0,     0,     0,     0,   624,   624,
   624,   624,   624,   624,     0,     0,     0,   624,     0,   624,
   624,     0,   624,   624,   624,   624,     0,   624,   624,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,   109,   110,    17,
    18,     0,     0,     0,     0,   111,   112,   113,   272,   273,
   274,   275,     0,     0,   118,     0,     0,     0,     0,     0,
     0,   119,     0,     0,   276,   277,   278,     0,    34,   279,
    36,   280,   281,   282,   283,     0,    41,     0,     0,   128,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   284,
     0,     0,    46,     0,     0,    47,    48,     0,    49,     0,
    50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    53,    54,    55,
    56,    57,    58,     0,     0,     0,    59,     0,    60,    61,
     0,    62,    63,    64,    65,     0,    66,    67,     4,     5,
     6,     0,     8,     0,     0,     0,     9,    10,     0,     0,
     0,    11,     0,    12,    13,    14,   109,   110,    17,    18,
     0,     0,     0,     0,   111,   112,   113,   340,   341,   342,
   343,     0,     0,   118,     0,     0,     0,     0,     0,     0,
   119,     0,     0,   344,   345,   346,     0,    34,   347,    36,
   348,   349,   350,   351,     0,    41,     0,     0,   128,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   352,     0,
     0,   427,     0,     0,    47,    48,     0,    49,     0,   428,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    53,    54,    55,    56,
    57,    58,     0,     0,     0,    59,     0,    60,    61,     0,
    62,    63,    64,    65,     0,    66,    67,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,   109,   110,    17,    18,     0,
     0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     0,     0,   118,     0,     0,     0,     0,     0,     0,   119,
     0,     0,   120,   121,   122,     0,    34,   123,    36,   124,
   125,   126,   127,     0,    41,     0,     0,   128,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   130,     0,     0,
   131,     0,     0,    47,    48,     0,    49,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   109,   110,    17,    18,     0,     0,
     0,     0,   111,   112,   113,   340,   341,   342,   343,     0,
     0,   118,     0,     0,     0,     0,     0,     0,   119,     0,
     0,   344,   345,   346,     0,    34,   347,    36,   348,   349,
   350,   351,     0,    41,     0,     0,   128,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   352,     0,     0,   427,
     0,     0,    47,    48,     0,    49,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    53,    54,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,   109,   110,    17,    18,     0,     0,     0,
     0,   111,   112,   113,   928,   929,   930,   931,     0,     0,
   118,     0,     0,     0,     0,     0,     0,   119,     0,     0,
   932,   933,   934,     0,    34,   935,    36,   936,   937,   938,
   939,     0,    41,     0,     0,   128,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   940,     0,     0,   131,     0,
     0,    47,    48,     0,    49,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    53,    54,    55,    56,    57,    58,     0,
     0,     0,    59,     0,    60,    61,     0,    62,    63,    64,
    65,     0,    66,    67,     4,     5,     6,     0,     8,     0,
     0,     0,     9,    10,     0,     0,     0,    11,     0,    12,
    13,    14,   109,   110,    17,    18,     0,     0,     0,     0,
   111,   112,   113,   114,   115,   116,   117,     0,     0,   118,
     0,     0,     0,     0,     0,     0,   119,     0,     0,   120,
   121,   122,     0,    34,   988,    36,   124,   125,   989,   127,
     0,    41,     0,     0,   128,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   990,     0,     0,   131,     0,     0,
    47,    48,     0,    49,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,    54,    55,    56,    57,    58,     0,     0,
     0,    59,     0,    60,    61,     0,    62,    63,    64,    65,
     0,    66,    67,   631,   632,     0,     0,   633,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,     0,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   637,   638,
   214,     0,   639,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   645,   632,   214,     0,   646,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,   215,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   676,   638,
   214,     0,   677,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   699,   632,   214,     0,   700,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,   215,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   701,   638,
   214,     0,   702,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   713,   632,   214,     0,   714,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,   215,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   715,   638,
   214,     0,   716,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   742,   632,   214,     0,   743,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,   215,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   744,   638,
   214,     0,   745,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,  1043,   632,   214,     0,  1044,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,   215,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,  1045,   638,
   214,     0,  1046,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,  1070,   638,   214,     0,  1071,     0,     0,
     0,   185,   186,     0,   187,   188,   189,   190,   191,   192,
   193,     0,     0,   194,   195,     0,     0,   215,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   309,     0,     0,
     0,     0,     0,     0,   201,   202,     0,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   645,   632,
   214,     0,   646,     0,     0,     0,   185,   186,     0,   187,
   188,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     0,     0,   215,   196,   197,   198,   199,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
   202,     0,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   215,
    };
  protected static final short[] yyCheck = {
//yyCheck 22778
     2,     6,     7,    26,    75,    28,   301,   587,     6,   426,
     2,     3,    21,   420,   100,    27,    10,    11,    46,    15,
    16,   450,    27,    19,   263,   473,   335,   493,     4,     5,
   339,     3,    59,    11,     7,    15,    16,     7,    14,    19,
     0,   490,   449,    10,   493,   458,    48,    49,    53,    50,
    10,    10,    48,    49,    27,    53,   680,    27,   130,   478,
    10,   468,    10,   529,    10,    21,    10,     0,    10,     0,
    10,   770,    59,    10,    50,   482,   862,   539,    91,   703,
    10,    10,   768,   864,    10,    10,   513,   418,   419,    10,
    10,    10,   423,   717,    10,   105,   119,    10,   107,    59,
     2,     3,     4,     5,   113,   781,     8,     9,    10,    11,
    10,    59,    14,    15,    16,    59,   447,    19,    52,    59,
    10,    10,   746,   963,   100,    44,    10,   105,   137,    10,
    59,   538,    34,    59,    59,   466,   467,   326,    59,    59,
   280,    10,   305,    59,    46,    47,    59,    10,    50,   480,
    52,   107,   105,    15,    16,   133,    44,    19,   305,    59,
    10,    10,   984,    44,   430,   341,    10,    10,    10,    59,
    59,   312,    10,   959,   596,    44,   342,    10,    59,    49,
   341,    10,   280,   565,    10,   516,    48,    10,   329,     0,
   331,   457,    61,   359,    44,    44,    59,   659,   100,    10,
    44,    44,    10,    10,    32,   536,   326,   502,   630,   885,
    59,    44,   375,  1053,   309,    59,    59,    59,    44,    10,
    10,    10,   362,    61,    44,    10,    59,   129,   375,   131,
   240,  1017,    61,    10,  1015,    32,    10,    10,   427,   359,
   128,    61,  1064,   341,   236,   674,    10,    10,    59,   362,
    10,    10,    59,    44,   345,   684,    10,    10,    10,   290,
   291,   688,   240,   729,   362,    10,  1052,   353,    59,   342,
    10,   970,   363,     9,    10,    11,   270,   271,   964,   728,
   729,   376,   377,    32,    44,    59,   359,   240,   266,   329,
   309,   310,   705,   312,   980,    59,   336,   311,   326,    59,
   791,   683,   882,   685,   578,   579,   797,   309,    10,   889,
   306,    47,   308,   266,   894,    10,   329,   373,   262,   263,
   264,    61,   378,   336,   268,   269,   306,   271,   308,   309,
   366,   269,   359,   271,   236,   237,   262,   263,   264,   373,
   290,   291,   268,   269,   378,   271,   808,    32,   264,   262,
   263,   264,   268,   269,   495,   342,   269,   376,   377,    61,
   281,    32,   503,   504,    59,   305,   256,   373,   270,   271,
   268,   269,   378,    32,  1060,   342,   448,   353,   345,   520,
    10,   282,   523,   342,   350,   351,   345,   804,   810,   383,
   384,   385,   386,   129,    10,   387,   342,    91,   342,   427,
   342,    44,   342,   363,   306,   305,   308,   309,   345,   418,
   312,   341,   314,   342,   419,   363,   342,   319,   420,   363,
   290,   291,   292,  1047,   326,   295,   845,   428,   723,    59,
   363,   740,   363,   338,   359,   375,    34,   363,   447,   359,
   420,   433,   342,   448,   306,    61,   308,   449,    46,   362,
   279,   353,   428,   539,  1034,   457,   458,   466,   342,   279,
   267,   433,   467,   338,    91,   443,   468,   357,   707,   449,
   359,   480,   305,   342,    10,   375,   481,    61,   359,   342,
   482,   383,   384,   385,   386,   387,   388,   389,   468,   955,
   424,   920,   426,   267,   490,    10,   430,   431,   510,   477,
   478,    61,   482,   951,   342,   510,   955,   516,    44,   342,
   359,   513,   517,   342,   305,   359,   359,   658,   420,   342,
    10,   513,   424,    59,   426,   427,   428,   536,   430,   431,
   526,   433,   537,   131,   270,   271,   538,   510,   951,   279,
   510,   682,   375,   371,   372,   305,    61,   449,   450,   451,
   378,   342,   342,   342,   849,    91,   426,   342,   538,   461,
   430,    44,   464,   539,   426,   342,   468,    10,   430,   342,
   472,    61,  1001,   659,   371,   372,   312,   279,   314,   342,
   482,   378,   342,   342,   375,   824,   345,   457,   342,   342,
   342,   345,   733,   595,   596,   457,   870,   342,  1005,   359,
   874,   875,   342,   877,   474,   879,   629,   341,    91,   511,
    10,   513,   474,   263,   264,   375,    59,   758,   374,   489,
   490,   644,    10,   493,    44,   634,   262,    91,   630,    15,
    16,   640,   634,    19,   264,   329,   538,   539,   647,    10,
   342,   264,   336,   311,    61,   647,    91,   383,   384,   385,
   386,    10,   388,   389,    10,   741,   526,   680,   338,   529,
   373,    61,    91,   279,    10,   378,   675,    10,   338,   678,
   271,    59,  1003,   675,    10,   687,   817,    59,   634,   673,
   703,   686,   687,   659,   640,   311,   688,   279,   686,   691,
    61,   647,   694,   671,   717,   697,   688,    10,    44,    10,
    59,    44,   329,   705,   318,    61,   339,   946,   307,   336,
    91,    44,   311,    59,   687,   451,    59,   687,   588,    10,
   861,   319,   808,   746,   718,    61,   342,    91,   326,    44,
   801,    44,   728,    44,   362,   349,   759,   264,   318,   353,
   354,   355,   356,   318,   280,    91,    59,   318,    59,  1023,
  1024,  1025,  1026,     2,     3,   338,   342,   659,   781,     8,
     9,    10,    11,    10,   279,   741,    15,    16,    59,   349,
    19,   673,   674,   353,   354,   511,   371,   372,   373,   345,
   650,   363,   684,   378,    44,    34,   688,   311,    44,   279,
    44,   693,   373,   329,   373,   373,   279,    46,    47,    10,
   336,     2,     3,    52,  1078,   341,   373,     8,   810,   565,
    44,   341,    59,    14,   347,   366,   718,   368,   341,   370,
    10,   362,    10,   359,   267,   376,   362,   342,   269,   427,
   267,    91,   808,    34,   812,    91,   830,   263,   264,   741,
   264,   819,   342,   269,    91,    46,   329,   823,    59,   719,
    44,   721,   342,   336,   788,   789,    44,    44,   728,   729,
   794,   795,   885,   765,   766,   329,   464,   845,   363,    59,
   804,    44,   336,    61,   472,   263,   264,    44,    32,   279,
   129,   783,   131,   785,   329,   787,   788,   789,   307,    61,
   760,   336,   794,   795,   307,    44,   339,    44,    10,    44,
   329,    44,   804,    91,   307,   264,   808,   336,   279,    44,
   269,   374,   271,    32,    44,   338,   338,   338,    91,   895,
   306,   823,   308,   279,   267,   827,   338,   683,   830,   685,
   131,   768,    61,   770,   280,   805,   487,   673,    10,   841,
   842,   843,   342,   279,   781,    44,    44,    59,   329,   951,
   264,   263,   339,   855,   338,   336,   267,     2,     3,     4,
     5,    91,    44,     8,   338,   329,   338,   264,   338,    14,
   840,   342,   336,   264,   363,    44,   910,    58,   269,    91,
   338,   264,   718,   329,   345,   264,   342,   236,   237,    34,
   336,   264,   305,   895,  1003,   341,   339,  1020,   363,  1004,
   976,    46,   553,  1005,    44,    50,   342,   338,   910,    91,
    44,   264,   342,   359,    44,    59,   362,   919,   920,   279,
   267,   270,   271,   279,  1047,  1005,    10,   264,   363,   342,
    44,    44,    10,   280,  1039,   236,   237,   371,   372,   373,
   591,    44,   944,    61,   378,   915,   359,  1049,   264,    10,
    44,   262,   263,   264,   388,   100,    44,   306,   269,   308,
   309,    44,   375,   312,    44,   314,    44,   359,   363,   329,
   319,   264,    44,   329,   976,    59,   336,   326,   311,   264,
   336,    59,   329,    44,    44,   955,   131,   264,   363,   336,
    44,   279,   280,   359,   830,   693,   311,    44,    59,  1001,
   363,   564,   565,  1005,   264,  1007,   279,   371,   372,   373,
    44,  1013,    44,    91,   378,   362,    44,   307,   319,   309,
   310,   311,   312,   313,    44,   326,    44,    44,   318,    44,
    91,    91,   264,   970,   383,   384,   385,   386,   387,   388,
   389,   329,   264,   980,   271,   371,   372,   984,   336,   279,
   340,   363,   378,   341,   342,   267,   329,   383,   348,   349,
   350,   351,    44,   336,   345,   341,   271,   765,   766,     0,
   345,   420,   342,    58,   362,   424,   345,   426,   427,    10,
    10,   430,   431,   363,   433,   783,   387,   785,   345,   787,
   264,   236,   237,   218,    71,    55,   386,   279,   280,   329,
   449,   450,   451,   294,    10,   376,   336,     5,  1049,    91,
   461,   341,   461,     6,    44,   464,   647,   329,    44,   468,
   683,   926,   685,   472,   336,   426,   427,  1064,    59,   827,
   768,    61,   433,   482,    10,   307,   781,   309,   310,   311,
   312,   313,   980,   841,   842,   843,   318,   329,   800,   450,
   772,   982,    14,    59,   336,  1006,   753,   855,  1053,   341,
   461,    91,   511,   464,   513,    91,     2,     3,   340,    10,
    -1,   472,     8,    -1,   319,    -1,   348,   349,   350,   351,
   362,   326,    -1,    59,    -1,    91,   371,   372,   373,   538,
   753,   754,    10,   378,   371,   372,   373,    -1,    34,    -1,
    -1,   378,   280,    -1,    -1,   768,    44,   770,   353,    -1,
    46,    -1,   513,    -1,   386,    91,    -1,   313,    59,   279,
    -1,   919,   318,   307,    -1,   309,   310,   311,   312,   313,
    10,    -1,    -1,    -1,   318,   307,    10,   309,   310,   311,
   312,    59,   387,    -1,    -1,   329,   944,   379,   380,   381,
   382,   329,   336,    91,   350,   351,   340,   341,   336,    -1,
    -1,    -1,    -1,   341,   348,   349,   350,   351,   329,   329,
    44,    -1,    -1,    91,    -1,   336,   336,    -1,    -1,    59,
   341,   359,   427,   428,   362,    -1,    -1,    61,   433,   307,
   386,   309,   310,   311,   312,   131,    10,   279,   359,   862,
    -1,   864,   386,    -1,    -1,   450,   371,   372,   373,  1007,
    -1,    91,     0,   378,    -1,  1013,   461,    91,    -1,   464,
    -1,    -1,    10,    -1,   673,   674,    -1,   472,    -1,    -1,
    -1,   262,   263,   264,    -1,   684,   267,   268,   269,   688,
   271,   371,   372,   373,   693,    59,    -1,   329,   378,   279,
   281,   282,    -1,   279,   336,    -1,    44,    -1,    -1,   290,
   291,   267,   293,   294,   295,   296,   297,    -1,   513,   718,
    58,    59,    -1,   674,   280,    63,    -1,    91,    -1,   262,
   263,   264,    -1,   684,    -1,   268,   269,   688,   271,    -1,
    -1,   267,   693,    -1,   539,    -1,   959,   960,     0,   329,
   236,   237,    -1,   329,    -1,    -1,   336,   970,    10,    -1,
   336,   342,   342,    -1,   345,    -1,   765,   766,    -1,   371,
   372,   373,    -1,   329,    -1,    10,   378,    -1,    -1,    -1,
   336,    -1,   363,    -1,   783,   341,   785,    -1,   787,   788,
   789,   279,   280,    -1,    -1,   794,   795,    -1,    -1,   267,
    44,    10,  1015,   329,  1017,   804,   362,    59,    -1,   342,
   336,    -1,   280,    -1,   765,   766,   307,    -1,   309,   310,
   311,   312,   313,    -1,    59,    -1,    -1,   318,   827,    10,
   363,   830,   783,   319,   785,    44,   787,   267,   329,  1052,
   326,   329,   841,   842,   843,   336,    -1,    91,   336,   340,
   341,    -1,    61,   804,    -1,   279,   855,   348,   349,   350,
   351,   329,    44,    -1,   659,    -1,    -1,    -1,   336,    -1,
    -1,    -1,   823,   341,   362,    -1,   827,    -1,    59,   674,
    -1,   307,    91,   309,   310,   311,   312,    44,    -1,   684,
   841,   842,   843,   688,   362,   386,    -1,    -1,   693,   329,
    -1,   387,    -1,   267,   855,   329,   336,    -1,    -1,    91,
    -1,   910,   336,    -1,    10,    10,   280,   341,   342,    -1,
   919,   920,    -1,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,     0,   271,    91,    -1,    -1,    -1,    44,    -1,
    -1,   427,    10,   281,   282,   944,   741,   433,    -1,    44,
    -1,    -1,   290,   291,   749,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    59,   450,   329,    61,   305,   919,   920,
   765,   766,   336,    44,    -1,   461,    44,   341,   464,    -1,
   371,   372,   373,    -1,    -1,    91,   472,   378,   783,    -1,
   785,    59,   787,   944,    -1,    -1,    91,    -1,   362,    -1,
    -1,   339,  1001,    -1,   342,    -1,  1005,   345,  1007,   347,
   262,   263,   264,   808,  1013,   267,   268,   269,    -1,   271,
    91,    -1,    -1,     0,    -1,   363,    -1,   513,   823,   281,
    15,    16,   827,    10,    19,   279,    -1,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,   841,   842,   843,    -1,
  1001,    -1,    -1,    10,    -1,    -1,  1007,    42,    43,    -1,
   855,    10,  1013,    48,    49,    -1,    51,    52,    -1,    10,
   279,   280,   307,    -1,   309,   310,   311,   312,   313,    -1,
    -1,    -1,    59,   318,    -1,   329,    -1,    44,    -1,    -1,
   342,    -1,   336,    -1,   329,    44,    -1,   279,    -1,    -1,
   895,   336,    -1,    -1,    61,   340,   341,    -1,    -1,    -1,
    -1,   363,    61,   348,   349,   350,   351,    -1,    59,    -1,
   329,    -1,   279,    -1,   919,   920,   307,   336,   309,   310,
   311,   312,   313,   342,    91,    -1,    -1,   318,    -1,    -1,
    -1,   307,    91,   309,   310,   311,   312,   329,   329,   944,
    91,   386,    -1,   362,   336,   336,    -1,    -1,    -1,   340,
   341,   293,   294,   295,   296,   297,    -1,   348,   349,   350,
   351,    -1,   329,   279,   340,    10,    -1,    -1,    -1,   336,
     0,   976,   348,    10,   279,   280,    -1,    10,   674,    -1,
    10,    -1,    -1,    -1,   262,   263,   264,    10,   684,   267,
   268,   269,   688,   271,    -1,   386,  1001,   693,   279,    -1,
    -1,   307,  1007,   309,   310,   311,   312,   313,  1013,    -1,
    -1,    44,   318,   329,    59,   293,   294,   295,   296,   297,
   336,    44,    59,   329,   329,    -1,    -1,    -1,    61,    59,
   336,   336,    -1,    -1,   340,   341,   341,   342,    61,    -1,
    -1,    -1,   348,   349,   350,   351,    91,    -1,   329,    -1,
    -1,    -1,    -1,    -1,    91,   336,    -1,   362,    91,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,    -1,    91,   765,
   766,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   386,   268,   269,    -1,   271,   363,    -1,   783,    -1,   785,
    -1,   787,    -1,     0,    -1,   290,   291,   292,   293,    -1,
   295,    -1,    -1,    10,    -1,    -1,   293,   294,   295,   296,
   297,   306,   279,   308,   309,    -1,   267,    -1,    -1,    -1,
   279,    -1,   317,    -1,   307,    -1,   309,   310,   311,   312,
   307,   827,   309,   310,   311,   312,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   841,   842,   843,    -1,    -1,
    -1,    58,    59,    -1,    61,   342,    63,   340,    -1,   855,
    -1,    -1,   329,   340,    -1,   348,    -1,    -1,    -1,   336,
   329,    -1,    -1,    -1,    -1,   342,   363,   336,   329,    -1,
    -1,    -1,    -1,   342,    91,   336,    -1,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,   390,   391,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
   405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   415,    -1,   267,   919,   920,   420,    -1,    -1,    -1,   424,
   267,   426,   262,   263,   264,   430,   431,   267,   268,   269,
    -1,   271,    -1,   280,    10,    -1,   279,   280,   944,    -1,
    -1,   281,   282,    -1,   449,    -1,   279,   280,    -1,    -1,
   290,   291,   457,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    10,   468,   469,   470,   471,    -1,    -1,   474,
    -1,    -1,    -1,    -1,   329,    -1,    -1,   482,    -1,    -1,
    -1,   336,   329,    59,   489,   490,   329,    -1,   493,   336,
    -1,    -1,    -1,   336,   341,  1001,   329,    -1,   341,   342,
    -1,  1007,   342,   336,    -1,   345,    -1,  1013,   341,   342,
    -1,    59,    -1,   518,   519,   362,    44,    -1,    -1,   362,
    -1,   526,    -1,   363,   529,    -1,    -1,    -1,    -1,   362,
    -1,    -1,    -1,   538,    -1,    10,    -1,    -1,    -1,    -1,
   257,   258,   259,    91,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    -1,    91,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,   588,    59,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    91,   334,   335,   336,
   337,    10,   339,   340,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   361,   650,   363,   772,   365,   366,
   367,   368,   369,   370,    -1,    44,   781,   374,   375,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
   886,    -1,    61,    -1,   890,    -1,   262,   263,   264,    -1,
    -1,    -1,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     0,    -1,    91,    -1,    -1,    -1,   334,   335,    -1,    -1,
    10,    -1,    -1,    -1,   719,    -1,   721,    -1,    -1,   267,
    -1,   349,    -1,   728,   729,   353,   354,   355,   356,    -1,
    -1,   307,   280,   309,   310,   311,   312,   313,    -1,    -1,
    -1,    -1,   318,   307,    44,   309,   310,   311,   312,   313,
    -1,   279,   280,   329,   318,   760,   342,    -1,    58,    59,
   336,    61,    -1,    63,   340,   341,    -1,    -1,    -1,    -1,
    -1,    -1,   348,   349,   350,   351,   340,   363,    -1,    -1,
    -1,   329,    -1,   788,   789,    -1,   350,   351,   336,   794,
   795,    91,   267,   341,    -1,    -1,    -1,    -1,   803,   804,
   805,   329,    -1,    -1,   809,    -1,    -1,    -1,   336,    -1,
   386,    -1,  1028,   341,   362,  1031,  1032,    -1,    -1,  1035,
  1036,    -1,   386,    -1,    -1,    -1,    -1,    -1,   833,   834,
   835,   836,    -1,     0,   362,   840,    -1,    -1,    -1,    -1,
    -1,    -1,   307,    10,   309,   310,   311,   312,   313,    -1,
    -1,    -1,   977,   318,   329,   980,    -1,   982,    -1,   984,
    -1,   336,    -1,  1079,  1080,  1081,  1082,    -1,    -1,    -1,
    -1,   318,    -1,  1089,    -1,   340,   341,    44,    -1,    -1,
    -1,    -1,   318,   348,   349,   350,   351,   334,   335,    -1,
   279,    58,    59,   898,    61,    -1,    63,    -1,   334,   335,
    -1,    -1,   349,    -1,   351,   910,   353,   354,   355,   356,
   915,    -1,   359,   349,   361,   351,    -1,   353,   354,   355,
   356,   386,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1060,    -1,  1062,    -1,  1064,
   329,    -1,  1067,   948,    -1,    -1,    -1,   336,    -1,    -1,
   955,    -1,    10,   342,    -1,    -1,    -1,   257,   258,   259,
  1085,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    -1,   299,
  1005,    59,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,   781,   334,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,   375,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   386,    44,    -1,    -1,
   257,   258,   259,    -1,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    -1,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,    -1,    91,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
   337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,     0,   374,   375,   376,
   377,    -1,   379,   380,   381,   382,    10,   384,   385,   386,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   977,
    -1,    -1,   980,    -1,   982,    -1,   984,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,
    44,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
   318,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,   350,   351,    -1,    -1,    -1,    91,   307,    -1,
   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
    -1,    -1,  1060,    -1,  1062,    -1,  1064,    -1,    -1,  1067,
    -1,    -1,   279,   280,    -1,    -1,    -1,   318,   386,    -1,
    -1,   340,   323,   324,    -1,    -1,     0,  1085,    -1,   348,
   349,   350,   351,   334,   335,   307,    10,   309,   310,   311,
   312,   313,    -1,    -1,    -1,    -1,   318,    -1,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,   329,    -1,    -1,    -1,    -1,   386,   340,   336,
    44,    -1,    -1,    -1,   341,    -1,   348,   349,   350,   351,
    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,    -1,    -1,   362,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,    -1,    -1,    -1,
    -1,    -1,   334,   335,   386,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
    -1,    -1,    -1,    -1,    -1,    10,    -1,    10,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,    -1,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,    59,   299,    59,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    91,    -1,
   334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
   344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,   375,   376,   377,    -1,   379,   380,   381,   382,    44,
   384,   385,   386,   257,   258,   259,    -1,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,    -1,   299,    91,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
   344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,     0,
   374,   375,   376,   377,   267,   379,   380,   381,   382,    10,
   384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   307,    44,   309,   310,   311,   312,   313,    -1,
    -1,    -1,    -1,   318,    -1,    -1,    -1,    58,    59,    -1,
    61,    -1,    63,    -1,   329,    -1,   329,    -1,    -1,    -1,
    -1,   336,    -1,   336,    -1,   340,   341,    -1,    -1,    -1,
    -1,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
    91,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,    -1,   327,   328,    -1,    -1,    -1,    -1,
    -1,   334,   335,    -1,   279,   280,    -1,    -1,    -1,    -1,
    -1,   386,    -1,    -1,    -1,    -1,   349,    -1,   351,     0,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,
    -1,   336,    -1,    44,    -1,    -1,   341,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    63,    -1,    -1,    -1,    -1,   362,   318,   319,
   320,   321,   322,   323,   324,    -1,    -1,   327,   328,    -1,
    -1,    -1,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,
    -1,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
    -1,   361,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    10,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,    -1,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,    59,   299,    59,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    91,    -1,   334,   335,   336,   337,    -1,   339,   340,
   341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,   375,   376,   377,    -1,   379,   380,
   381,   382,    44,   384,   385,   386,   257,   258,   259,    -1,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,    -1,   299,    91,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,   337,    -1,   339,   340,
   341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,     0,   374,   375,   376,   377,   267,   379,   380,
   381,   382,    10,   384,   385,   386,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   307,    44,   309,   310,   311,
   312,   313,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    63,    -1,   329,    -1,   329,
    -1,    -1,    -1,    -1,   336,    -1,   336,    -1,   340,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,   349,   350,   351,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
    -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    44,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,   257,
   258,   259,    -1,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
    -1,   299,    59,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,    91,    -1,   334,   335,   336,   337,
    -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   362,   363,    63,   365,   366,   367,
   368,   369,   370,    -1,    -1,    -1,   374,   375,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,   386,   257,
   258,   259,    -1,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
    -1,   299,    -1,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
    -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
   368,   369,   370,    -1,    -1,     0,   374,   375,   376,   377,
   267,   379,   380,   381,   382,    10,   384,   385,   386,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    63,    -1,
    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,    -1,   330,   331,     0,    -1,   334,   335,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,   257,   258,   259,    -1,   261,   262,   263,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    -1,   299,    59,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    91,    -1,   334,
   335,   336,   337,    -1,   339,   340,    -1,   342,   343,   344,
   345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,   362,   363,    63,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,   262,   263,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,   337,    -1,   339,   340,    -1,   342,   343,   344,
   345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,     0,   374,
    -1,   376,   377,   267,   379,   380,   381,   382,    10,   384,
   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    -1,    63,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,
    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,     0,    -1,
   334,   335,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    10,    -1,    -1,    -1,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,
    -1,    63,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,   257,   258,   259,    -1,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,    -1,   299,    59,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    91,    -1,   334,   335,   336,   337,    -1,   339,   340,    -1,
   342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
    -1,   363,    63,   365,   366,   367,   368,   369,   370,    -1,
    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    -1,   384,   385,   386,   257,   258,   259,    -1,   261,
   262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,    -1,   280,    -1,
   279,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
   329,    -1,   334,   335,   336,   337,   338,   336,   340,   341,
   342,   343,   344,   342,   346,    -1,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,     0,   374,    -1,   376,   377,   267,   379,   380,   381,
   382,    10,   384,   385,   386,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,   329,    -1,
    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
   331,     0,    -1,   334,   335,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,    -1,    10,    -1,    -1,    -1,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    61,    -1,    63,    61,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    91,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,    -1,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,    63,    -1,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,   337,   338,
    -1,   340,   341,   342,   343,   344,    -1,   346,    -1,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   386,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,    -1,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,    -1,   279,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   329,    -1,   334,   335,   336,   337,    -1,
   336,   340,   341,   342,   343,   344,   342,   346,    -1,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,     0,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    10,   384,   385,   386,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,    44,   330,
   331,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    61,    -1,    63,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,     0,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    10,    -1,    -1,    10,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,    44,   314,
    -1,    44,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    61,   334,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    91,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    -1,   280,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    59,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    91,    -1,   334,   335,
   336,   337,    -1,    -1,   340,   341,   342,   343,   344,    -1,
   346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
   366,   367,   368,   369,   370,    -1,    10,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
   386,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    -1,   280,    -1,   279,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   329,    -1,   334,   335,
   336,   337,    -1,   336,   340,   341,   342,   343,   344,   342,
   346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,     0,   374,    -1,
   376,   377,   267,   379,   380,   381,   382,    10,   384,   385,
   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,
    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,     0,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    10,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,   348,    -1,   350,    -1,   352,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   257,   258,   259,    -1,   261,   262,
   263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,    10,    -1,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,   337,    -1,    -1,   340,   341,   342,
   343,   344,    -1,   346,    -1,   348,   349,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
   363,    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,
    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   386,   257,   258,   259,    -1,   261,   262,
   263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,
    -1,    -1,    -1,   336,   337,    -1,    -1,   340,    -1,   342,
   343,   344,    -1,   346,    -1,   348,    -1,   350,    -1,   352,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,   362,
   363,    -1,   365,   366,   367,   368,   369,   370,    59,    -1,
    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,    -1,   261,    -1,    -1,
    91,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    10,   306,   307,   308,   309,   310,   311,   312,    10,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    44,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    61,    -1,    -1,    -1,   360,    -1,    59,    -1,
    -1,   365,   366,   367,   368,   369,   370,    10,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    91,   280,
    -1,    10,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,
    59,    -1,    -1,    -1,    -1,   336,   337,    -1,    -1,   340,
   341,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,    -1,   360,
    -1,   362,    91,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
   279,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
    -1,    10,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
   329,    -1,    -1,    -1,   267,    -1,    -1,   336,   329,    -1,
    59,    -1,    -1,   342,    -1,   336,   337,    -1,    -1,   340,
   341,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,    -1,   360,
    -1,   362,    91,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,    -1,   329,    -1,    -1,    -1,
    -1,    -1,    -1,   336,    -1,    -1,    -1,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
   269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,    -1,    10,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,
   299,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   329,    -1,    59,    -1,    -1,    -1,    -1,   336,   337,    -1,
    -1,   340,   341,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,
    -1,   360,    -1,   362,    91,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
   269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    10,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,
   299,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   329,    -1,    59,    -1,    -1,    -1,    -1,   336,   337,    -1,
    -1,   340,   341,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,
    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
    -1,    -1,   269,   270,    10,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
   357,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
    -1,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    10,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
   256,   257,   258,   259,   260,   261,    -1,    -1,   264,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    10,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    10,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    44,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,   256,   257,
   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    91,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,     0,    -1,    -1,
   298,   299,    -1,   301,   302,   303,   304,    10,   306,   307,
   308,   309,   310,   311,   312,    10,   314,   315,   316,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,
    -1,    44,   340,    -1,    -1,   343,   344,    -1,   346,    44,
   348,    -1,    -1,    -1,   352,    58,    59,    -1,    61,    -1,
    63,    -1,   360,    -1,    -1,   363,    61,   365,   366,   367,
   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,    91,    -1,
   257,   258,   259,    -1,   261,    -1,    91,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,     0,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    10,   306,
   307,   308,   309,   310,   311,   312,    10,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,   279,    44,   340,    -1,    -1,   343,   344,    -1,   346,
    44,    -1,    -1,    -1,    -1,   352,    58,    59,    -1,    -1,
    -1,    63,    10,   360,    -1,    -1,    -1,    61,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,    91,
    -1,   329,    -1,    -1,    -1,    -1,    44,    91,   336,    -1,
    -1,    -1,    -1,    -1,   342,    -1,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    -1,   280,   281,   282,
    -1,    -1,    44,    -1,   279,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    58,    59,    -1,    61,
    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    91,
    -1,   334,   335,   336,   329,    -1,   339,    -1,    -1,   342,
    -1,   336,   345,    -1,   347,    -1,   349,   342,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281,
   282,    -1,    -1,    44,    -1,   279,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    58,    59,    -1,
    61,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    91,   279,   334,   335,   336,   329,    -1,   339,    -1,    -1,
   342,    -1,   336,   345,    -1,   347,    -1,   349,   342,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
   362,   363,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,   375,    10,   267,   268,   269,    -1,   271,
    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,   281,
   282,    -1,    -1,    -1,   342,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    44,    -1,
    -1,    -1,    -1,   305,     0,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    10,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    -1,    -1,   334,   335,   336,    -1,   338,   339,    -1,    -1,
   342,    -1,    -1,   345,    -1,   347,    -1,   349,    44,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
    -1,   363,    58,    59,    -1,    61,    -1,    63,    -1,    -1,
    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    91,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,   338,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,    44,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,   363,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    91,    -1,    -1,    -1,
    -1,    -1,    -1,   772,    -1,    -1,   775,    -1,    -1,    -1,
    -1,    -1,   781,    -1,    -1,     0,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    44,
    -1,    -1,    -1,   339,   290,   291,   342,   293,   294,   295,
   296,   297,    -1,    58,    59,    -1,    61,    -1,    63,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    91,    -1,   334,   335,
   336,    -1,   338,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
   356,   357,   358,   359,    -1,   361,    -1,   363,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,   375,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    61,   977,    63,
   305,   980,    -1,   982,    -1,   984,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    91,    -1,   334,
   335,   336,    -1,   338,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    10,   363,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
   375,    10,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,  1060,    -1,  1062,    -1,  1064,   281,   282,  1067,    -1,
    -1,    44,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    44,  1085,    -1,    61,    -1,
   305,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    10,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    91,   334,
   335,   336,    -1,   338,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    44,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    91,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    10,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,    -1,   338,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,    44,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,    -1,   363,
    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,
    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,   279,   280,   267,   268,
   269,    -1,   271,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     0,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,   329,    -1,   267,   268,
   269,    -1,   271,   336,    -1,    -1,    -1,    -1,   341,   342,
    -1,    -1,   281,   282,    -1,    -1,    44,    -1,    -1,    -1,
   339,   290,   291,   342,   293,   294,   295,   296,   297,   362,
    58,    59,    -1,    61,    -1,    63,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    91,    -1,   334,   335,   336,    -1,   338,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,    -1,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     0,    -1,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    44,    -1,    -1,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    58,    59,    -1,    61,    -1,    63,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,    91,    -1,   334,   335,   336,    -1,
   338,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,
    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,   357,
   358,   359,    -1,   361,    -1,   363,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    -1,   262,   263,   264,   375,    10,   267,
   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,     0,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    10,    -1,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,    -1,    -1,   334,   335,   336,    -1,
   338,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,
    -1,   349,    44,   351,    -1,   353,   354,   355,   356,   357,
   358,   359,    -1,   361,    -1,   363,    58,    59,    -1,    -1,
    -1,    63,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    91,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
    -1,   338,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,
   347,    -1,   349,    44,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    -1,   363,    58,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,   375,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281,
   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,
   342,   293,   294,   295,   296,   297,    -1,    58,    59,    -1,
    61,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    91,    -1,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,    -1,   347,    -1,   349,    -1,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
   362,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     0,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    58,    59,
    -1,    -1,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    91,    -1,   334,   335,   336,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,   363,    -1,    -1,     0,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,   375,    10,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    44,
    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    10,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,    44,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,   363,    58,    59,    -1,    -1,    -1,    63,    -1,
    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   262,   263,   264,    -1,    91,   267,   268,   269,
    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,    -1,   334,   335,   336,    -1,    -1,   339,
    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,
    44,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
    -1,   361,    -1,   363,    58,    59,    -1,    -1,    -1,    63,
    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,    -1,   268,   269,    -1,   271,    91,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,   342,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    91,    -1,   334,
   335,   336,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,
    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    91,    -1,
   334,   335,   336,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,     0,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    10,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,   375,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    44,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    58,    59,    -1,    -1,    -1,    63,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,     0,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    -1,    -1,    58,    59,    -1,   290,   291,    63,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,    -1,     0,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,    10,   349,    -1,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,   375,   267,   268,   269,    -1,   271,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    58,    59,    -1,   290,   291,    63,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,     0,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    44,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    58,    59,    -1,    -1,    -1,    63,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,     0,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    10,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,   375,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,   334,
   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,     0,   361,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    58,    59,    -1,   290,   291,    63,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,     0,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    10,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,   375,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    44,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    58,    59,    -1,    -1,    -1,    63,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,     0,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,   375,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,   334,
   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,     0,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    10,   361,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    58,    59,    -1,   290,   291,    63,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,   355,   356,   357,   358,   359,     0,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    44,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    58,    59,    -1,    -1,    -1,    63,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,    -1,     0,   351,    -1,    -1,
    -1,   355,   356,   357,   358,   359,    10,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,   375,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,   334,
   335,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,     0,   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,
    -1,    10,   357,   358,   359,    -1,   361,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    58,
    59,    -1,    -1,    -1,    63,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
   334,   335,     0,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    10,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,    -1,   357,   358,   359,    -1,   361,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,   375,    -1,   267,   268,   269,    44,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    58,    59,    -1,    -1,    -1,    63,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,     0,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,    10,   357,   358,   359,    -1,   361,    -1,   363,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,   375,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    -1,    -1,    44,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    58,    59,    -1,    -1,    -1,    63,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    44,   262,   263,   264,    -1,    -1,   267,
   268,   269,    -1,   271,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    63,   281,   282,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,    -1,   330,   331,    -1,    -1,     0,    -1,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    10,   345,    -1,   347,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
   358,   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,
    44,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    -1,   271,    58,    59,    -1,    -1,    -1,    63,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   290,   291,   763,   293,   294,   295,   296,   297,
    -1,   770,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,
    -1,    -1,   781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,
     0,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
   358,   262,   263,   264,    -1,   363,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,
   281,   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    58,    59,
    -1,    -1,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
   331,    -1,    -1,    -1,    -1,    -1,    -1,     0,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,    -1,    -1,
    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,   262,   263,
   264,    44,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,   281,   282,   968,
    63,   970,    -1,   972,    -1,    -1,   290,   291,   977,   293,
   294,   295,   296,   297,    -1,   984,    -1,    -1,    -1,    -1,
    -1,   305,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,    -1,   363,
    -1,    58,    59,    -1,    -1,    -1,    63,  1056,    -1,    -1,
    -1,   375,    -1,  1062,    -1,  1064,    -1,    -1,  1067,    -1,
    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    -1,    -1,     0,    -1,  1085,    -1,    -1,    -1,
    -1,   281,   282,    -1,    10,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
   330,   331,    58,    59,    -1,    -1,    -1,    63,    -1,   339,
    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,   358,   262,
   263,   264,     0,   363,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    10,    -1,    -1,   375,    -1,    -1,   281,   282,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,   325,   326,    -1,    63,    -1,   330,   331,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,   262,   263,   264,     0,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,    10,    -1,
   363,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,   375,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,   325,   326,
    -1,    63,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,
   347,    -1,    -1,    -1,     0,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    10,   271,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   375,    -1,
    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    63,    -1,   325,
   326,    -1,    -1,    -1,   330,   331,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,   375,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    63,    -1,   325,   326,    -1,
    -1,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,   347,
   262,   263,   264,    -1,    -1,   267,   268,   269,    10,   271,
    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    63,    -1,   325,   326,    -1,    -1,    -1,   330,   331,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,     0,   347,   262,   263,   264,    -1,
    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    63,    -1,   325,
   326,    -1,    -1,    -1,   330,   331,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,   375,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,   325,   326,    -1,
    -1,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,   347,
   262,   263,   264,    -1,    -1,   267,   268,   269,    10,   271,
    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,   330,   331,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,     0,   347,   262,   263,   264,    -1,
    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,   375,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,   347,
   262,   263,   264,    -1,    -1,   267,   268,   269,    10,   271,
    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,     0,   347,   262,   263,   264,    -1,
    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,   375,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,   347,
   262,   263,   264,    -1,    -1,   267,   268,   269,    10,   271,
    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,     0,   347,   262,   263,   264,    -1,
    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,   375,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,   347,
   262,   263,   264,    -1,    -1,   267,   268,   269,    10,   271,
    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,     0,    -1,    -1,
    -1,    -1,    44,   305,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,    44,    -1,   345,    -1,   347,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    59,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,     0,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    44,   347,    -1,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    -1,   271,    58,    59,    -1,   363,     0,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    10,   375,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,   363,     0,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    10,   375,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,   262,
   263,   264,    -1,   305,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    44,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    59,    -1,   339,    -1,    63,
   342,    -1,   305,   345,    -1,   347,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,   375,    -1,    -1,   339,    -1,    -1,   342,
    -1,     0,   345,    -1,   347,    -1,    -1,    -1,   262,   263,
   264,    10,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,   375,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,   281,
   282,   345,    91,   347,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,    -1,    -1,     0,    -1,   363,
    -1,    -1,    -1,   305,    -1,    -1,    -1,    10,    -1,    -1,
    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,    44,    -1,   345,    -1,   347,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    59,   271,    -1,    -1,
    63,   363,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,   375,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,     0,
   334,   335,   336,    -1,    -1,   339,    -1,    -1,   342,    10,
    -1,   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,    -1,   363,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,    59,    -1,
     0,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    44,   334,   335,   336,    -1,    -1,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    59,
   349,    61,   351,    63,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    -1,    -1,    -1,    -1,     0,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    44,   334,   335,   336,    -1,    -1,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,    59,   349,    61,   351,    63,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    91,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    44,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,
    -1,   271,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
   280,   342,    -1,    -1,   345,    -1,   347,    -1,    -1,     0,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    10,
    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,    44,   334,   335,   336,    -1,    -1,    -1,
    -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,    59,   349,
    61,   351,    63,   353,   354,   355,   356,   357,   358,   359,
    -1,   361,   362,   363,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,    -1,   338,   262,   263,   264,   342,    -1,
    -1,   268,   269,    44,   271,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,    59,   363,
    61,    -1,    63,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    91,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
    -1,   338,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,
    44,    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    59,   363,    61,    -1,    63,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,   338,    -1,    -1,
    -1,   342,    -1,    -1,    44,    -1,    -1,    -1,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    59,
   361,    61,   363,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,   338,   262,   263,
   264,   342,    -1,    -1,   268,   269,    44,   271,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    59,   363,    61,    -1,    63,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,    -1,   338,    -1,    -1,    -1,   342,    -1,
    -1,    -1,    -1,    -1,    -1,   349,    -1,   351,     0,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,    10,   363,
    -1,    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,
    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   290,   291,    44,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,    -1,   334,   335,   336,    -1,   338,    91,
    -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,    -1,   349,
    -1,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
    -1,   361,    -1,   363,     0,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,
   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,    -1,    91,   334,   335,   336,    -1,
   338,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,
    -1,   349,    -1,   351,     0,   353,   354,   355,   356,   357,
   358,   359,    -1,   361,    10,   363,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    44,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    61,    -1,    63,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    91,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    -1,    -1,   334,   335,   336,    -1,   338,    -1,    -1,    -1,
   342,    -1,    -1,    -1,    -1,    44,    -1,   349,    -1,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
    59,   363,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,    -1,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     0,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    10,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    -1,    44,   334,   335,
   336,    -1,   338,    -1,    -1,    -1,   342,    -1,    -1,    -1,
    -1,    -1,    59,   349,    61,   351,    63,   353,   354,   355,
   356,   357,   358,   359,    -1,   361,    -1,   363,    -1,    -1,
    59,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,    -1,   268,   269,    91,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     0,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    44,    -1,   334,   335,
   336,    -1,   338,   262,   263,   264,   342,    -1,    -1,   268,
   269,    59,   271,   349,     0,   351,    -1,   353,   354,   355,
   356,   357,   358,   359,    10,   361,    -1,   363,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    59,    -1,   334,   335,   336,    -1,    -1,
    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,    -1,
   349,    -1,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,   262,   263,   264,    -1,    -1,
    -1,   268,   269,    -1,   271,    -1,     0,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    10,    -1,   267,   268,
   269,    -1,   271,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    59,     0,   334,   335,   336,
    -1,    -1,    -1,    -1,    -1,   342,    10,    -1,    -1,    -1,
    -1,    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,   342,   361,    -1,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,
   268,   269,    -1,   271,   363,    -1,    -1,    -1,    -1,     0,
    -1,    -1,    -1,   281,   282,    59,    -1,    -1,    -1,    10,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    10,   262,   263,   264,     0,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    59,    10,
    -1,    -1,    -1,    -1,   342,   281,   282,   345,    -1,   347,
    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,   363,     0,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    59,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,   363,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    -1,    -1,    44,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   342,    -1,
    -1,   345,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,
   281,    -1,   336,    -1,    -1,    -1,    -1,    -1,   342,   290,
   291,    -1,   293,   294,   295,   296,   297,   262,   263,   264,
    -1,    -1,   267,   268,   269,    44,   271,    -1,    -1,   363,
    -1,   262,   263,   264,    -1,    -1,   281,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,   342,   293,   294,   295,   296,    -1,    -1,   262,   263,
   264,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   342,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,   257,   258,
   259,   342,   261,    -1,    -1,    -1,   265,   266,   363,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,   363,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,   342,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,    -1,    -1,   317,   363,
    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,
    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,    -1,   257,   258,
   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,    -1,    -1,   317,    59,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,
    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,    -1,   257,   258,
   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,
   299,   300,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,
    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   257,   258,   259,
   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,
    -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   257,   258,   259,   260,
   261,   262,   263,   264,    -1,    -1,   267,   268,   269,   270,
   271,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,    -1,   315,   316,    -1,   318,   319,   320,
   321,   322,   323,   324,    -1,    -1,   327,   328,    -1,    -1,
    -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,   257,
   258,   259,   260,   261,   262,   263,   264,    -1,    -1,   267,
   268,   269,   270,   271,    -1,   386,   274,   275,   276,   277,
   278,   279,   280,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,    -1,    -1,   364,    -1,    -1,    -1,
    -1,    -1,   257,   258,   259,   260,   261,   262,   263,   264,
    -1,    -1,   267,   268,   269,   270,   271,    -1,   386,   274,
   275,   276,   277,   278,   279,   280,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
    -1,   306,   307,   308,   309,    -1,   311,    -1,    -1,    -1,
   315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
    -1,    -1,   327,   328,    -1,    -1,    -1,   332,   333,   334,
   335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
   365,    -1,    -1,    -1,    -1,   257,   258,   259,   260,   261,
   262,   263,   264,    -1,    -1,   267,   268,   269,   270,   271,
    -1,   386,   274,   275,   276,   277,   278,   279,   280,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
   302,   303,   304,    -1,   306,   307,   308,    -1,    -1,   311,
    -1,    -1,    -1,   315,   316,    -1,   318,   319,   320,   321,
   322,   323,   324,    -1,    -1,   327,   328,    -1,    -1,    -1,
   332,   333,   334,   335,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
    -1,    -1,   364,   365,    -1,    -1,    -1,    -1,   257,   258,
   259,   260,   261,   262,   263,   264,    -1,    -1,   267,   268,
   269,   270,   271,    -1,   386,   274,   275,   276,   277,   278,
   279,   280,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,    -1,   306,   307,   308,
    -1,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,    -1,    -1,   364,    -1,    -1,    -1,    -1,
    -1,    -1,   256,   257,   258,   259,   260,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,   386,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   256,   257,   258,   259,   260,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,   298,   299,    -1,   301,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   256,   257,   258,   259,   260,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,   298,   299,    -1,   301,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,   350,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,   350,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,   350,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,    -1,    -1,   350,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,   260,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,   298,   299,   300,   301,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   257,   258,   259,   260,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,   341,    -1,   343,   344,    -1,   346,
    -1,    -1,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,
    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,
   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,   257,   258,
   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,
    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,
    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,    -1,
   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,
    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,
    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,
   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
    -1,   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,   341,    -1,
   343,   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,
    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,
    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,    -1,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,    -1,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,    -1,   314,    -1,    -1,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,
    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
   348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,
   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,   257,   258,
   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,    -1,    -1,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,
    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,    -1,    -1,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,    -1,    -1,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,    -1,   314,    -1,    -1,   317,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,
    -1,   343,   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,
    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,
   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
    -1,   314,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,
   343,   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,
    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   307,   308,    -1,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,    -1,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   307,   308,   364,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   307,   308,   364,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   307,   308,   364,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   307,   308,   364,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   307,   308,   364,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   307,   308,   364,    -1,   311,    -1,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   307,   308,
   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,
   319,   320,   321,   322,   323,   324,    -1,    -1,   327,   328,
    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   348,
   349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,    -1,    -1,   364,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,
    };

  /** maps symbol value to printable name.
      @see #yyExpecting
    */
  protected static final String[] yyNames = {
    "end-of-file",null,null,null,null,null,null,null,null,null,"'\\n'",
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"' '",null,null,null,null,null,
    null,null,null,null,null,null,"','",null,null,null,null,null,null,
    null,null,null,null,null,null,null,"':'","';'",null,"'='",null,"'?'",
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,
    "kCLASS","kMODULE","kDEF","kUNDEF","kBEGIN","kRESCUE","kENSURE",
    "kEND","kIF","kUNLESS","kTHEN","kELSIF","kELSE","kCASE","kWHEN",
    "kWHILE","kUNTIL","kFOR","kBREAK","kNEXT","kREDO","kRETRY","kIN",
    "kDO","kDO_COND","kDO_BLOCK","kRETURN","kYIELD","kSUPER","kSELF",
    "kNIL","kTRUE","kFALSE","kAND","kOR","kNOT","kIF_MOD","kUNLESS_MOD",
    "kWHILE_MOD","kUNTIL_MOD","kRESCUE_MOD","kALIAS","kDEFINED","klBEGIN",
    "klEND","k__LINE__","k__FILE__","k__ENCODING__","kDO_LAMBDA",
    "kSIGNAL","tIDENTIFIER","tFID","tGVAR","tIVAR","tCONSTANT","tCVAR",
    "tLABEL","tCHAR","tUPLUS","tUMINUS","tUMINUS_NUM","tPOW","tCMP","tEQ",
    "tEQQ","tNEQ","tGEQ","tLEQ","tANDOP","tOROP","tMATCH","tNMATCH",
    "tDOT","tDOT2","tDOT3","tAREF","tASET","tLSHFT","tRSHFT","tCOLON2",
    "tCOLON3","tOP_ASGN","tASSOC","tLPAREN","tLPAREN2","tRPAREN",
    "tLPAREN_ARG","tLBRACK","tRBRACK","tLBRACE","tLBRACE_ARG","tSTAR",
    "tSTAR2","tAMPER","tAMPER2","tTILDE","tPERCENT","tDIVIDE","tPLUS",
    "tMINUS","tLT","tGT","tPIPE","tBANG","tCARET","tLCURLY","tRCURLY",
    "tBACK_REF2","tSYMBEG","tSTRING_BEG","tXSTRING_BEG","tREGEXP_BEG",
    "tWORDS_BEG","tQWORDS_BEG","tSTRING_DBEG","tSTRING_DVAR",
    "tSTRING_END","tLAMBDA","tLAMBEG","tNTH_REF","tBACK_REF",
    "tSTRING_CONTENT","tINTEGER","tIMAGINARY","tFLOAT","tRATIONAL",
    "tREGEXP_END","tSYMBOLS_BEG","tQSYMBOLS_BEG","tDSTAR","tSTRING_DEND",
    "tLABEL_END","tLOWEST",
    };

  /** printable rules for debugging.
    */
  protected static final String [] yyRule = {
    "$accept : program",
    "$$1 :",
    "program : $$1 top_compstmt",
    "top_compstmt : top_stmts opt_terms",
    "top_stmts : none",
    "top_stmts : top_stmt",
    "top_stmts : top_stmts terms top_stmt",
    "top_stmts : error top_stmt",
    "top_stmt : stmt",
    "$$2 :",
    "top_stmt : klBEGIN $$2 tLCURLY top_compstmt tRCURLY",
    "bodystmt : compstmt opt_rescue opt_else opt_ensure",
    "compstmt : stmts opt_terms",
    "stmts : none",
    "stmts : stmt_or_begin",
    "stmts : stmts terms stmt_or_begin",
    "stmts : error stmt",
    "stmt_or_begin : stmt",
    "$$3 :",
    "stmt_or_begin : kBEGIN $$3 tLCURLY top_compstmt tRCURLY",
    "$$4 :",
    "stmt : kALIAS fitem $$4 fitem",
    "stmt : kALIAS tGVAR tGVAR",
    "stmt : kALIAS tGVAR tBACK_REF",
    "stmt : kALIAS tGVAR tNTH_REF",
    "stmt : kUNDEF undef_list",
    "stmt : stmt kIF_MOD expr_value",
    "stmt : stmt kUNLESS_MOD expr_value",
    "stmt : stmt kWHILE_MOD expr_value",
    "stmt : stmt kUNTIL_MOD expr_value",
    "stmt : stmt kRESCUE_MOD stmt",
    "stmt : klEND tLCURLY compstmt tRCURLY",
    "stmt : command_asgn",
    "stmt : mlhs '=' command_call",
    "stmt : var_lhs tOP_ASGN command_call",
    "stmt : primary_value '[' opt_call_args rbracket tOP_ASGN command_call",
    "stmt : primary_value tDOT tIDENTIFIER tOP_ASGN command_call",
    "stmt : primary_value tDOT tCONSTANT tOP_ASGN command_call",
    "stmt : primary_value tCOLON2 tCONSTANT tOP_ASGN command_call",
    "stmt : primary_value tCOLON2 tIDENTIFIER tOP_ASGN command_call",
    "stmt : backref tOP_ASGN command_call",
    "stmt : lhs '=' mrhs",
    "stmt : mlhs '=' mrhs_arg",
    "stmt : expr",
    "command_asgn : lhs '=' command_call",
    "command_asgn : lhs '=' command_asgn",
    "expr : command_call",
    "expr : expr kAND expr",
    "expr : expr kOR expr",
    "expr : kNOT opt_nl expr",
    "expr : tBANG command_call",
    "expr : arg",
    "expr_value : expr",
    "command_call : command",
    "command_call : block_command",
    "block_command : block_call",
    "block_command : block_call dot_or_colon operation2 command_args",
    "$$5 :",
    "cmd_brace_block : tLBRACE_ARG $$5 opt_block_param compstmt tRCURLY",
    "fcall : operation",
    "command : fcall command_args",
    "command : fcall command_args cmd_brace_block",
    "command : primary_value tDOT operation2 command_args",
    "command : primary_value tDOT operation2 command_args cmd_brace_block",
    "command : primary_value tCOLON2 operation2 command_args",
    "command : primary_value tCOLON2 operation2 command_args cmd_brace_block",
    "command : kSUPER command_args",
    "command : kYIELD command_args",
    "command : kRETURN call_args",
    "command : kBREAK call_args",
    "command : kNEXT call_args",
    "mlhs : mlhs_basic",
    "mlhs : tLPAREN mlhs_inner rparen",
    "mlhs_inner : mlhs_basic",
    "mlhs_inner : tLPAREN mlhs_inner rparen",
    "mlhs_basic : mlhs_head",
    "mlhs_basic : mlhs_head mlhs_item",
    "mlhs_basic : mlhs_head tSTAR mlhs_node",
    "mlhs_basic : mlhs_head tSTAR mlhs_node ',' mlhs_post",
    "mlhs_basic : mlhs_head tSTAR",
    "mlhs_basic : mlhs_head tSTAR ',' mlhs_post",
    "mlhs_basic : tSTAR mlhs_node",
    "mlhs_basic : tSTAR mlhs_node ',' mlhs_post",
    "mlhs_basic : tSTAR",
    "mlhs_basic : tSTAR ',' mlhs_post",
    "mlhs_item : mlhs_node",
    "mlhs_item : tLPAREN mlhs_inner rparen",
    "mlhs_head : mlhs_item ','",
    "mlhs_head : mlhs_head mlhs_item ','",
    "mlhs_post : mlhs_item",
    "mlhs_post : mlhs_post ',' mlhs_item",
    "mlhs_node : tIDENTIFIER",
    "mlhs_node : tIVAR",
    "mlhs_node : tGVAR",
    "mlhs_node : tCONSTANT",
    "mlhs_node : tCVAR",
    "mlhs_node : kNIL",
    "mlhs_node : kSELF",
    "mlhs_node : kTRUE",
    "mlhs_node : kFALSE",
    "mlhs_node : k__FILE__",
    "mlhs_node : k__LINE__",
    "mlhs_node : k__ENCODING__",
    "mlhs_node : primary_value '[' opt_call_args rbracket",
    "mlhs_node : primary_value tDOT tIDENTIFIER",
    "mlhs_node : primary_value tCOLON2 tIDENTIFIER",
    "mlhs_node : primary_value tDOT tCONSTANT",
    "mlhs_node : primary_value tCOLON2 tCONSTANT",
    "mlhs_node : tCOLON3 tCONSTANT",
    "mlhs_node : backref",
    "lhs : tIDENTIFIER",
    "lhs : tIVAR",
    "lhs : tGVAR",
    "lhs : tCONSTANT",
    "lhs : tCVAR",
    "lhs : kNIL",
    "lhs : kSELF",
    "lhs : kTRUE",
    "lhs : kFALSE",
    "lhs : k__FILE__",
    "lhs : k__LINE__",
    "lhs : k__ENCODING__",
    "lhs : primary_value '[' opt_call_args rbracket",
    "lhs : primary_value tDOT tIDENTIFIER",
    "lhs : primary_value tCOLON2 tIDENTIFIER",
    "lhs : primary_value tDOT tCONSTANT",
    "lhs : primary_value tCOLON2 tCONSTANT",
    "lhs : tCOLON3 tCONSTANT",
    "lhs : backref",
    "cname : tIDENTIFIER",
    "cname : tCONSTANT",
    "cpath : tCOLON3 cname",
    "cpath : cname",
    "cpath : primary_value tCOLON2 cname",
    "fname : tIDENTIFIER",
    "fname : tCONSTANT",
    "fname : tFID",
    "fname : op",
    "fname : reswords",
    "fsym : fname",
    "fsym : symbol",
    "fitem : fsym",
    "fitem : dsym",
    "undef_list : fitem",
    "$$6 :",
    "undef_list : undef_list ',' $$6 fitem",
    "op : tPIPE",
    "op : tCARET",
    "op : tAMPER2",
    "op : tCMP",
    "op : tEQ",
    "op : tEQQ",
    "op : tMATCH",
    "op : tNMATCH",
    "op : tGT",
    "op : tGEQ",
    "op : tLT",
    "op : tLEQ",
    "op : tNEQ",
    "op : tLSHFT",
    "op : tRSHFT",
    "op : tDSTAR",
    "op : tPLUS",
    "op : tMINUS",
    "op : tSTAR2",
    "op : tSTAR",
    "op : tDIVIDE",
    "op : tPERCENT",
    "op : tPOW",
    "op : tBANG",
    "op : tTILDE",
    "op : tUPLUS",
    "op : tUMINUS",
    "op : tAREF",
    "op : tASET",
    "op : tBACK_REF2",
    "reswords : k__LINE__",
    "reswords : k__FILE__",
    "reswords : k__ENCODING__",
    "reswords : klBEGIN",
    "reswords : klEND",
    "reswords : kALIAS",
    "reswords : kAND",
    "reswords : kBEGIN",
    "reswords : kBREAK",
    "reswords : kCASE",
    "reswords : kCLASS",
    "reswords : kDEF",
    "reswords : kDEFINED",
    "reswords : kDO",
    "reswords : kELSE",
    "reswords : kELSIF",
    "reswords : kEND",
    "reswords : kENSURE",
    "reswords : kFALSE",
    "reswords : kFOR",
    "reswords : kIN",
    "reswords : kMODULE",
    "reswords : kNEXT",
    "reswords : kNIL",
    "reswords : kNOT",
    "reswords : kOR",
    "reswords : kREDO",
    "reswords : kRESCUE",
    "reswords : kRETRY",
    "reswords : kRETURN",
    "reswords : kSELF",
    "reswords : kSUPER",
    "reswords : kTHEN",
    "reswords : kTRUE",
    "reswords : kUNDEF",
    "reswords : kWHEN",
    "reswords : kYIELD",
    "reswords : kIF_MOD",
    "reswords : kUNLESS_MOD",
    "reswords : kSIGNAL",
    "reswords : kWHILE_MOD",
    "reswords : kUNTIL_MOD",
    "reswords : kRESCUE_MOD",
    "arg : lhs '=' arg",
    "arg : lhs '=' arg kRESCUE_MOD arg",
    "arg : var_lhs tOP_ASGN arg",
    "arg : var_lhs tOP_ASGN arg kRESCUE_MOD arg",
    "arg : primary_value '[' opt_call_args rbracket tOP_ASGN arg",
    "arg : primary_value tDOT tIDENTIFIER tOP_ASGN arg",
    "arg : primary_value tDOT tCONSTANT tOP_ASGN arg",
    "arg : primary_value tCOLON2 tIDENTIFIER tOP_ASGN arg",
    "arg : primary_value tCOLON2 tCONSTANT tOP_ASGN arg",
    "arg : tCOLON3 tCONSTANT tOP_ASGN arg",
    "arg : backref tOP_ASGN arg",
    "arg : arg tDOT2 arg",
    "arg : arg tDOT3 arg",
    "arg : arg tPLUS arg",
    "arg : arg tMINUS arg",
    "arg : arg tSTAR2 arg",
    "arg : arg tDIVIDE arg",
    "arg : arg tPERCENT arg",
    "arg : arg tPOW arg",
    "arg : tUMINUS_NUM simple_numeric tPOW arg",
    "arg : tUPLUS arg",
    "arg : tUMINUS arg",
    "arg : arg tPIPE arg",
    "arg : arg tCARET arg",
    "arg : arg tAMPER2 arg",
    "arg : arg tCMP arg",
    "arg : arg tGT arg",
    "arg : arg tGEQ arg",
    "arg : arg tLT arg",
    "arg : arg tLEQ arg",
    "arg : arg tEQ arg",
    "arg : arg tEQQ arg",
    "arg : arg tNEQ arg",
    "arg : arg tMATCH arg",
    "arg : arg tNMATCH arg",
    "arg : tBANG arg",
    "arg : tTILDE arg",
    "arg : arg tLSHFT arg",
    "arg : arg tRSHFT arg",
    "arg : arg tANDOP arg",
    "arg : arg tOROP arg",
    "arg : kDEFINED opt_nl arg",
    "arg : arg '?' arg opt_nl ':' arg",
    "arg : primary",
    "arg_value : arg",
    "aref_args : none",
    "aref_args : args trailer",
    "aref_args : args ',' assocs trailer",
    "aref_args : assocs trailer",
    "paren_args : tLPAREN2 opt_call_args rparen",
    "opt_paren_args : none",
    "opt_paren_args : paren_args",
    "opt_call_args : none",
    "opt_call_args : call_args",
    "opt_call_args : args ','",
    "opt_call_args : args ',' assocs ','",
    "opt_call_args : assocs ','",
    "call_args : command",
    "call_args : args opt_block_arg",
    "call_args : assocs opt_block_arg",
    "call_args : args ',' assocs opt_block_arg",
    "call_args : block_arg",
    "$$7 :",
    "command_args : $$7 call_args",
    "block_arg : tAMPER arg_value",
    "opt_block_arg : ',' block_arg",
    "opt_block_arg : none_block_pass",
    "args : arg_value",
    "args : tSTAR arg_value",
    "args : args ',' arg_value",
    "args : args ',' tSTAR arg_value",
    "mrhs_arg : mrhs",
    "mrhs_arg : arg_value",
    "mrhs : args ',' arg_value",
    "mrhs : args ',' tSTAR arg_value",
    "mrhs : tSTAR arg_value",
    "primary : literal",
    "primary : strings",
    "primary : xstring",
    "primary : regexp",
    "primary : words",
    "primary : qwords",
    "primary : symbols",
    "primary : qsymbols",
    "primary : var_ref",
    "primary : backref",
    "primary : tFID",
    "primary : kBEGIN bodystmt kEND",
    "$$8 :",
    "primary : tLPAREN_ARG $$8 rparen",
    "$$9 :",
    "primary : tLPAREN_ARG expr $$9 rparen",
    "primary : tLPAREN compstmt tRPAREN",
    "primary : primary_value tCOLON2 tCONSTANT",
    "primary : tCOLON3 tCONSTANT",
    "primary : tLBRACK aref_args tRBRACK",
    "primary : tLBRACE assoc_list tRCURLY",
    "primary : kRETURN",
    "primary : kYIELD tLPAREN2 call_args rparen",
    "primary : kYIELD tLPAREN2 rparen",
    "primary : kYIELD",
    "primary : kDEFINED opt_nl tLPAREN2 expr rparen",
    "primary : kNOT tLPAREN2 expr rparen",
    "primary : kNOT tLPAREN2 rparen",
    "primary : fcall brace_block",
    "primary : method_call",
    "primary : method_call brace_block",
    "primary : tLAMBDA lambda",
    "primary : kIF expr_value then compstmt if_tail kEND",
    "primary : kUNLESS expr_value then compstmt opt_else kEND",
    "$$10 :",
    "$$11 :",
    "primary : kWHILE $$10 expr_value do $$11 compstmt kEND",
    "$$12 :",
    "$$13 :",
    "primary : kUNTIL $$12 expr_value do $$13 compstmt kEND",
    "primary : kCASE expr_value opt_terms case_body kEND",
    "primary : kCASE opt_terms case_body kEND",
    "$$14 :",
    "$$15 :",
    "primary : kFOR for_var kIN $$14 expr_value do $$15 compstmt kEND",
    "$$16 :",
    "primary : kCLASS cpath superclass $$16 bodystmt kEND",
    "$$17 :",
    "$$18 :",
    "primary : kCLASS tLSHFT expr $$17 term $$18 bodystmt kEND",
    "$$19 :",
    "primary : kMODULE cpath $$19 bodystmt kEND",
    "$$20 :",
    "primary : kDEF fname $$20 f_arglist bodystmt kEND",
    "$$21 :",
    "$$22 :",
    "primary : kDEF singleton dot_or_colon $$21 fname $$22 f_arglist bodystmt kEND",
    "primary : kBREAK",
    "primary : kNEXT",
    "primary : kREDO",
    "primary : kRETRY",
    "primary : kSIGNAL compstmt kEND",
    "primary_value : primary",
    "then : term",
    "then : kTHEN",
    "then : term kTHEN",
    "do : term",
    "do : kDO_COND",
    "if_tail : opt_else",
    "if_tail : kELSIF expr_value then compstmt if_tail",
    "opt_else : none",
    "opt_else : kELSE compstmt",
    "for_var : lhs",
    "for_var : mlhs",
    "f_marg : f_norm_arg",
    "f_marg : tLPAREN f_margs rparen",
    "f_marg_list : f_marg",
    "f_marg_list : f_marg_list ',' f_marg",
    "f_margs : f_marg_list",
    "f_margs : f_marg_list ',' tSTAR f_norm_arg",
    "f_margs : f_marg_list ',' tSTAR f_norm_arg ',' f_marg_list",
    "f_margs : f_marg_list ',' tSTAR",
    "f_margs : f_marg_list ',' tSTAR ',' f_marg_list",
    "f_margs : tSTAR f_norm_arg",
    "f_margs : tSTAR f_norm_arg ',' f_marg_list",
    "f_margs : tSTAR",
    "f_margs : tSTAR ',' f_marg_list",
    "block_args_tail : f_block_kwarg ',' f_kwrest opt_f_block_arg",
    "block_args_tail : f_block_kwarg opt_f_block_arg",
    "block_args_tail : f_kwrest opt_f_block_arg",
    "block_args_tail : f_block_arg",
    "opt_block_args_tail : ',' block_args_tail",
    "opt_block_args_tail :",
    "block_param : f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail",
    "block_param : f_arg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_arg ','",
    "block_param : f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_arg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_block_optarg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_arg opt_block_args_tail",
    "block_param : f_rest_arg opt_block_args_tail",
    "block_param : f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : block_args_tail",
    "opt_block_param : none",
    "opt_block_param : block_param_def",
    "block_param_def : tPIPE opt_bv_decl tPIPE",
    "block_param_def : tOROP",
    "block_param_def : tPIPE block_param opt_bv_decl tPIPE",
    "opt_bv_decl : opt_nl",
    "opt_bv_decl : opt_nl ';' bv_decls opt_nl",
    "bv_decls : bvar",
    "bv_decls : bv_decls ',' bvar",
    "bvar : tIDENTIFIER",
    "bvar : f_bad_arg",
    "$$23 :",
    "lambda : $$23 f_larglist lambda_body",
    "f_larglist : tLPAREN2 f_args opt_bv_decl tRPAREN",
    "f_larglist : f_args",
    "lambda_body : tLAMBEG compstmt tRCURLY",
    "lambda_body : kDO_LAMBDA compstmt kEND",
    "$$24 :",
    "do_block : kDO_BLOCK $$24 opt_block_param compstmt kEND",
    "block_call : command do_block",
    "block_call : block_call dot_or_colon operation2 opt_paren_args",
    "block_call : block_call dot_or_colon operation2 opt_paren_args brace_block",
    "block_call : block_call dot_or_colon operation2 command_args do_block",
    "method_call : fcall paren_args",
    "method_call : primary_value tDOT operation2 opt_paren_args",
    "method_call : primary_value tCOLON2 operation2 paren_args",
    "method_call : primary_value tCOLON2 operation3",
    "method_call : primary_value tDOT paren_args",
    "method_call : primary_value tCOLON2 paren_args",
    "method_call : kSUPER paren_args",
    "method_call : kSUPER",
    "method_call : primary_value '[' opt_call_args rbracket",
    "$$25 :",
    "brace_block : tLCURLY $$25 opt_block_param compstmt tRCURLY",
    "$$26 :",
    "brace_block : kDO $$26 opt_block_param compstmt kEND",
    "case_body : kWHEN args then compstmt cases",
    "cases : opt_else",
    "cases : case_body",
    "opt_rescue : kRESCUE exc_list exc_var then compstmt opt_rescue",
    "opt_rescue :",
    "exc_list : arg_value",
    "exc_list : mrhs",
    "exc_list : none",
    "exc_var : tASSOC lhs",
    "exc_var : none",
    "opt_ensure : kENSURE compstmt",
    "opt_ensure : none",
    "literal : numeric",
    "literal : symbol",
    "literal : dsym",
    "strings : string",
    "string : tCHAR",
    "string : string1",
    "string : string string1",
    "string1 : tSTRING_BEG string_contents tSTRING_END",
    "xstring : tXSTRING_BEG xstring_contents tSTRING_END",
    "regexp : tREGEXP_BEG regexp_contents tREGEXP_END",
    "words : tWORDS_BEG ' ' tSTRING_END",
    "words : tWORDS_BEG word_list tSTRING_END",
    "word_list :",
    "word_list : word_list word ' '",
    "word : string_content",
    "word : word string_content",
    "symbols : tSYMBOLS_BEG ' ' tSTRING_END",
    "symbols : tSYMBOLS_BEG symbol_list tSTRING_END",
    "symbol_list :",
    "symbol_list : symbol_list word ' '",
    "qwords : tQWORDS_BEG ' ' tSTRING_END",
    "qwords : tQWORDS_BEG qword_list tSTRING_END",
    "qsymbols : tQSYMBOLS_BEG ' ' tSTRING_END",
    "qsymbols : tQSYMBOLS_BEG qsym_list tSTRING_END",
    "qword_list :",
    "qword_list : qword_list tSTRING_CONTENT ' '",
    "qsym_list :",
    "qsym_list : qsym_list tSTRING_CONTENT ' '",
    "string_contents :",
    "string_contents : string_contents string_content",
    "xstring_contents :",
    "xstring_contents : xstring_contents string_content",
    "regexp_contents :",
    "regexp_contents : regexp_contents string_content",
    "string_content : tSTRING_CONTENT",
    "$$27 :",
    "string_content : tSTRING_DVAR $$27 string_dvar",
    "$$28 :",
    "$$29 :",
    "string_content : tSTRING_DBEG $$28 $$29 compstmt tRCURLY",
    "string_dvar : tGVAR",
    "string_dvar : tIVAR",
    "string_dvar : tCVAR",
    "string_dvar : backref",
    "symbol : tSYMBEG sym",
    "sym : fname",
    "sym : tIVAR",
    "sym : tGVAR",
    "sym : tCVAR",
    "dsym : tSYMBEG xstring_contents tSTRING_END",
    "numeric : simple_numeric",
    "numeric : tUMINUS_NUM simple_numeric",
    "simple_numeric : tINTEGER",
    "simple_numeric : tFLOAT",
    "simple_numeric : tRATIONAL",
    "simple_numeric : tIMAGINARY",
    "var_ref : tIDENTIFIER",
    "var_ref : tIVAR",
    "var_ref : tGVAR",
    "var_ref : tCONSTANT",
    "var_ref : tCVAR",
    "var_ref : kNIL",
    "var_ref : kSELF",
    "var_ref : kTRUE",
    "var_ref : kFALSE",
    "var_ref : k__FILE__",
    "var_ref : k__LINE__",
    "var_ref : k__ENCODING__",
    "var_lhs : tIDENTIFIER",
    "var_lhs : tIVAR",
    "var_lhs : tGVAR",
    "var_lhs : tCONSTANT",
    "var_lhs : tCVAR",
    "var_lhs : kNIL",
    "var_lhs : kSELF",
    "var_lhs : kTRUE",
    "var_lhs : kFALSE",
    "var_lhs : k__FILE__",
    "var_lhs : k__LINE__",
    "var_lhs : k__ENCODING__",
    "backref : tNTH_REF",
    "backref : tBACK_REF",
    "superclass : term",
    "$$30 :",
    "superclass : tLT $$30 expr_value term",
    "superclass : error term",
    "f_arglist : tLPAREN2 f_args rparen",
    "$$31 :",
    "f_arglist : $$31 f_args term",
    "args_tail : f_kwarg ',' f_kwrest opt_f_block_arg",
    "args_tail : f_kwarg opt_f_block_arg",
    "args_tail : f_kwrest opt_f_block_arg",
    "args_tail : f_block_arg",
    "opt_args_tail : ',' args_tail",
    "opt_args_tail :",
    "f_args : f_arg ',' f_optarg ',' f_rest_arg opt_args_tail",
    "f_args : f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_arg ',' f_optarg opt_args_tail",
    "f_args : f_arg ',' f_optarg ',' f_arg opt_args_tail",
    "f_args : f_arg ',' f_rest_arg opt_args_tail",
    "f_args : f_arg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_arg opt_args_tail",
    "f_args : f_optarg ',' f_rest_arg opt_args_tail",
    "f_args : f_optarg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_optarg opt_args_tail",
    "f_args : f_optarg ',' f_arg opt_args_tail",
    "f_args : f_rest_arg opt_args_tail",
    "f_args : f_rest_arg ',' f_arg opt_args_tail",
    "f_args : args_tail",
    "f_args :",
    "f_bad_arg : tCONSTANT",
    "f_bad_arg : tIVAR",
    "f_bad_arg : tGVAR",
    "f_bad_arg : tCVAR",
    "f_norm_arg : f_bad_arg",
    "f_norm_arg : tIDENTIFIER",
    "f_arg_item : f_norm_arg",
    "f_arg_item : tLPAREN f_margs rparen",
    "f_arg : f_arg_item",
    "f_arg : f_arg ',' f_arg_item",
    "f_label : tLABEL",
    "f_kw : f_label arg_value",
    "f_kw : f_label",
    "f_block_kw : f_label primary_value",
    "f_block_kw : f_label",
    "f_block_kwarg : f_block_kw",
    "f_block_kwarg : f_block_kwarg ',' f_block_kw",
    "f_kwarg : f_kw",
    "f_kwarg : f_kwarg ',' f_kw",
    "kwrest_mark : tPOW",
    "kwrest_mark : tDSTAR",
    "f_kwrest : kwrest_mark tIDENTIFIER",
    "f_kwrest : kwrest_mark",
    "f_opt : f_norm_arg '=' arg_value",
    "f_block_opt : tIDENTIFIER '=' primary_value",
    "f_block_optarg : f_block_opt",
    "f_block_optarg : f_block_optarg ',' f_block_opt",
    "f_optarg : f_opt",
    "f_optarg : f_optarg ',' f_opt",
    "restarg_mark : tSTAR2",
    "restarg_mark : tSTAR",
    "f_rest_arg : restarg_mark tIDENTIFIER",
    "f_rest_arg : restarg_mark",
    "blkarg_mark : tAMPER2",
    "blkarg_mark : tAMPER",
    "f_block_arg : blkarg_mark tIDENTIFIER",
    "opt_f_block_arg : ',' f_block_arg",
    "opt_f_block_arg :",
    "singleton : var_ref",
    "$$32 :",
    "singleton : tLPAREN2 $$32 expr rparen",
    "assoc_list : none",
    "assoc_list : assocs trailer",
    "assocs : assoc",
    "assocs : assocs ',' assoc",
    "assoc : arg_value tASSOC arg_value",
    "assoc : tLABEL arg_value",
    "assoc : tSTRING_BEG string_contents tLABEL_END arg_value",
    "assoc : tDSTAR arg_value",
    "operation : tIDENTIFIER",
    "operation : tCONSTANT",
    "operation : tFID",
    "operation2 : tIDENTIFIER",
    "operation2 : tCONSTANT",
    "operation2 : tFID",
    "operation2 : op",
    "operation3 : tIDENTIFIER",
    "operation3 : tFID",
    "operation3 : op",
    "dot_or_colon : tDOT",
    "dot_or_colon : tCOLON2",
    "opt_terms :",
    "opt_terms : terms",
    "opt_nl :",
    "opt_nl : '\\n'",
    "rparen : opt_nl tRPAREN",
    "rbracket : opt_nl tRBRACK",
    "trailer :",
    "trailer : '\\n'",
    "trailer : ','",
    "term : ';'",
    "term : '\\n'",
    "terms : term",
    "terms : terms ';'",
    "none :",
    "none_block_pass :",
    };

  protected org.jruby.parser.YYDebug yydebug;

  /** index-checked interface to {@link #yyNames}.
      @param token single character or <tt>%token</tt> value.
      @return token name or <tt>[illegal]</tt> or <tt>[unknown]</tt>.
    */
  public static String yyName (int token) {
    if (token < 0 || token > yyNames.length) return "[illegal]";
    String name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }


  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected String[] yyExpecting (int state) {
    int token, n, len = 0;
    boolean[] ok = new boolean[yyNames.length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    String result[] = new String[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @param yydebug debug message writer implementing <tt>yyDebug</tt>, or <tt>null</tt>.
      @return result of the last reduction, if any.
    */
  public Object yyparse (RubyLexer yyLex, Object ayydebug)
				throws java.io.IOException {
    this.yydebug = (org.jruby.parser.YYDebug) ayydebug;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of {@link #yyparse}.
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as <tt>$$ = yyDefault($1)</tt>, prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for <tt>$1</tt>, or <tt>null</tt>.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @return result of the last reduction, if any.
    */
  public Object yyparse (RubyLexer yyLex) throws java.io.IOException {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0, yyStates[] = new int[yyMax];	// state stack
    Object yyVal = null, yyVals[] = new Object[yyMax];	// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tokens to shift

    yyLoop: for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.length) {			// dynamically increase
        int[] i = new int[yyStates.length+yyMax];
        System.arraycopy(yyStates, 0, i, 0, yyStates.length);
        yyStates = i;
        Object[] o = new Object[yyVals.length+yyMax];
        System.arraycopy(yyVals, 0, o, 0, yyVals.length);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (yydebug != null) yydebug.push(yyState, yyVal);

      yyDiscarded: for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
//            yyToken = yyLex.advance() ? yyLex.token() : 0;
            yyToken = yyLex.nextToken();
            if (yydebug != null)
              yydebug.lex(yyState, yyToken, yyName(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken) {
            if (yydebug != null)
              yydebug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            continue yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              support.yyerror("syntax error", yyExpecting(yyState), yyNames[yyToken]);
              if (yydebug != null) yydebug.error("syntax error");
  
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += yyErrorCode) >= 0 && yyN < yyTable.length
                    && yyCheck[yyN] == yyErrorCode) {
                  if (yydebug != null)
                    yydebug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  continue yyLoop;
                }
                if (yydebug != null) yydebug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (yydebug != null) yydebug.reject();
              support.yyerror("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (yydebug != null) yydebug.reject();
                support.yyerror("irrecoverable syntax error at end-of-file");
              }
              if (yydebug != null)
                yydebug.discard(yyState, yyToken, yyName(yyToken),
  							yyLex.value());
              yyToken = -1;
              continue yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (yydebug != null)
          yydebug.reduce(yyState, yyStates[yyV-1], yyN, yyRule[yyN], yyLen[yyN]);
        switch (yyN) {
// ACTIONS_BEGIN
case 1:
					// line 310 "RubyParser.y"
  {
                  lexer.setState(LexState.EXPR_BEG);
                  support.initTopLocalVariables();
              }
  break;
case 2:
					// line 313 "RubyParser.y"
  {
  /* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
                  if (((Node)yyVals[0+yyTop]) != null) {
                      /* last expression should not be void */
                      if (((Node)yyVals[0+yyTop]) instanceof BlockNode) {
                          support.checkUselessStatement(((BlockNode)yyVals[0+yyTop]).getLast());
                      } else {
                          support.checkUselessStatement(((Node)yyVals[0+yyTop]));
                      }
                  }
                  support.getResult().setAST(support.addRootNode(((Node)yyVals[0+yyTop])));
              }
  break;
case 3:
					// line 326 "RubyParser.y"
  {
                  if (((Node)yyVals[-1+yyTop]) instanceof BlockNode) {
                      support.checkUselessStatements(((BlockNode)yyVals[-1+yyTop]));
                  }
                  yyVal = ((Node)yyVals[-1+yyTop]);
              }
  break;
case 5:
					// line 334 "RubyParser.y"
  {
                    yyVal = support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop])));
              }
  break;
case 6:
					// line 337 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-2+yyTop]), support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop]))));
              }
  break;
case 7:
					// line 340 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
              }
  break;
case 9:
					// line 345 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("BEGIN in method");
                    }
              }
  break;
case 10:
					// line 349 "RubyParser.y"
  {
                    support.getResult().addBeginNode(new PreExe19Node(((ISourcePosition)yyVals[-4+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop])));
                    yyVal = null;
              }
  break;
case 11:
					// line 354 "RubyParser.y"
  {
                  Node node = ((Node)yyVals[-3+yyTop]);

                  if (((RescueBodyNode)yyVals[-2+yyTop]) != null) {
                      node = new RescueNode(support.getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), ((RescueBodyNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
                  } else if (((Node)yyVals[-1+yyTop]) != null) {
                      support.warn(ID.ELSE_WITHOUT_RESCUE, support.getPosition(((Node)yyVals[-3+yyTop])), "else without rescue is useless");
                      node = support.appendToBlock(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                  }
                  if (((Node)yyVals[0+yyTop]) != null) {
                      if (node == null) node = NilImplicitNode.NIL;
                      node = new EnsureNode(support.getPosition(((Node)yyVals[-3+yyTop])), node, ((Node)yyVals[0+yyTop]));
                  }

                  support.fixpos(node, ((Node)yyVals[-3+yyTop]));
                  yyVal = node;
                }
  break;
case 12:
					// line 372 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) instanceof BlockNode) {
                        support.checkUselessStatements(((BlockNode)yyVals[-1+yyTop]));
                    }
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 14:
					// line 380 "RubyParser.y"
  {
                    yyVal = support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop])));
                }
  break;
case 15:
					// line 383 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-2+yyTop]), support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop]))));
                }
  break;
case 16:
					// line 386 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 17:
					// line 390 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 18:
					// line 394 "RubyParser.y"
  {
                   support.yyerror("BEGIN is permitted only at toplevel");
                }
  break;
case 19:
					// line 396 "RubyParser.y"
  {
                    yyVal = new BeginNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-3+yyTop]));
                }
  break;
case 20:
					// line 400 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 21:
					// line 402 "RubyParser.y"
  {
                    yyVal = support.newAlias(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 22:
					// line 405 "RubyParser.y"
  {
                    yyVal = new VAliasNode(((ISourcePosition)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 23:
					// line 408 "RubyParser.y"
  {
                    yyVal = new VAliasNode(((ISourcePosition)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]), "$" + ((BackRefNode)yyVals[0+yyTop]).getType());
                }
  break;
case 24:
					// line 411 "RubyParser.y"
  {
                    support.yyerror("can't make alias for the number variables");
                }
  break;
case 25:
					// line 414 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 26:
					// line 417 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), null);
                    support.fixpos(((Node)yyVal), ((Node)yyVals[0+yyTop]));
                }
  break;
case 27:
					// line 421 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), null, ((Node)yyVals[-2+yyTop]));
                    support.fixpos(((Node)yyVal), ((Node)yyVals[0+yyTop]));
                }
  break;
case 28:
					// line 425 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) != null && ((Node)yyVals[-2+yyTop]) instanceof BeginNode) {
                        yyVal = new WhileNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((BeginNode)yyVals[-2+yyTop]).getBodyNode(), false);
                    } else {
                        yyVal = new WhileNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), true);
                    }
                }
  break;
case 29:
					// line 432 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) != null && ((Node)yyVals[-2+yyTop]) instanceof BeginNode) {
                        yyVal = new UntilNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((BeginNode)yyVals[-2+yyTop]).getBodyNode(), false);
                    } else {
                        yyVal = new UntilNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), true);
                    }
                }
  break;
case 30:
					// line 439 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    yyVal = new RescueNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), new RescueBodyNode(support.getPosition(((Node)yyVals[-2+yyTop])), null, body, null), null);
                }
  break;
case 31:
					// line 443 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.warn(ID.END_IN_METHOD, ((ISourcePosition)yyVals[-3+yyTop]), "END in method; use at_exit");
                    }
                    yyVal = new PostExeNode(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 33:
					// line 450 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    ((MultipleAsgn19Node)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                    yyVal = ((MultipleAsgn19Node)yyVals[-2+yyTop]);
                }
  break;
case 34:
					// line 455 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    ISourcePosition pos = ((AssignableNode)yyVals[-2+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-1+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-2+yyTop])), asgnOp, ((Node)yyVals[0+yyTop])));
                        ((AssignableNode)yyVals[-2+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-2+yyTop]);
                    }
                }
  break;
case 35:
					// line 472 "RubyParser.y"
  {
  /* FIXME: arg_concat logic missing for opt_call_args*/
                    yyVal = support.new_opElementAsgnNode(((Node)yyVals[-5+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 36:
					// line 476 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 37:
					// line 479 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 38:
					// line 482 "RubyParser.y"
  {
                    support.yyerror("can't make alias for the number variables");
                    yyVal = null;
                }
  break;
case 39:
					// line 487 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 40:
					// line 490 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[-2+yyTop]));
                }
  break;
case 41:
					// line 493 "RubyParser.y"
  {
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 42:
					// line 496 "RubyParser.y"
  {
                    ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                    yyVal = ((MultipleAsgn19Node)yyVals[-2+yyTop]);
                    ((MultipleAsgn19Node)yyVals[-2+yyTop]).setPosition(support.getPosition(((MultipleAsgn19Node)yyVals[-2+yyTop])));
                }
  break;
case 44:
					// line 508 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 45:
					// line 512 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 47:
					// line 519 "RubyParser.y"
  {
                    yyVal = support.newAndNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 48:
					// line 522 "RubyParser.y"
  {
                    yyVal = support.newOrNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 49:
					// line 525 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 50:
					// line 528 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 52:
					// line 533 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                }
  break;
case 56:
					// line 543 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 57:
					// line 548 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 58:
					// line 550 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 59:
					// line 555 "RubyParser.y"
  {
                    yyVal = support.new_fcall(((String)yyVals[0+yyTop]));
                }
  break;
case 60:
					// line 560 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);
                }
  break;
case 61:
					// line 564 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                    yyVal = ((FCallNode)yyVals[-2+yyTop]);
                }
  break;
case 62:
					// line 568 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 63:
					// line 571 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop])); 
                }
  break;
case 64:
					// line 574 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 65:
					// line 577 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 66:
					// line 580 "RubyParser.y"
  {
                    yyVal = support.new_super(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 67:
					// line 583 "RubyParser.y"
  {
                    yyVal = support.new_yield(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 68:
					// line 586 "RubyParser.y"
  {
                    yyVal = new ReturnNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 69:
					// line 589 "RubyParser.y"
  {
                    yyVal = new BreakNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 70:
					// line 592 "RubyParser.y"
  {
                    yyVal = new NextNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 72:
					// line 598 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 73:
					// line 603 "RubyParser.y"
  {
                    yyVal = ((MultipleAsgn19Node)yyVals[0+yyTop]);
                }
  break;
case 74:
					// line 606 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ISourcePosition)yyVals[-2+yyTop]), support.newArrayNode(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop])), null, null);
                }
  break;
case 75:
					// line 611 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[0+yyTop]).getPosition(), ((ListNode)yyVals[0+yyTop]), null, null);
                }
  break;
case 76:
					// line 614 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]).add(((Node)yyVals[0+yyTop])), null, null);
                }
  break;
case 77:
					// line 617 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-2+yyTop]).getPosition(), ((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), (ListNode) null);
                }
  break;
case 78:
					// line 620 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-4+yyTop]), ((Node)yyVals[-2+yyTop]), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 79:
					// line 623 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), new StarNode(lexer.getPosition()), null);
                }
  break;
case 80:
					// line 626 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 81:
					// line 629 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((Node)yyVals[0+yyTop]).getPosition(), null, ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 82:
					// line 632 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((Node)yyVals[-2+yyTop]).getPosition(), null, ((Node)yyVals[-2+yyTop]), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 83:
					// line 635 "RubyParser.y"
  {
                      yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), null);
                }
  break;
case 84:
					// line 638 "RubyParser.y"
  {
                      yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 86:
					// line 643 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 87:
					// line 648 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 88:
					// line 651 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
                }
  break;
case 89:
					// line 656 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 90:
					// line 659 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 91:
					// line 663 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 92:
					// line 666 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 93:
					// line 669 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 94:
					// line 672 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 95:
					// line 677 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 96:
					// line 680 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 97:
					// line 684 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 98:
					// line 688 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 99:
					// line 692 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 100:
					// line 696 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 101:
					// line 700 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 102:
					// line 704 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 103:
					// line 708 "RubyParser.y"
  {
                    yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 104:
					// line 711 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 105:
					// line 714 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 106:
					// line 717 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 107:
					// line 720 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = support.getPosition(((Node)yyVals[-2+yyTop]));

                    yyVal = new ConstDeclNode(position, null, support.new_colon2(position, ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 108:
					// line 729 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = lexer.getPosition();

                    yyVal = new ConstDeclNode(position, null, support.new_colon3(position, ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 109:
					// line 738 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
                }
  break;
case 110:
					// line 742 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 111:
					// line 745 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 112:
					// line 748 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 113:
					// line 751 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 114:
					// line 756 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 115:
					// line 759 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 116:
					// line 763 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 117:
					// line 767 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 118:
					// line 771 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 119:
					// line 775 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 120:
					// line 779 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 121:
					// line 783 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 122:
					// line 787 "RubyParser.y"
  {
                    yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 123:
					// line 790 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 124:
					// line 793 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 125:
					// line 796 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 126:
					// line 799 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = support.getPosition(((Node)yyVals[-2+yyTop]));

                    yyVal = new ConstDeclNode(position, null, support.new_colon2(position, ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 127:
					// line 808 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = lexer.getPosition();

                    yyVal = new ConstDeclNode(position, null, support.new_colon3(position, ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 128:
					// line 817 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
                }
  break;
case 129:
					// line 821 "RubyParser.y"
  {
                    support.yyerror("class/module name must be CONSTANT");
                }
  break;
case 131:
					// line 826 "RubyParser.y"
  {
                    yyVal = support.new_colon3(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 132:
					// line 829 "RubyParser.y"
  {
                    yyVal = support.new_colon2(lexer.getPosition(), null, ((String)yyVals[0+yyTop]));
                }
  break;
case 133:
					// line 832 "RubyParser.y"
  {
                    yyVal = support.new_colon2(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 137:
					// line 838 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_ENDFN);
                   yyVal = ((String)yyVals[0+yyTop]);
               }
  break;
case 138:
					// line 842 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_ENDFN);
                   yyVal = ((String)yyVals[0+yyTop]);
               }
  break;
case 139:
					// line 848 "RubyParser.y"
  {
                    yyVal = new LiteralNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 140:
					// line 851 "RubyParser.y"
  {
                    yyVal = new LiteralNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 141:
					// line 856 "RubyParser.y"
  {
                    yyVal = ((LiteralNode)yyVals[0+yyTop]);
                }
  break;
case 142:
					// line 859 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 143:
					// line 863 "RubyParser.y"
  {
                    yyVal = support.newUndef(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 144:
					// line 866 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 145:
					// line 868 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-3+yyTop]), support.newUndef(((Node)yyVals[-3+yyTop]).getPosition(), ((Node)yyVals[0+yyTop])));
                }
  break;
case 176:
					// line 880 "RubyParser.y"
  {
                    yyVal = "__LINE__";
                }
  break;
case 177:
					// line 883 "RubyParser.y"
  {
                    yyVal = "__FILE__";
                }
  break;
case 178:
					// line 886 "RubyParser.y"
  {
                    yyVal = "__ENCODING__";
                }
  break;
case 179:
					// line 889 "RubyParser.y"
  {
                    yyVal = "BEGIN";
                }
  break;
case 180:
					// line 892 "RubyParser.y"
  {
                    yyVal = "END";
                }
  break;
case 181:
					// line 895 "RubyParser.y"
  {
                    yyVal = "alias";
                }
  break;
case 182:
					// line 898 "RubyParser.y"
  {
                    yyVal = "and";
                }
  break;
case 183:
					// line 901 "RubyParser.y"
  {
                    yyVal = "begin";
                }
  break;
case 184:
					// line 904 "RubyParser.y"
  {
                    yyVal = "break";
                }
  break;
case 185:
					// line 907 "RubyParser.y"
  {
                    yyVal = "case";
                }
  break;
case 186:
					// line 910 "RubyParser.y"
  {
                    yyVal = "class";
                }
  break;
case 187:
					// line 913 "RubyParser.y"
  {
                    yyVal = "def";
                }
  break;
case 188:
					// line 916 "RubyParser.y"
  {
                    yyVal = "defined?";
                }
  break;
case 189:
					// line 919 "RubyParser.y"
  {
                    yyVal = "do";
                }
  break;
case 190:
					// line 922 "RubyParser.y"
  {
                    yyVal = "else";
                }
  break;
case 191:
					// line 925 "RubyParser.y"
  {
                    yyVal = "elsif";
                }
  break;
case 192:
					// line 928 "RubyParser.y"
  {
                    yyVal = "end";
                }
  break;
case 193:
					// line 931 "RubyParser.y"
  {
                    yyVal = "ensure";
                }
  break;
case 194:
					// line 934 "RubyParser.y"
  {
                    yyVal = "false";
                }
  break;
case 195:
					// line 937 "RubyParser.y"
  {
                    yyVal = "for";
                }
  break;
case 196:
					// line 940 "RubyParser.y"
  {
                    yyVal = "in";
                }
  break;
case 197:
					// line 943 "RubyParser.y"
  {
                    yyVal = "module";
                }
  break;
case 198:
					// line 946 "RubyParser.y"
  {
                    yyVal = "next";
                }
  break;
case 199:
					// line 949 "RubyParser.y"
  {
                    yyVal = "nil";
                }
  break;
case 200:
					// line 952 "RubyParser.y"
  {
                    yyVal = "not";
                }
  break;
case 201:
					// line 955 "RubyParser.y"
  {
                    yyVal = "or";
                }
  break;
case 202:
					// line 958 "RubyParser.y"
  {
                    yyVal = "redo";
                }
  break;
case 203:
					// line 961 "RubyParser.y"
  {
                    yyVal = "rescue";
                }
  break;
case 204:
					// line 964 "RubyParser.y"
  {
                    yyVal = "retry";
                }
  break;
case 205:
					// line 967 "RubyParser.y"
  {
                    yyVal = "return";
                }
  break;
case 206:
					// line 970 "RubyParser.y"
  {
                    yyVal = "self";
                }
  break;
case 207:
					// line 973 "RubyParser.y"
  {
                    yyVal = "super";
                }
  break;
case 208:
					// line 976 "RubyParser.y"
  {
                    yyVal = "then";
                }
  break;
case 209:
					// line 979 "RubyParser.y"
  {
                    yyVal = "true";
                }
  break;
case 210:
					// line 982 "RubyParser.y"
  {
                    yyVal = "undef";
                }
  break;
case 211:
					// line 985 "RubyParser.y"
  {
                    yyVal = "when";
                }
  break;
case 212:
					// line 988 "RubyParser.y"
  {
                    yyVal = "yield";
                }
  break;
case 213:
					// line 991 "RubyParser.y"
  {
                    yyVal = "if";
                }
  break;
case 214:
					// line 994 "RubyParser.y"
  {
                    yyVal = "unless";
                }
  break;
case 215:
					// line 997 "RubyParser.y"
  {
                    yyVal = "signal";
                }
  break;
case 216:
					// line 1000 "RubyParser.y"
  {
                    yyVal = "while";
                }
  break;
case 217:
					// line 1003 "RubyParser.y"
  {
                    yyVal = "until";
                }
  break;
case 218:
					// line 1006 "RubyParser.y"
  {
                    yyVal = "rescue";
                }
  break;
case 219:
					// line 1010 "RubyParser.y"
  {
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    /* FIXME: Consider fixing node_assign itself rather than single case*/
                    ((Node)yyVal).setPosition(support.getPosition(((Node)yyVals[-2+yyTop])));
                }
  break;
case 220:
					// line 1015 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-4+yyTop]));
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    yyVal = support.node_assign(((Node)yyVals[-4+yyTop]), new RescueNode(position, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(position, null, body, null), null));
                }
  break;
case 221:
					// line 1020 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    ISourcePosition pos = ((AssignableNode)yyVals[-2+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-1+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-2+yyTop])), asgnOp, ((Node)yyVals[0+yyTop])));
                        ((AssignableNode)yyVals[-2+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-2+yyTop]);
                    }
                }
  break;
case 222:
					// line 1037 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    ISourcePosition pos = support.getPosition(((Node)yyVals[0+yyTop]));
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    Node rescue = new RescueNode(pos, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(support.getPosition(((Node)yyVals[-2+yyTop])), null, body, null), null);

                    pos = ((AssignableNode)yyVals[-4+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-3+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(rescue);
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-4+yyTop])), ((AssignableNode)yyVals[-4+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(rescue);
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-4+yyTop])), ((AssignableNode)yyVals[-4+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-4+yyTop])), asgnOp, rescue));
                        ((AssignableNode)yyVals[-4+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-4+yyTop]);
                    }
                }
  break;
case 223:
					// line 1057 "RubyParser.y"
  {
  /* FIXME: arg_concat missing for opt_call_args*/
                    yyVal = support.new_opElementAsgnNode(((Node)yyVals[-5+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 224:
					// line 1061 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 225:
					// line 1064 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 226:
					// line 1067 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 227:
					// line 1070 "RubyParser.y"
  {
                    support.yyerror("constant re-assignment");
                }
  break;
case 228:
					// line 1073 "RubyParser.y"
  {
                    support.yyerror("constant re-assignment");
                }
  break;
case 229:
					// line 1076 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[-2+yyTop]));
                }
  break;
case 230:
					// line 1079 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    support.checkExpression(((Node)yyVals[0+yyTop]));
    
                    boolean isLiteral = ((Node)yyVals[-2+yyTop]) instanceof FixnumNode && ((Node)yyVals[0+yyTop]) instanceof FixnumNode;
                    yyVal = new DotNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), false, isLiteral);
                }
  break;
case 231:
					// line 1086 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    boolean isLiteral = ((Node)yyVals[-2+yyTop]) instanceof FixnumNode && ((Node)yyVals[0+yyTop]) instanceof FixnumNode;
                    yyVal = new DotNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), true, isLiteral);
                }
  break;
case 232:
					// line 1093 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "+", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 233:
					// line 1096 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "-", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 234:
					// line 1099 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "*", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 235:
					// line 1102 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "/", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 236:
					// line 1105 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "%", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 237:
					// line 1108 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 238:
					// line 1111 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getOperatorCallNode(((NumericNode)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]), lexer.getPosition()), "-@");
                }
  break;
case 239:
					// line 1114 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "+@");
                }
  break;
case 240:
					// line 1117 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "-@");
                }
  break;
case 241:
					// line 1120 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "|", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 242:
					// line 1123 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "^", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 243:
					// line 1126 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "&", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 244:
					// line 1129 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=>", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 245:
					// line 1132 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 246:
					// line 1135 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 247:
					// line 1138 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 248:
					// line 1141 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 249:
					// line 1144 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "==", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 250:
					// line 1147 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "===", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 251:
					// line 1150 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "!=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 252:
					// line 1153 "RubyParser.y"
  {
                    yyVal = support.getMatchNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                  /* ENEBO
                        $$ = match_op($1, $3);
                        if (nd_type($1) == NODE_LIT && TYPE($1->nd_lit) == T_REGEXP) {
                            $$ = reg_named_capture_assign($1->nd_lit, $$);
                        }
                  */
                }
  break;
case 253:
					// line 1162 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "!~", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 254:
					// line 1165 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 255:
					// line 1168 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "~");
                }
  break;
case 256:
					// line 1171 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<<", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 257:
					// line 1174 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">>", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 258:
					// line 1177 "RubyParser.y"
  {
                    yyVal = support.newAndNode(((Node)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 259:
					// line 1180 "RubyParser.y"
  {
                    yyVal = support.newOrNode(((Node)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 260:
					// line 1183 "RubyParser.y"
  {
                    yyVal = support.new_defined(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 261:
					// line 1186 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-5+yyTop])), support.getConditionNode(((Node)yyVals[-5+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 262:
					// line 1189 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 263:
					// line 1193 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = ((Node)yyVals[0+yyTop]) != null ? ((Node)yyVals[0+yyTop]) : NilImplicitNode.NIL;
                }
  break;
case 265:
					// line 1199 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 266:
					// line 1202 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 267:
					// line 1205 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 268:
					// line 1209 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    if (yyVal != null) ((Node)yyVal).setPosition(((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 273:
					// line 1218 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 274:
					// line 1221 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 275:
					// line 1224 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 276:
					// line 1230 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 277:
					// line 1233 "RubyParser.y"
  {
                    yyVal = support.arg_blk_pass(((Node)yyVals[-1+yyTop]), ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 278:
					// line 1236 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                    yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 279:
					// line 1240 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                    yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 280:
					// line 1244 "RubyParser.y"
  {
                }
  break;
case 281:
					// line 1247 "RubyParser.y"
  {
                    yyVal = Long.valueOf(lexer.getCmdArgumentState().begin());
                }
  break;
case 282:
					// line 1249 "RubyParser.y"
  {
                    lexer.getCmdArgumentState().reset(((Long)yyVals[-1+yyTop]).longValue());
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 283:
					// line 1254 "RubyParser.y"
  {
                    yyVal = new BlockPassNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 284:
					// line 1258 "RubyParser.y"
  {
                    yyVal = ((BlockPassNode)yyVals[0+yyTop]);
                }
  break;
case 286:
					// line 1264 "RubyParser.y"
  { /* ArrayNode*/
                    ISourcePosition pos = ((Node)yyVals[0+yyTop]) == null ? lexer.getPosition() : ((Node)yyVals[0+yyTop]).getPosition();
                    yyVal = support.newArrayNode(pos, ((Node)yyVals[0+yyTop]));
                }
  break;
case 287:
					// line 1268 "RubyParser.y"
  { /* SplatNode*/
                    yyVal = support.newSplatNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 288:
					// line 1271 "RubyParser.y"
  { /* ArgsCatNode, SplatNode, ArrayNode*/
                    Node node = support.splat_array(((Node)yyVals[-2+yyTop]));

                    if (node != null) {
                        yyVal = support.list_append(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_append(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 289:
					// line 1280 "RubyParser.y"
  { /* ArgsCatNode, SplatNode, ArrayNode*/
                    Node node = null;

                    /* FIXME: lose syntactical elements here (and others like this)*/
                    if (((Node)yyVals[0+yyTop]) instanceof ArrayNode &&
                        (node = support.splat_array(((Node)yyVals[-3+yyTop]))) != null) {
                        yyVal = support.list_concat(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_concat(support.getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 290:
					// line 1292 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 291:
					// line 1295 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 292:
					// line 1300 "RubyParser.y"
  {
                    Node node = support.splat_array(((Node)yyVals[-2+yyTop]));

                    if (node != null) {
                        yyVal = support.list_append(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_append(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 293:
					// line 1309 "RubyParser.y"
  {
                    Node node = null;

                    if (((Node)yyVals[0+yyTop]) instanceof ArrayNode &&
                        (node = support.splat_array(((Node)yyVals[-3+yyTop]))) != null) {
                        yyVal = support.list_concat(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_concat(((Node)yyVals[-3+yyTop]).getPosition(), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 294:
					// line 1319 "RubyParser.y"
  {
                     yyVal = support.newSplatNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 301:
					// line 1329 "RubyParser.y"
  { 
                     yyVal = ((ListNode)yyVals[0+yyTop]); /* FIXME: Why complaining without $$ = $1;*/
                }
  break;
case 302:
					// line 1332 "RubyParser.y"
  {
                     yyVal = ((ListNode)yyVals[0+yyTop]); /* FIXME: Why complaining without $$ = $1;*/
                }
  break;
case 305:
					// line 1337 "RubyParser.y"
  {
                    yyVal = support.new_fcall(((String)yyVals[0+yyTop]));
                }
  break;
case 306:
					// line 1340 "RubyParser.y"
  {
                    yyVal = new BeginNode(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]));
                }
  break;
case 307:
					// line 1343 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_ENDARG);
                }
  break;
case 308:
					// line 1345 "RubyParser.y"
  {
                    yyVal = null; /*FIXME: Should be implicit nil?*/
                }
  break;
case 309:
					// line 1348 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_ENDARG); 
                }
  break;
case 310:
					// line 1350 "RubyParser.y"
  {
                    if (Options.PARSER_WARN_GROUPED_EXPRESSIONS.load()) {
                      support.warning(ID.GROUPED_EXPRESSION, ((ISourcePosition)yyVals[-3+yyTop]), "(...) interpreted as grouped expression");
                    }
                    yyVal = ((Node)yyVals[-2+yyTop]);
                }
  break;
case 311:
					// line 1356 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) != null) {
                        /* compstmt position includes both parens around it*/
                        ((ISourcePositionHolder) ((Node)yyVals[-1+yyTop])).setPosition(((ISourcePosition)yyVals[-2+yyTop]));
                        yyVal = ((Node)yyVals[-1+yyTop]);
                    } else {
                        yyVal = new NilNode(((ISourcePosition)yyVals[-2+yyTop]));
                    }
                }
  break;
case 312:
					// line 1365 "RubyParser.y"
  {
                    yyVal = support.new_colon2(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 313:
					// line 1368 "RubyParser.y"
  {
                    yyVal = support.new_colon3(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 314:
					// line 1371 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-1+yyTop]));
                    if (((Node)yyVals[-1+yyTop]) == null) {
                        yyVal = new ZArrayNode(position); /* zero length array */
                    } else {
                        yyVal = ((Node)yyVals[-1+yyTop]);
                    }
                }
  break;
case 315:
					// line 1379 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-1+yyTop]);
                }
  break;
case 316:
					// line 1382 "RubyParser.y"
  {
                    yyVal = new ReturnNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 317:
					// line 1385 "RubyParser.y"
  {
                    yyVal = support.new_yield(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 318:
					// line 1388 "RubyParser.y"
  {
                    yyVal = new ZYieldNode(((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 319:
					// line 1391 "RubyParser.y"
  {
                    yyVal = new ZYieldNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 320:
					// line 1394 "RubyParser.y"
  {
                    yyVal = support.new_defined(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 321:
					// line 1397 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[-1+yyTop])), "!");
                }
  break;
case 322:
					// line 1400 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(NilImplicitNode.NIL, "!");
                }
  break;
case 323:
					// line 1403 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), null, ((IterNode)yyVals[0+yyTop]));
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);                    
                }
  break;
case 325:
					// line 1408 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) != null && 
                          ((BlockAcceptingNode)yyVals[-1+yyTop]).getIterNode() instanceof BlockPassNode) {
                        throw new SyntaxException(PID.BLOCK_ARG_AND_BLOCK_GIVEN, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "Both block arg and actual block given.");
                    }
                    yyVal = ((BlockAcceptingNode)yyVals[-1+yyTop]).setIterNode(((IterNode)yyVals[0+yyTop]));
                    ((Node)yyVal).setPosition(((Node)yyVals[-1+yyTop]).getPosition());
                }
  break;
case 326:
					// line 1416 "RubyParser.y"
  {
                    yyVal = ((LambdaNode)yyVals[0+yyTop]);
                }
  break;
case 327:
					// line 1419 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-5+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 328:
					// line 1422 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-5+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-2+yyTop]));
                }
  break;
case 329:
					// line 1425 "RubyParser.y"
  {
                    lexer.getConditionState().begin();
                }
  break;
case 330:
					// line 1427 "RubyParser.y"
  {
                    lexer.getConditionState().end();
                }
  break;
case 331:
					// line 1429 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);
                    yyVal = new WhileNode(((ISourcePosition)yyVals[-6+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), body);
                }
  break;
case 332:
					// line 1433 "RubyParser.y"
  {
                  lexer.getConditionState().begin();
                }
  break;
case 333:
					// line 1435 "RubyParser.y"
  {
                  lexer.getConditionState().end();
                }
  break;
case 334:
					// line 1437 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);
                    yyVal = new UntilNode(((ISourcePosition)yyVals[-6+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), body);
                }
  break;
case 335:
					// line 1441 "RubyParser.y"
  {
                    yyVal = support.newCaseNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 336:
					// line 1444 "RubyParser.y"
  {
                    yyVal = support.newCaseNode(((ISourcePosition)yyVals[-3+yyTop]), null, ((Node)yyVals[-1+yyTop]));
                }
  break;
case 337:
					// line 1447 "RubyParser.y"
  {
                    lexer.getConditionState().begin();
                }
  break;
case 338:
					// line 1449 "RubyParser.y"
  {
                    lexer.getConditionState().end();
                }
  break;
case 339:
					// line 1451 "RubyParser.y"
  {
                      /* ENEBO: Lots of optz in 1.9 parser here*/
                    yyVal = new ForNode(((ISourcePosition)yyVals[-8+yyTop]), ((Node)yyVals[-7+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-4+yyTop]), support.getCurrentScope());
                }
  break;
case 340:
					// line 1455 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("class definition in method body");
                    }
                    support.pushLocalScope();
                }
  break;
case 341:
					// line 1460 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new ClassNode(((ISourcePosition)yyVals[-5+yyTop]), ((Colon3Node)yyVals[-4+yyTop]), support.getCurrentScope(), body, ((Node)yyVals[-3+yyTop]));
                    support.popCurrentScope();
                }
  break;
case 342:
					// line 1466 "RubyParser.y"
  {
                    yyVal = Boolean.valueOf(support.isInDef());
                    support.setInDef(false);
                }
  break;
case 343:
					// line 1469 "RubyParser.y"
  {
                    yyVal = Integer.valueOf(support.getInSingle());
                    support.setInSingle(0);
                    support.pushLocalScope();
                }
  break;
case 344:
					// line 1473 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new SClassNode(((ISourcePosition)yyVals[-7+yyTop]), ((Node)yyVals[-5+yyTop]), support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInDef(((Boolean)yyVals[-4+yyTop]).booleanValue());
                    support.setInSingle(((Integer)yyVals[-2+yyTop]).intValue());
                }
  break;
case 345:
					// line 1481 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) { 
                        support.yyerror("module definition in method body");
                    }
                    support.pushLocalScope();
                }
  break;
case 346:
					// line 1486 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new ModuleNode(((ISourcePosition)yyVals[-4+yyTop]), ((Colon3Node)yyVals[-3+yyTop]), support.getCurrentScope(), body);
                    support.popCurrentScope();
                }
  break;
case 347:
					// line 1492 "RubyParser.y"
  {
                    support.setInDef(true);
                    support.pushLocalScope();
                }
  break;
case 348:
					// line 1495 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]);
                    if (body == null) body = NilImplicitNode.NIL;

                    yyVal = new DefnNode(((ISourcePosition)yyVals[-5+yyTop]), new ArgumentNode(((ISourcePosition)yyVals[-5+yyTop]), ((String)yyVals[-4+yyTop])), (ArgsNode) yyVals[-2+yyTop], support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInDef(false);
                }
  break;
case 349:
					// line 1503 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 350:
					// line 1505 "RubyParser.y"
  {
                    support.setInSingle(support.getInSingle() + 1);
                    support.pushLocalScope();
                    lexer.setState(LexState.EXPR_ENDFN); /* force for args */
                }
  break;
case 351:
					// line 1509 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]);
                    if (body == null) body = NilImplicitNode.NIL;

                    yyVal = new DefsNode(((ISourcePosition)yyVals[-8+yyTop]), ((Node)yyVals[-7+yyTop]), new ArgumentNode(((ISourcePosition)yyVals[-8+yyTop]), ((String)yyVals[-4+yyTop])), (ArgsNode) yyVals[-2+yyTop], support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInSingle(support.getInSingle() - 1);
                }
  break;
case 352:
					// line 1517 "RubyParser.y"
  {
                    yyVal = new BreakNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 353:
					// line 1520 "RubyParser.y"
  {
                    yyVal = new NextNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 354:
					// line 1523 "RubyParser.y"
  {
                    yyVal = new RedoNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 355:
					// line 1526 "RubyParser.y"
  {
                    yyVal = new RetryNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 356:
					// line 1529 "RubyParser.y"
  {
                     yyVal = support.signal_assign(((ISourcePosition)yyVals[-2+yyTop]),((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 357:
					// line 1540 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = ((Node)yyVals[0+yyTop]);
                    if (yyVal == null) yyVal = NilImplicitNode.NIL;
                }
  break;
case 364:
					// line 1554 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-4+yyTop]), support.getConditionNode(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 366:
					// line 1559 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 368:
					// line 1564 "RubyParser.y"
  {
                }
  break;
case 369:
					// line 1567 "RubyParser.y"
  {
                     yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 370:
					// line 1570 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 371:
					// line 1575 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 372:
					// line 1578 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 373:
					// line 1582 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[0+yyTop]).getPosition(), ((ListNode)yyVals[0+yyTop]), null, null);
                }
  break;
case 374:
					// line 1585 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null), null);
                }
  break;
case 375:
					// line 1588 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), null), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 376:
					// line 1591 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-2+yyTop]).getPosition(), ((ListNode)yyVals[-2+yyTop]), new StarNode(lexer.getPosition()), null);
                }
  break;
case 377:
					// line 1594 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-4+yyTop]), new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 378:
					// line 1597 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null), null);
                }
  break;
case 379:
					// line 1600 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), null), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 380:
					// line 1603 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), null);
                }
  break;
case 381:
					// line 1606 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(support.getPosition(((ListNode)yyVals[0+yyTop])), null, null, ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 382:
					// line 1610 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 383:
					// line 1613 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 384:
					// line 1616 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 385:
					// line 1619 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((BlockArgNode)yyVals[0+yyTop]).getPosition(), null, null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 386:
					// line 1623 "RubyParser.y"
  {
                    yyVal = ((ArgsTailHolder)yyVals[0+yyTop]);
                }
  break;
case 387:
					// line 1626 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, null, null);
                }
  break;
case 388:
					// line 1631 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 389:
					// line 1634 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-7+yyTop]).getPosition(), ((ListNode)yyVals[-7+yyTop]), ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 390:
					// line 1637 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 391:
					// line 1640 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 392:
					// line 1643 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 393:
					// line 1646 "RubyParser.y"
  {
                    RestArgNode rest = new UnnamedRestArgNode(((ListNode)yyVals[-1+yyTop]).getPosition(), null, support.getCurrentScope().addVariable("*"));
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, rest, null, (ArgsTailHolder) null);
                }
  break;
case 394:
					// line 1650 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 395:
					// line 1653 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 396:
					// line 1656 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-3+yyTop])), null, ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 397:
					// line 1659 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-5+yyTop])), null, ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 398:
					// line 1662 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-1+yyTop])), null, ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 399:
					// line 1665 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 400:
					// line 1668 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-1+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 401:
					// line 1671 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-3+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 402:
					// line 1674 "RubyParser.y"
  {
                    yyVal = support.new_args(((ArgsTailHolder)yyVals[0+yyTop]).getPosition(), null, null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 403:
					// line 1678 "RubyParser.y"
  {
    /* was $$ = null;*/
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 404:
					// line 1682 "RubyParser.y"
  {
                    lexer.commandStart = true;
                    yyVal = ((ArgsNode)yyVals[0+yyTop]);
                }
  break;
case 405:
					// line 1687 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 406:
					// line 1690 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 407:
					// line 1693 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-2+yyTop]);
                }
  break;
case 408:
					// line 1698 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 409:
					// line 1701 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 410:
					// line 1706 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 411:
					// line 1709 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 412:
					// line 1713 "RubyParser.y"
  {
                    support.new_bv(((String)yyVals[0+yyTop]));
                }
  break;
case 413:
					// line 1716 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 414:
					// line 1720 "RubyParser.y"
  {
                    support.pushBlockScope();
                    yyVal = lexer.getLeftParenBegin();
                    lexer.setLeftParenBegin(lexer.incrementParenNest());
                }
  break;
case 415:
					// line 1724 "RubyParser.y"
  {
                    yyVal = new LambdaNode(((ArgsNode)yyVals[-1+yyTop]).getPosition(), ((ArgsNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                    lexer.setLeftParenBegin(((Integer)yyVals[-2+yyTop]));
                }
  break;
case 416:
					// line 1730 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-2+yyTop]);
                }
  break;
case 417:
					// line 1733 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[0+yyTop]);
                }
  break;
case 418:
					// line 1737 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 419:
					// line 1740 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 420:
					// line 1744 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 421:
					// line 1746 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 422:
					// line 1755 "RubyParser.y"
  {
                    /* Workaround for JRUBY-2326 (MRI does not enter this production for some reason)*/
                    if (((Node)yyVals[-1+yyTop]) instanceof YieldNode) {
                        throw new SyntaxException(PID.BLOCK_GIVEN_TO_YIELD, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "block given to yield");
                    }
                    if (((Node)yyVals[-1+yyTop]) instanceof BlockAcceptingNode && ((BlockAcceptingNode)yyVals[-1+yyTop]).getIterNode() instanceof BlockPassNode) {
                        throw new SyntaxException(PID.BLOCK_ARG_AND_BLOCK_GIVEN, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "Both block arg and actual block given.");
                    }
                    if (((Node)yyVals[-1+yyTop]) instanceof NonLocalControlFlowNode) {
                        ((BlockAcceptingNode) ((NonLocalControlFlowNode)yyVals[-1+yyTop]).getValueNode()).setIterNode(((IterNode)yyVals[0+yyTop]));
                    } else {
                        ((BlockAcceptingNode)yyVals[-1+yyTop]).setIterNode(((IterNode)yyVals[0+yyTop]));
                    }
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    ((Node)yyVal).setPosition(((Node)yyVals[-1+yyTop]).getPosition());
                }
  break;
case 423:
					// line 1771 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 424:
					// line 1774 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 425:
					// line 1777 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 426:
					// line 1782 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);
                }
  break;
case 427:
					// line 1786 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 428:
					// line 1789 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 429:
					// line 1792 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]), null, null);
                }
  break;
case 430:
					// line 1795 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), "call", ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 431:
					// line 1798 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), "call", ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 432:
					// line 1801 "RubyParser.y"
  {
                    yyVal = support.new_super(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 433:
					// line 1804 "RubyParser.y"
  {
                    yyVal = new ZSuperNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 434:
					// line 1807 "RubyParser.y"
  {
                    if (((Node)yyVals[-3+yyTop]) instanceof SelfNode) {
                        yyVal = support.new_fcall("[]");
                        support.frobnicate_fcall_args(((FCallNode)yyVal), ((Node)yyVals[-1+yyTop]), null);
                    } else {
                        yyVal = support.new_call(((Node)yyVals[-3+yyTop]), "[]", ((Node)yyVals[-1+yyTop]), null);
                    }
                }
  break;
case 435:
					// line 1816 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 436:
					// line 1818 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 437:
					// line 1822 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 438:
					// line 1824 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 439:
					// line 1829 "RubyParser.y"
  {
                    yyVal = support.newWhenNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 442:
					// line 1835 "RubyParser.y"
  {
                    Node node;
                    if (((Node)yyVals[-3+yyTop]) != null) {
                        node = support.appendToBlock(support.node_assign(((Node)yyVals[-3+yyTop]), new GlobalVarNode(((ISourcePosition)yyVals[-5+yyTop]), "$!")), ((Node)yyVals[-1+yyTop]));
                        if (((Node)yyVals[-1+yyTop]) != null) {
                            node.setPosition(((ISourcePosition)yyVals[-5+yyTop]));
                        }
                    } else {
                        node = ((Node)yyVals[-1+yyTop]);
                    }
                    Node body = node == null ? NilImplicitNode.NIL : node;
                    yyVal = new RescueBodyNode(((ISourcePosition)yyVals[-5+yyTop]), ((Node)yyVals[-4+yyTop]), body, ((RescueBodyNode)yyVals[0+yyTop]));
                }
  break;
case 443:
					// line 1848 "RubyParser.y"
  { 
                    yyVal = null; 
                }
  break;
case 444:
					// line 1852 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 445:
					// line 1855 "RubyParser.y"
  {
                    yyVal = support.splat_array(((Node)yyVals[0+yyTop]));
                    if (yyVal == null) yyVal = ((Node)yyVals[0+yyTop]); /* ArgsCat or ArgsPush*/
                }
  break;
case 447:
					// line 1861 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 449:
					// line 1866 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 451:
					// line 1871 "RubyParser.y"
  {
                    yyVal = ((NumericNode)yyVals[0+yyTop]);
                }
  break;
case 452:
					// line 1874 "RubyParser.y"
  {
                    yyVal = new SymbolNode(lexer.getPosition(), new ByteList(((String)yyVals[0+yyTop]).getBytes(), lexer.getEncoding()));
                }
  break;
case 454:
					// line 1879 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]) instanceof EvStrNode ? new DStrNode(((Node)yyVals[0+yyTop]).getPosition(), lexer.getEncoding()).add(((Node)yyVals[0+yyTop])) : ((Node)yyVals[0+yyTop]);
                    /*
                    NODE *node = $1;
                    if (!node) {
                        node = NEW_STR(STR_NEW0());
                    } else {
                        node = evstr2dstr(node);
                    }
                    $$ = node;
                    */
                }
  break;
case 455:
					// line 1893 "RubyParser.y"
  {
                    yyVal = ((StrNode)yyVals[0+yyTop]);
                }
  break;
case 456:
					// line 1896 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 457:
					// line 1899 "RubyParser.y"
  {
                    yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 458:
					// line 1903 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 459:
					// line 1907 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-1+yyTop]));

                    if (((Node)yyVals[-1+yyTop]) == null) {
                        yyVal = new XStrNode(position, null);
                    } else if (((Node)yyVals[-1+yyTop]) instanceof StrNode) {
                        yyVal = new XStrNode(position, (ByteList) ((StrNode)yyVals[-1+yyTop]).getValue().clone());
                    } else if (((Node)yyVals[-1+yyTop]) instanceof DStrNode) {
                        yyVal = new DXStrNode(position, ((DStrNode)yyVals[-1+yyTop]));

                        ((Node)yyVal).setPosition(position);
                    } else {
                        yyVal = new DXStrNode(position).add(((Node)yyVals[-1+yyTop]));
                    }
                }
  break;
case 460:
					// line 1923 "RubyParser.y"
  {
                    yyVal = support.newRegexpNode(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), (RegexpNode) ((RegexpNode)yyVals[0+yyTop]));
                }
  break;
case 461:
					// line 1927 "RubyParser.y"
  {
                    yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 462:
					// line 1930 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 463:
					// line 1934 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 464:
					// line 1937 "RubyParser.y"
  {
                     yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DStrNode(((ListNode)yyVals[-2+yyTop]).getPosition(), lexer.getEncoding()).add(((Node)yyVals[-1+yyTop])) : ((Node)yyVals[-1+yyTop]));
                }
  break;
case 465:
					// line 1941 "RubyParser.y"
  {
                     yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 466:
					// line 1944 "RubyParser.y"
  {
                     yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 467:
					// line 1948 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 468:
					// line 1951 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 469:
					// line 1955 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 470:
					// line 1958 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DSymbolNode(((ListNode)yyVals[-2+yyTop]).getPosition()).add(((Node)yyVals[-1+yyTop])) : support.asSymbol(((ListNode)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop])));
                }
  break;
case 471:
					// line 1962 "RubyParser.y"
  {
                     yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 472:
					// line 1965 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 473:
					// line 1969 "RubyParser.y"
  {
                    yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 474:
					// line 1972 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 475:
					// line 1977 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 476:
					// line 1980 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
                }
  break;
case 477:
					// line 1984 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 478:
					// line 1987 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(support.asSymbol(((ListNode)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop])));
                }
  break;
case 479:
					// line 1991 "RubyParser.y"
  {
                    ByteList aChar = ByteList.create("");
                    aChar.setEncoding(lexer.getEncoding());
                    yyVal = lexer.createStrNode(lexer.getPosition(), aChar, 0);
                }
  break;
case 480:
					// line 1996 "RubyParser.y"
  {
                    yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 481:
					// line 2000 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 482:
					// line 2003 "RubyParser.y"
  {
                    yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 483:
					// line 2007 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 484:
					// line 2010 "RubyParser.y"
  {
    /* FIXME: mri is different here.*/
                    yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 485:
					// line 2015 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 486:
					// line 2018 "RubyParser.y"
  {
                    yyVal = lexer.getStrTerm();
                    lexer.setStrTerm(null);
                    lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 487:
					// line 2022 "RubyParser.y"
  {
                    lexer.setStrTerm(((StrTerm)yyVals[-1+yyTop]));
                    yyVal = new EvStrNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 488:
					// line 2026 "RubyParser.y"
  {
                   yyVal = lexer.getStrTerm();
                   lexer.setStrTerm(null);
                   lexer.getConditionState().stop();
                   lexer.getCmdArgumentState().stop();
                }
  break;
case 489:
					// line 2031 "RubyParser.y"
  {
                   yyVal = lexer.getState();
                   lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 490:
					// line 2034 "RubyParser.y"
  {
                   lexer.getConditionState().restart();
                   lexer.getCmdArgumentState().restart();
                   lexer.setStrTerm(((StrTerm)yyVals[-3+yyTop]));
                   lexer.setState(((LexState)yyVals[-2+yyTop]));

                   yyVal = support.newEvStrNode(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 491:
					// line 2043 "RubyParser.y"
  {
                     yyVal = new GlobalVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 492:
					// line 2046 "RubyParser.y"
  {
                     yyVal = new InstVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 493:
					// line 2049 "RubyParser.y"
  {
                     yyVal = new ClassVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 495:
					// line 2055 "RubyParser.y"
  {
                     lexer.setState(LexState.EXPR_END);
                     yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 500:
					// line 2063 "RubyParser.y"
  {
                     lexer.setState(LexState.EXPR_END);

                     /* DStrNode: :"some text #{some expression}"*/
                     /* StrNode: :"some text"*/
                     /* EvStrNode :"#{some expression}"*/
                     /* Ruby 1.9 allows empty strings as symbols*/
                     if (((Node)yyVals[-1+yyTop]) == null) {
                         yyVal = new SymbolNode(lexer.getPosition(), new ByteList(new byte[0], lexer.getEncoding()));
                     } else if (((Node)yyVals[-1+yyTop]) instanceof DStrNode) {
                         yyVal = new DSymbolNode(((Node)yyVals[-1+yyTop]).getPosition(), ((DStrNode)yyVals[-1+yyTop]));
                     } else if (((Node)yyVals[-1+yyTop]) instanceof StrNode) {
                         yyVal = new SymbolNode(((Node)yyVals[-1+yyTop]).getPosition(), ((StrNode)yyVals[-1+yyTop]).getValue());
                     } else {
                         yyVal = new DSymbolNode(((Node)yyVals[-1+yyTop]).getPosition());
                         ((DSymbolNode)yyVal).add(((Node)yyVals[-1+yyTop]));
                     }
                }
  break;
case 501:
					// line 2082 "RubyParser.y"
  {
                    yyVal = ((NumericNode)yyVals[0+yyTop]);  
                }
  break;
case 502:
					// line 2085 "RubyParser.y"
  {
                     yyVal = support.negateNumeric(((NumericNode)yyVals[0+yyTop]));
                }
  break;
case 503:
					// line 2089 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 504:
					// line 2092 "RubyParser.y"
  {
                     yyVal = ((FloatNode)yyVals[0+yyTop]);
                }
  break;
case 505:
					// line 2095 "RubyParser.y"
  {
                     yyVal = ((RationalNode)yyVals[0+yyTop]);
                }
  break;
case 506:
					// line 2098 "RubyParser.y"
  {
                     yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 507:
					// line 2103 "RubyParser.y"
  {
                    yyVal = support.declareIdentifier(((String)yyVals[0+yyTop]));
                }
  break;
case 508:
					// line 2106 "RubyParser.y"
  {
                    yyVal = new InstVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 509:
					// line 2109 "RubyParser.y"
  {
                    yyVal = new GlobalVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 510:
					// line 2112 "RubyParser.y"
  {
                    yyVal = new ConstNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 511:
					// line 2115 "RubyParser.y"
  {
                    yyVal = new ClassVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 512:
					// line 2118 "RubyParser.y"
  { 
                    yyVal = new NilNode(lexer.getPosition());
                }
  break;
case 513:
					// line 2121 "RubyParser.y"
  {
                    yyVal = new SelfNode(lexer.getPosition());
                }
  break;
case 514:
					// line 2124 "RubyParser.y"
  { 
                    yyVal = new TrueNode(lexer.getPosition());
                }
  break;
case 515:
					// line 2127 "RubyParser.y"
  {
                    yyVal = new FalseNode(lexer.getPosition());
                }
  break;
case 516:
					// line 2130 "RubyParser.y"
  {
                    yyVal = new FileNode(lexer.getPosition(), new ByteList(lexer.getPosition().getFile().getBytes(),
                    support.getConfiguration().getRuntime().getEncodingService().getLocaleEncoding()));
                }
  break;
case 517:
					// line 2134 "RubyParser.y"
  {
                    yyVal = new FixnumNode(lexer.getPosition(), lexer.tokline.getLine()+1);
                }
  break;
case 518:
					// line 2137 "RubyParser.y"
  {
                    yyVal = new EncodingNode(lexer.getPosition(), lexer.getEncoding());
                }
  break;
case 519:
					// line 2142 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 520:
					// line 2145 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 521:
					// line 2148 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 522:
					// line 2151 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 523:
					// line 2156 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 524:
					// line 2159 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 525:
					// line 2163 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 526:
					// line 2167 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 527:
					// line 2171 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 528:
					// line 2175 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 529:
					// line 2179 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 530:
					// line 2183 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 531:
					// line 2189 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 532:
					// line 2192 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 533:
					// line 2196 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 534:
					// line 2199 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 535:
					// line 2201 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 536:
					// line 2204 "RubyParser.y"
  {
                   yyVal = null;
                }
  break;
case 537:
					// line 2210 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-1+yyTop]);
                    lexer.setState(LexState.EXPR_BEG);
                    lexer.commandStart = true;
                }
  break;
case 538:
					// line 2215 "RubyParser.y"
  {
                   yyVal = lexer.inKwarg;
                   lexer.inKwarg = true;
                }
  break;
case 539:
					// line 2218 "RubyParser.y"
  {
                   lexer.inKwarg = ((Boolean)yyVals[-2+yyTop]);
                    yyVal = ((ArgsNode)yyVals[-1+yyTop]);
                    lexer.setState(LexState.EXPR_BEG);
                    lexer.commandStart = true;
                }
  break;
case 540:
					// line 2226 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 541:
					// line 2229 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 542:
					// line 2232 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 543:
					// line 2235 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((BlockArgNode)yyVals[0+yyTop]).getPosition(), null, null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 544:
					// line 2239 "RubyParser.y"
  {
                    yyVal = ((ArgsTailHolder)yyVals[0+yyTop]);
                }
  break;
case 545:
					// line 2242 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, null, null);
                }
  break;
case 546:
					// line 2247 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 547:
					// line 2250 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-7+yyTop]).getPosition(), ((ListNode)yyVals[-7+yyTop]), ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 548:
					// line 2253 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 549:
					// line 2256 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 550:
					// line 2259 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 551:
					// line 2262 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 552:
					// line 2265 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 553:
					// line 2268 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 554:
					// line 2271 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), null, ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 555:
					// line 2274 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), null, ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 556:
					// line 2277 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 557:
					// line 2280 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-1+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 558:
					// line 2283 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-3+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 559:
					// line 2286 "RubyParser.y"
  {
                    yyVal = support.new_args(((ArgsTailHolder)yyVals[0+yyTop]).getPosition(), null, null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 560:
					// line 2289 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 561:
					// line 2293 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a constant");
                }
  break;
case 562:
					// line 2296 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be an instance variable");
                }
  break;
case 563:
					// line 2299 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a global variable");
                }
  break;
case 564:
					// line 2302 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a class variable");
                }
  break;
case 566:
					// line 2308 "RubyParser.y"
  {
                    yyVal = support.formal_argument(((String)yyVals[0+yyTop]));
                }
  break;
case 567:
					// line 2312 "RubyParser.y"
  {
                    yyVal = support.arg_var(((String)yyVals[0+yyTop]));
                }
  break;
case 568:
					// line 2315 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    /*            {
            ID tid = internal_id();
            arg_var(tid);
            if (dyna_in_block()) {
                $2->nd_value = NEW_DVAR(tid);
            }
            else {
                $2->nd_value = NEW_LVAR(tid);
            }
            $$ = NEW_ARGS_AUX(tid, 1);
            $$->nd_next = $2;*/
                }
  break;
case 569:
					// line 2331 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 570:
					// line 2334 "RubyParser.y"
  {
                    ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                    yyVal = ((ListNode)yyVals[-2+yyTop]);
                }
  break;
case 571:
					// line 2339 "RubyParser.y"
  {
                    support.arg_var(support.formal_argument(((String)yyVals[0+yyTop])));
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 572:
					// line 2344 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(((Node)yyVals[0+yyTop]).getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 573:
					// line 2347 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(lexer.getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), new RequiredKeywordArgumentValueNode()));
                }
  break;
case 574:
					// line 2351 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 575:
					// line 2354 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(lexer.getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), new RequiredKeywordArgumentValueNode()));
                }
  break;
case 576:
					// line 2359 "RubyParser.y"
  {
                    yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 577:
					// line 2362 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 578:
					// line 2366 "RubyParser.y"
  {
                    yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 579:
					// line 2369 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 580:
					// line 2373 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 581:
					// line 2376 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 582:
					// line 2380 "RubyParser.y"
  {
                    support.shadowing_lvar(((String)yyVals[0+yyTop]));
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 583:
					// line 2384 "RubyParser.y"
  {
                    yyVal = support.internalId();
                }
  break;
case 584:
					// line 2388 "RubyParser.y"
  {
                    support.arg_var(((String)yyVals[-2+yyTop]));
                    yyVal = new OptArgNode(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 585:
					// line 2393 "RubyParser.y"
  {
                    support.arg_var(support.formal_argument(((String)yyVals[-2+yyTop])));
                    yyVal = new OptArgNode(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 586:
					// line 2398 "RubyParser.y"
  {
                    yyVal = new BlockNode(((Node)yyVals[0+yyTop]).getPosition()).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 587:
					// line 2401 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 588:
					// line 2405 "RubyParser.y"
  {
                    yyVal = new BlockNode(((Node)yyVals[0+yyTop]).getPosition()).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 589:
					// line 2408 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 592:
					// line 2415 "RubyParser.y"
  {
                    if (!support.is_local_id(((String)yyVals[0+yyTop]))) {
                        support.yyerror("rest argument must be local variable");
                    }
                    
                    yyVal = new RestArgNode(support.arg_var(support.shadowing_lvar(((String)yyVals[0+yyTop]))));
                }
  break;
case 593:
					// line 2422 "RubyParser.y"
  {
                    yyVal = new UnnamedRestArgNode(lexer.getPosition(), "", support.getCurrentScope().addVariable("*"));
                }
  break;
case 596:
					// line 2430 "RubyParser.y"
  {
                    if (!support.is_local_id(((String)yyVals[0+yyTop]))) {
                        support.yyerror("block argument must be local variable");
                    }
                    
                    yyVal = new BlockArgNode(support.arg_var(support.shadowing_lvar(((String)yyVals[0+yyTop]))));
                }
  break;
case 597:
					// line 2438 "RubyParser.y"
  {
                    yyVal = ((BlockArgNode)yyVals[0+yyTop]);
                }
  break;
case 598:
					// line 2441 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 599:
					// line 2445 "RubyParser.y"
  {
                    if (!(((Node)yyVals[0+yyTop]) instanceof SelfNode)) {
                        support.checkExpression(((Node)yyVals[0+yyTop]));
                    }
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 600:
					// line 2451 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 601:
					// line 2453 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) == null) {
                        support.yyerror("can't define single method for ().");
                    } else if (((Node)yyVals[-1+yyTop]) instanceof ILiteralNode) {
                        support.yyerror("can't define single method for literals.");
                    }
                    support.checkExpression(((Node)yyVals[-1+yyTop]));
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 602:
					// line 2464 "RubyParser.y"
  {
                    yyVal = new HashNode(lexer.getPosition());
                }
  break;
case 603:
					// line 2467 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-1+yyTop]);
                }
  break;
case 604:
					// line 2472 "RubyParser.y"
  {
                    yyVal = new HashNode(lexer.getPosition(), ((KeyValuePair)yyVals[0+yyTop]));
                }
  break;
case 605:
					// line 2475 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-2+yyTop]).add(((KeyValuePair)yyVals[0+yyTop]));
                }
  break;
case 606:
					// line 2480 "RubyParser.y"
  {
                    yyVal = new KeyValuePair<Node,Node>(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 607:
					// line 2483 "RubyParser.y"
  {
                    SymbolNode label = new SymbolNode(support.getPosition(((Node)yyVals[0+yyTop])), new ByteList(((String)yyVals[-1+yyTop]).getBytes(), lexer.getEncoding()));
                    yyVal = new KeyValuePair<Node,Node>(label, ((Node)yyVals[0+yyTop]));
                }
  break;
case 608:
					// line 2487 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) instanceof StrNode) {
                        DStrNode dnode = new DStrNode(support.getPosition(((Node)yyVals[-2+yyTop])), lexer.getEncoding());
                        dnode.add(((Node)yyVals[-2+yyTop]));
                        yyVal = new KeyValuePair<Node,Node>(new DSymbolNode(support.getPosition(((Node)yyVals[-2+yyTop])), dnode), ((Node)yyVals[0+yyTop]));
                    } else if (((Node)yyVals[-2+yyTop]) instanceof DStrNode) {
                        yyVal = new KeyValuePair<Node,Node>(new DSymbolNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((DStrNode)yyVals[-2+yyTop])), ((Node)yyVals[0+yyTop]));
                    } else {
                        support.compile_error("Uknown type for assoc in strings: " + ((Node)yyVals[-2+yyTop]));
                    }

                }
  break;
case 609:
					// line 2500 "RubyParser.y"
  {
                    yyVal = new KeyValuePair<Node,Node>(null, ((Node)yyVals[0+yyTop]));
                }
  break;
case 626:
					// line 2510 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 627:
					// line 2513 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 635:
					// line 2524 "RubyParser.y"
  {
                      yyVal = null;
                }
  break;
case 636:
					// line 2528 "RubyParser.y"
  {  
                  yyVal = null;
                }
  break;
					// line 9790 "-"
// ACTIONS_END
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (yydebug != null) yydebug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.nextToken();
//            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
               yydebug.lex(yyState, yyToken,yyName(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (yydebug != null) yydebug.accept(yyVal);
            return yyVal;
          }
          continue yyLoop;
        }
        if ((yyN = yyGindex[yyM]) != 0 && (yyN += yyState) >= 0
            && yyN < yyTable.length && yyCheck[yyN] == yyState)
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (yydebug != null) yydebug.shift(yyStates[yyTop], yyState);
        continue yyLoop;
      }
    }
  }

// ACTION_BODIES
					// line 2533 "RubyParser.y"

    /** The parse method use an lexer stream and parse it to an AST node 
     * structure
     */
    public RubyParserResult parse(ParserConfiguration configuration, LexerSource source) throws IOException {
        support.reset();
        support.setConfiguration(configuration);
        support.setResult(new RubyParserResult());
        
        lexer.reset();
        lexer.setSource(source);
        lexer.setEncoding(configuration.getDefaultEncoding());

        yyparse(lexer, configuration.isDebug() ? new YYDebug() : null);
        
        return support.getResult();
    }
}
					// line 9842 "-"
