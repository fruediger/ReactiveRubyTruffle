// created by jay 1.0.2 (c) 2002-2004 ats@cs.rit.edu
// skeleton Java 1.0 (c) 2002 ats@cs.rit.edu

					// line 2 "RubyParser.y"
/***** BEGIN LICENSE BLOCK *****
 * Version: EPL 1.0/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Common Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.eclipse.org/legal/cpl-v10.html
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * Copyright (C) 2008-2009 Thomas E Enebo <enebo@acm.org>
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the EPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the EPL, the GPL or the LGPL.
 ***** END LICENSE BLOCK *****/
package org.jruby.parser;

import java.io.IOException;

import org.jruby.ast.ArgsNode;
import org.jruby.ast.ArgumentNode;
import org.jruby.ast.ArrayNode;
import org.jruby.ast.AssignableNode;
import org.jruby.ast.BackRefNode;
import org.jruby.ast.BeginNode;
import org.jruby.ast.BlockAcceptingNode;
import org.jruby.ast.BlockArgNode;
import org.jruby.ast.BlockNode;
import org.jruby.ast.BlockPassNode;
import org.jruby.ast.BreakNode;
import org.jruby.ast.CallNode;
import org.jruby.ast.ClassNode;
import org.jruby.ast.ClassVarNode;
import org.jruby.ast.ClassVarAsgnNode;
import org.jruby.ast.Colon3Node;
import org.jruby.ast.ConstNode;
import org.jruby.ast.ConstDeclNode;
import org.jruby.ast.DStrNode;
import org.jruby.ast.DSymbolNode;
import org.jruby.ast.DXStrNode;
import org.jruby.ast.DefnNode;
import org.jruby.ast.DefsNode;
import org.jruby.ast.DotNode;
import org.jruby.ast.EncodingNode;
import org.jruby.ast.EnsureNode;
import org.jruby.ast.EvStrNode;
import org.jruby.ast.FalseNode;
import org.jruby.ast.FileNode;
import org.jruby.ast.FCallNode;
import org.jruby.ast.FixnumNode;
import org.jruby.ast.FloatNode;
import org.jruby.ast.ForNode;
import org.jruby.ast.GlobalAsgnNode;
import org.jruby.ast.GlobalVarNode;
import org.jruby.ast.HashNode;
import org.jruby.ast.IfNode;
import org.jruby.ast.InstAsgnNode;
import org.jruby.ast.InstVarNode;
import org.jruby.ast.IterNode;
import org.jruby.ast.LambdaNode;
import org.jruby.ast.ListNode;
import org.jruby.ast.LiteralNode;
import org.jruby.ast.ModuleNode;
import org.jruby.ast.MultipleAsgn19Node;
import org.jruby.ast.NextNode;
import org.jruby.ast.NilImplicitNode;
import org.jruby.ast.NilNode;
import org.jruby.ast.Node;
import org.jruby.ast.NonLocalControlFlowNode;
import org.jruby.ast.NumericNode;
import org.jruby.ast.OpAsgnAndNode;
import org.jruby.ast.OpAsgnNode;
import org.jruby.ast.OpAsgnOrNode;
import org.jruby.ast.OptArgNode;
import org.jruby.ast.PostExeNode;
import org.jruby.ast.PreExe19Node;
import org.jruby.ast.RationalNode;
import org.jruby.ast.RedoNode;
import org.jruby.ast.RegexpNode;
import org.jruby.ast.RequiredKeywordArgumentValueNode;
import org.jruby.ast.RescueBodyNode;
import org.jruby.ast.RescueNode;
import org.jruby.ast.RestArgNode;
import org.jruby.ast.RetryNode;
import org.jruby.ast.ReturnNode;
import org.jruby.ast.SClassNode;
import org.jruby.ast.SelfNode;
import org.jruby.ast.StarNode;
import org.jruby.ast.StrNode;
import org.jruby.ast.SymbolNode;
import org.jruby.ast.TrueNode;
import org.jruby.ast.UnnamedRestArgNode;
import org.jruby.ast.UntilNode;
import org.jruby.ast.VAliasNode;
import org.jruby.ast.WhileNode;
import org.jruby.ast.XStrNode;
import org.jruby.ast.YieldNode;
import org.jruby.ast.ZArrayNode;
import org.jruby.ast.ZSuperNode;
import org.jruby.ast.ZYieldNode;
import org.jruby.ast.types.ILiteralNode;
import org.jruby.common.IRubyWarnings;
import org.jruby.common.IRubyWarnings.ID;
import org.jruby.lexer.yacc.ISourcePosition;
import org.jruby.lexer.yacc.ISourcePositionHolder;
import org.jruby.lexer.yacc.LexerSource;
import org.jruby.lexer.yacc.RubyLexer;
import org.jruby.lexer.yacc.RubyLexer.LexState;
import org.jruby.lexer.yacc.StrTerm;
import org.jruby.lexer.yacc.SyntaxException;
import org.jruby.lexer.yacc.SyntaxException.PID;
import org.jruby.util.ByteList;
import org.jruby.util.KeyValuePair;
import org.jruby.util.cli.Options;

public class RubyParser {
    protected ParserSupport support;
    protected RubyLexer lexer;

    public RubyParser() {
        this(new ParserSupport());
    }

    public RubyParser(ParserSupport support) {
        this.support = support;
        lexer = new RubyLexer();
        lexer.setParserSupport(support);
        support.setLexer(lexer);
    }

    public void setWarnings(IRubyWarnings warnings) {
        support.setWarnings(warnings);
        lexer.setWarnings(warnings);
    }
					// line 152 "-"
  // %token constants
  public static final int kCLASS = 257;
  public static final int kMODULE = 258;
  public static final int kDEF = 259;
  public static final int kUNDEF = 260;
  public static final int kBEGIN = 261;
  public static final int kRESCUE = 262;
  public static final int kENSURE = 263;
  public static final int kEND = 264;
  public static final int kIF = 265;
  public static final int kUNLESS = 266;
  public static final int kTHEN = 267;
  public static final int kELSIF = 268;
  public static final int kELSE = 269;
  public static final int kCASE = 270;
  public static final int kWHEN = 271;
  public static final int kWHILE = 272;
  public static final int kUNTIL = 273;
  public static final int kFOR = 274;
  public static final int kBREAK = 275;
  public static final int kNEXT = 276;
  public static final int kREDO = 277;
  public static final int kRETRY = 278;
  public static final int kIN = 279;
  public static final int kDO = 280;
  public static final int kDO_COND = 281;
  public static final int kDO_BLOCK = 282;
  public static final int kRETURN = 283;
  public static final int kYIELD = 284;
  public static final int kSUPER = 285;
  public static final int kSELF = 286;
  public static final int kNIL = 287;
  public static final int kTRUE = 288;
  public static final int kFALSE = 289;
  public static final int kAND = 290;
  public static final int kOR = 291;
  public static final int kNOT = 292;
  public static final int kIF_MOD = 293;
  public static final int kUNLESS_MOD = 294;
  public static final int kWHILE_MOD = 295;
  public static final int kUNTIL_MOD = 296;
  public static final int kRESCUE_MOD = 297;
  public static final int kALIAS = 298;
  public static final int kDEFINED = 299;
  public static final int klBEGIN = 300;
  public static final int klEND = 301;
  public static final int k__LINE__ = 302;
  public static final int k__FILE__ = 303;
  public static final int k__ENCODING__ = 304;
  public static final int kDO_LAMBDA = 305;
  public static final int kSIGNAL = 306;
  public static final int tIDENTIFIER = 307;
  public static final int tFID = 308;
  public static final int tGVAR = 309;
  public static final int tIVAR = 310;
  public static final int tCONSTANT = 311;
  public static final int tCVAR = 312;
  public static final int tLABEL = 313;
  public static final int tCHAR = 314;
  public static final int tUPLUS = 315;
  public static final int tUMINUS = 316;
  public static final int tUMINUS_NUM = 317;
  public static final int tPOW = 318;
  public static final int tCMP = 319;
  public static final int tEQ = 320;
  public static final int tEQQ = 321;
  public static final int tNEQ = 322;
  public static final int tGEQ = 323;
  public static final int tLEQ = 324;
  public static final int tANDOP = 325;
  public static final int tOROP = 326;
  public static final int tMATCH = 327;
  public static final int tNMATCH = 328;
  public static final int tDOT = 329;
  public static final int tDOT2 = 330;
  public static final int tDOT3 = 331;
  public static final int tAREF = 332;
  public static final int tASET = 333;
  public static final int tLSHFT = 334;
  public static final int tRSHFT = 335;
  public static final int tCOLON2 = 336;
  public static final int tCOLON3 = 337;
  public static final int tOP_ASGN = 338;
  public static final int tASSOC = 339;
  public static final int tLPAREN = 340;
  public static final int tLPAREN2 = 341;
  public static final int tRPAREN = 342;
  public static final int tLPAREN_ARG = 343;
  public static final int tLBRACK = 344;
  public static final int tRBRACK = 345;
  public static final int tLBRACE = 346;
  public static final int tLBRACE_ARG = 347;
  public static final int tSTAR = 348;
  public static final int tSTAR2 = 349;
  public static final int tAMPER = 350;
  public static final int tAMPER2 = 351;
  public static final int tTILDE = 352;
  public static final int tPERCENT = 353;
  public static final int tDIVIDE = 354;
  public static final int tPLUS = 355;
  public static final int tMINUS = 356;
  public static final int tLT = 357;
  public static final int tGT = 358;
  public static final int tPIPE = 359;
  public static final int tBANG = 360;
  public static final int tCARET = 361;
  public static final int tLCURLY = 362;
  public static final int tRCURLY = 363;
  public static final int tBACK_REF2 = 364;
  public static final int tSYMBEG = 365;
  public static final int tSTRING_BEG = 366;
  public static final int tXSTRING_BEG = 367;
  public static final int tREGEXP_BEG = 368;
  public static final int tWORDS_BEG = 369;
  public static final int tQWORDS_BEG = 370;
  public static final int tSTRING_DBEG = 371;
  public static final int tSTRING_DVAR = 372;
  public static final int tSTRING_END = 373;
  public static final int tLAMBDA = 374;
  public static final int tLAMBEG = 375;
  public static final int tNTH_REF = 376;
  public static final int tBACK_REF = 377;
  public static final int tSTRING_CONTENT = 378;
  public static final int tINTEGER = 379;
  public static final int tIMAGINARY = 380;
  public static final int tFLOAT = 381;
  public static final int tRATIONAL = 382;
  public static final int tREGEXP_END = 383;
  public static final int tSYMBOLS_BEG = 384;
  public static final int tQSYMBOLS_BEG = 385;
  public static final int tDSTAR = 386;
  public static final int tSTRING_DEND = 387;
  public static final int tLABEL_END = 388;
  public static final int tLOWEST = 389;
  public static final int yyErrorCode = 256;

  /** number of final state.
    */
  protected static final int yyFinal = 1;

  /** parser tables.
      Order is mandated by <i>jay</i>.
    */
  protected static final short[] yyLhs = {
//yyLhs 640
    -1,   142,     0,   133,   134,   134,   134,   134,   135,   145,
   135,    37,    36,    38,    38,    38,    38,    44,   146,    44,
   147,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    31,    31,    40,    40,    40,    40,
    40,    40,    45,    32,    32,    59,    59,   149,   110,   139,
    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
    43,   111,   111,   122,   122,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,    71,    71,   100,   100,   101,
   101,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,     6,
     6,    30,    30,    30,     7,     7,     7,     7,     7,   115,
   115,   116,   116,    61,   150,    61,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    73,    76,    76,    76,    76,    53,    57,
    57,   125,   125,   125,   125,   125,    51,    51,    51,    51,
    51,   152,    55,   104,   103,   103,    79,    79,    79,    79,
    35,    35,    70,    70,    70,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,   153,    42,   154,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,   156,
   158,    42,   159,   160,    42,    42,    42,   161,   162,    42,
   163,    42,   165,   166,    42,   167,    42,   168,    42,   169,
   170,    42,    42,    42,    42,    42,    42,   140,   171,   141,
    46,   155,   155,   155,   157,   157,    49,    49,    47,    47,
   124,   124,   126,   126,    84,    84,   127,   127,   127,   127,
   127,   127,   127,   127,   127,    91,    91,    91,    91,    90,
    90,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    68,    68,    67,    67,
    67,   119,   119,   118,   118,   128,   128,   172,   121,    65,
    65,   120,   120,   173,   109,    58,    58,    58,    58,    22,
    22,    22,    22,    22,    22,    22,    22,    22,   174,   108,
   175,   108,    74,    48,    48,   113,   113,    75,    75,    75,
    50,    50,    52,    52,    28,    28,    28,    15,    16,    16,
    16,    17,    18,    19,    25,    25,    81,    81,    27,    27,
    87,    87,    85,    85,    26,    26,    88,    88,    80,    80,
    86,    86,    20,    20,    21,    21,    24,    24,    23,   176,
    23,   177,   178,    23,    62,    62,    62,    62,     2,     1,
     1,     1,     1,    29,    33,    33,    34,    34,    34,    34,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,    63,    63,    54,   179,    54,    54,
    69,   180,    69,    92,    92,    92,    92,    89,    89,    64,
    64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,   132,   132,   132,   132,     9,     9,
   117,   117,    82,    82,   138,    93,    93,    94,    94,    95,
    95,    96,    96,   136,   136,   137,   137,    60,   123,   102,
   102,    83,    83,    11,    11,    13,    13,    12,    12,   107,
   106,   106,    14,   181,    14,    97,    97,    98,    98,    99,
    99,    99,    99,     3,     3,     3,     4,     4,     4,     4,
     5,     5,     5,    10,    10,   143,   143,   148,   148,   129,
   130,   151,   151,   151,   164,   164,   144,   144,    78,   105,
    }, yyLen = {
//yyLen 640
     2,     0,     2,     2,     1,     1,     3,     2,     1,     0,
     5,     4,     2,     1,     1,     3,     2,     1,     0,     5,
     0,     4,     3,     3,     3,     2,     3,     3,     3,     3,
     3,     4,     1,     3,     3,     6,     5,     5,     5,     5,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     2,     1,     1,     1,     1,     1,     4,     0,     5,     1,
     2,     3,     4,     5,     4,     5,     2,     2,     2,     2,
     2,     1,     3,     1,     3,     1,     2,     3,     5,     2,
     4,     2,     4,     1,     3,     1,     3,     2,     3,     1,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     4,     3,     3,     3,     3,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     4,     3,     3,     3,     3,     2,     1,     1,
     1,     2,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     5,     3,     5,     6,     5,     5,     5,     5,     4,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     4,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     2,     2,     3,     3,     3,     3,
     3,     6,     1,     1,     1,     2,     4,     2,     3,     1,
     1,     1,     1,     2,     4,     2,     1,     2,     2,     4,
     1,     0,     2,     2,     2,     1,     1,     2,     3,     4,
     1,     1,     3,     4,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     0,     3,     0,
     4,     3,     3,     2,     3,     3,     1,     4,     3,     1,
     5,     4,     3,     2,     1,     2,     2,     6,     6,     0,
     0,     7,     0,     0,     7,     5,     4,     0,     0,     9,
     0,     6,     0,     0,     8,     0,     5,     0,     6,     0,
     0,     9,     1,     1,     1,     1,     1,     2,     0,     4,
     1,     1,     1,     2,     1,     1,     1,     5,     1,     2,
     1,     1,     1,     3,     1,     3,     1,     4,     6,     3,
     5,     2,     4,     1,     3,     4,     2,     2,     1,     2,
     0,     6,     8,     4,     6,     4,     2,     6,     2,     4,
     6,     2,     4,     2,     4,     1,     1,     1,     3,     1,
     4,     1,     4,     1,     3,     1,     1,     0,     3,     4,
     1,     3,     3,     0,     5,     2,     4,     5,     5,     2,
     4,     4,     3,     3,     3,     2,     1,     4,     0,     5,
     0,     5,     5,     1,     1,     6,     0,     1,     1,     1,
     2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     2,     3,     3,     3,     3,     3,     0,     3,     1,     2,
     3,     3,     0,     3,     3,     3,     3,     3,     0,     3,
     0,     3,     0,     2,     0,     2,     0,     2,     1,     0,
     3,     0,     0,     5,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     3,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     4,     2,
     3,     0,     3,     4,     2,     2,     1,     2,     0,     6,
     8,     4,     6,     4,     6,     2,     4,     6,     2,     4,
     2,     4,     1,     0,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     3,     1,     2,     1,     2,     1,     1,
     3,     1,     3,     1,     1,     2,     1,     3,     3,     1,
     3,     1,     3,     1,     1,     2,     1,     1,     1,     2,
     2,     0,     1,     0,     4,     1,     2,     1,     3,     3,
     2,     4,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     1,     0,     1,     2,
     2,     0,     1,     1,     1,     1,     1,     2,     0,     0,
    }, yyDefRed = {
//yyDefRed 1095
     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   329,   332,     0,     0,     0,   354,   355,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     9,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   458,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   482,   484,   486,     0,     0,   417,
   534,   535,   506,   509,   507,   508,     0,     0,   455,    59,
   296,     0,   459,   297,   298,     0,   299,   300,   295,   456,
    32,    46,   454,   504,     0,     0,     0,     0,     0,     0,
   303,     0,    54,     0,     0,    85,     0,     4,   301,   302,
     0,     0,    71,     0,     2,     0,     5,     0,   356,     7,
   352,   353,   316,     0,     0,   516,   515,   517,   518,     0,
     0,   520,   519,   521,     0,   512,   511,     0,   514,     0,
     0,     0,     0,   132,     0,   360,     0,   304,     0,   345,
   186,   197,   187,   210,   183,   203,   193,   192,   208,   191,
   190,   185,   211,   195,   184,   198,   202,   204,   196,   189,
   205,   212,   207,     0,     0,     0,     0,   182,   201,   200,
   213,   214,   216,   217,   218,   181,   188,   179,   180,     0,
     0,     0,   215,     0,   136,     0,   171,   172,   168,   149,
   150,   151,   158,   155,   157,   152,   153,   173,   174,   159,
   160,   603,   165,   164,   148,   170,   167,   166,   162,   163,
   156,   154,   146,   169,   147,   175,   161,   347,   137,     0,
   602,   138,   206,   199,   209,   194,   176,   177,   178,   134,
   135,   140,   139,   142,     0,   141,   143,     0,     0,     0,
     0,     0,     0,    14,    13,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   634,   635,     0,     0,     0,
   636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   370,   371,
     0,     0,     0,     0,     0,   482,     0,     0,   276,    69,
     0,     0,     0,   607,   280,    70,    68,     0,    67,     0,
     0,   435,    66,     0,   628,     0,     0,    20,     0,     0,
     0,   358,   357,   239,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   264,     0,     0,     0,   605,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   255,
    50,   254,   501,   500,   502,   498,   499,     0,     0,     0,
     0,     0,     0,     0,     0,   326,     0,     0,     0,     0,
     0,   460,   440,   438,   325,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   423,   425,
     0,     0,     0,   623,   624,     0,     0,    87,     0,     0,
     0,     0,     0,     0,     3,     0,   429,     0,   323,     0,
   505,     0,   129,     0,   131,     0,   537,   340,   536,     0,
     0,     0,     0,     0,     0,   349,   144,     0,     0,     0,
     0,   306,    12,     0,     0,   362,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   637,     0,
     0,     0,     0,     0,     0,   337,   610,   287,   283,     0,
   612,     0,     0,   277,   285,     0,   278,     0,   318,     0,
   282,   272,   271,     0,     0,     0,     0,   322,    49,    22,
    24,    23,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   311,     0,     0,   308,   314,     0,   632,
   265,     0,   267,   315,   606,     0,    89,     0,     0,     0,
     0,     0,   491,   489,   503,   488,   485,   461,   483,   462,
   463,   487,   464,   465,   468,     0,   474,   475,     0,   569,
   566,   565,   564,   567,   574,   583,     0,     0,   594,   593,
   598,   597,   584,     0,     0,     0,     0,   591,   420,     0,
     0,     0,   562,   581,     0,   546,   572,   568,     0,     0,
     0,   470,   471,     0,   476,   477,     0,     0,     0,    26,
    27,    28,    29,    30,    47,    48,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   618,     0,     0,   619,   433,     0,
     0,     0,     0,   432,     0,   434,     0,   616,   617,     0,
    40,     0,     0,    45,    44,     0,    41,   286,     0,     0,
     0,     0,     0,    88,    33,    42,   290,     0,    34,     0,
     6,    57,    61,     0,   539,     0,     0,     0,     0,     0,
     0,   133,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   448,     0,     0,   449,     0,     0,   368,    15,     0,
   363,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   336,   365,   330,   364,   333,     0,     0,     0,     0,     0,
     0,     0,   609,     0,     0,     0,   284,   608,   317,   629,
     0,     0,   268,   321,    21,     0,     0,    31,     0,     0,
     0,     0,   310,     0,     0,     0,     0,     0,     0,     0,
     0,   492,     0,   467,   469,   479,     0,     0,   372,     0,
   374,     0,     0,     0,   595,   599,     0,   560,     0,     0,
   418,     0,   555,     0,   558,     0,   544,   585,     0,   545,
   575,   473,   481,   409,     0,   407,     0,   406,     0,     0,
     0,     0,     0,   270,     0,   430,   269,     0,     0,   431,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
     0,     0,     0,     0,   343,     0,     0,   437,   346,   604,
     0,     0,     0,   350,   145,     0,     0,     0,   451,   369,
     0,    11,   453,     0,   366,     0,     0,     0,     0,     0,
     0,     0,   335,     0,     0,     0,     0,     0,     0,   611,
   289,   279,     0,   320,    10,   359,   266,    90,     0,     0,
   494,   495,   496,   490,   497,     0,     0,     0,     0,   571,
     0,     0,   587,   570,     0,   547,     0,     0,     0,     0,
   573,     0,   592,     0,   582,   600,     0,     0,     0,     0,
     0,   405,   579,     0,     0,   388,     0,   589,     0,     0,
     0,     0,     0,     0,    36,     0,    37,     0,    63,    39,
     0,    38,     0,    65,     0,   630,   428,   427,     0,     0,
     0,     0,     0,     0,     0,   538,   341,   540,   348,   542,
     0,    19,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   450,     0,   452,
     0,   327,     0,   328,   288,     0,     0,     0,   338,     0,
     0,   373,     0,     0,     0,   375,   419,     0,     0,   561,
   422,   421,     0,   553,     0,   551,     0,   556,   559,   543,
     0,     0,   403,     0,     0,   398,     0,   386,     0,   401,
   408,   387,     0,     0,     0,     0,   441,   439,     0,   424,
    35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   443,   442,   444,   331,   334,     0,   493,     0,
     0,     0,     0,   415,     0,   413,   416,     0,     0,     0,
     0,     0,     0,   389,   410,     0,     0,   580,     0,     0,
     0,   590,   313,     0,    58,   344,     0,     0,     0,     0,
     0,     0,   445,     0,     0,     0,     0,     0,   412,   554,
     0,   549,   552,   557,     0,   404,     0,   395,     0,   393,
   385,     0,   399,   402,     0,     0,   351,     0,   367,   339,
     0,   414,     0,     0,     0,     0,     0,   550,   397,     0,
   391,   394,   400,     0,   392,
    }, yyDgoto = {
//yyDgoto 182
     1,   365,    68,    69,   680,   643,   133,   232,   637,   873,
   425,   574,   575,   576,   219,    70,    71,    72,    73,    74,
   368,   367,    75,   546,   370,    76,    77,   555,    78,    79,
   134,    80,    81,    82,    83,   665,   239,   240,   241,   242,
    85,    86,    87,    88,   243,   259,   324,   834,  1013,   835,
   827,   501,   831,   645,   447,   308,    90,   795,    91,    92,
   577,   234,   863,   261,   578,   579,   889,   785,   786,   686,
   656,    94,    95,   300,   477,   693,   334,   262,   244,   503,
   374,   372,   580,   581,   759,   378,   380,    98,    99,   767,
   982,  1033,   875,   583,   892,   893,   584,   340,   504,   303,
   100,   537,   894,   493,   304,   494,   776,   585,   438,   419,
   672,   101,   102,   460,   263,   235,   236,   586,  1024,   870,
   770,   375,   331,   897,   290,   505,   760,   761,  1025,   498,
   801,   221,   587,   104,   105,   106,   588,   589,   590,   138,
   108,   322,     2,   268,   269,   319,   458,   512,   499,   813,
   689,   530,   309,   333,   525,   466,   271,   712,   845,   272,
   846,   720,  1017,   676,   467,   673,   924,   452,   454,   688,
   930,   517,   376,   632,   598,   597,   752,   751,   859,   675,
   687,   453,
    }, yySindex = {
//yySindex 1095
     0,     0, 18080, 19379,  5759, 21056, 17513, 17852, 18210, 20540,
 20540,  7933,     0,     0,  2750, 18469, 18469,     0,     0, 18469,
  -213,  -155,     0,     0,     0,     0,    68, 17739,   231,     0,
  -115,     0,     0,     0,   -49,     0,     0,     0,     0,     0,
     0,     0, 20669, 20669,   957,    48, 18340, 20540, 18859, 19249,
  5230, 20669, 20798, 17626,     0,     0,     0,   333,   344,     0,
     0,     0,     0,     0,     0,     0,   359,   420,     0,     0,
     0,   105,     0,     0,     0,  -125,     0,     0,     0,     0,
     0,     0,     0,     0,  1383,    26,  5613,     0,   195,   -46,
     0,   -77,     0,   141,   454,     0,   439,     0,     0,     0,
  6262,   531,     0,   252,     0,   146,     0,  -126,     0,     0,
     0,     0,     0,  -213,  -155,     0,     0,     0,     0,   272,
   231,     0,     0,     0,     0,     0,     0,     0,     0,   957,
 20540,   388, 18210,     0,   104,     0,    25,     0,  -126,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   -77,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   596,     0,     0, 19508, 18210,   392,
   403,   146,  1383,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   365,    26,   128,
   480,   340,   620,   348,   128,     0,     0,   146,   421,   652,
     0, 20540, 20540,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   402,   511,     0,     0,     0,
   449, 20669, 20669, 20669, 20669,     0, 20669,  5613,     0,     0,
   395,   694,   696,     0,     0,     0,     0,  6670,     0, 18469,
 18469,     0,     0,  8063,     0, 20540,   -84,     0, 19637,   382,
 18210,     0,     0,     0,   544,   430,   432,   417, 18340,   426,
     0,   231,    26,   231,   418,     0,   178,   184,   395,     0,
   396,   184,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   451, 21185,   574,     0,   728,     0,
     0,     0,     0,     0,     0,     0,     0,   731,   785,   883,
   752,   401,   937,   406,   -72,     0,  3151,   408,  1122,   409,
   -11,     0,     0,     0,     0, 20540, 20540, 20540, 20540, 19508,
 20540, 20540, 20669, 20669, 20669, 20669, 20669, 20669, 20669, 20669,
 20669, 20669, 20669, 20669, 20669, 20669, 20669, 20669, 20669, 20669,
 20669, 20669, 20669, 20669, 20669, 20669, 20669, 20669,     0,     0,
  4119,  4622, 18469,     0,     0, 21962, 20798,     0, 19766, 18340,
 17123,   741, 19766, 20798,     0, 17254,     0,   442,     0,   445,
     0,    26,     0,     0,     0,   146,     0,     0,     0,  6120,
  9542, 18469, 18210, 20540,   452,     0,     0,  1383,   434, 19895,
   525,     0,     0, 17384,   417,     0, 18210,   530, 10074, 21522,
 18469, 20669, 20669, 20669, 18210,   421, 20024,   540,     0,   440,
   440,     0, 21577, 21632, 18469,     0,     0,     0,     0,  1168,
     0, 20669, 18599,     0,     0, 18989,     0,   231,     0,   463,
     0,     0,     0,   766,   771,   231,    43,     0,     0,     0,
     0,     0, 17852, 20540,  5613, 18080,   455, 18210, 10074, 21522,
 20669, 20669,   231,     0,     0,   231,     0,     0, 19119,     0,
     0, 19249,     0,     0,     0,     0,     0,   775, 21687, 21742,
 18469, 21185,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   112,     0,     0,   788,     0,
     0,     0,     0,     0,     0,     0,   638,  3177,     0,     0,
     0,     0,     0,   762,   528,   532,   792,     0,     0,  -156,
   797,   802,     0,     0,   805,     0,     0,     0,   543,   808,
 20669,     0,     0,   232,     0,     0,   823,   216,   216,     0,
     0,     0,     0,     0,     0,     0,   430,  3289,  3289,  3289,
  3289,  2644,  2644,  3675,  3593,  3289,  3289,  3276,  3276,  2027,
  2027,   430,  2270,   430,   430,   424,   424,  2644,  2644,  2219,
  2219,  2602,   216,   521,     0,   524,  -155,     0,     0,   526,
     0,   534,  -155,     0,     0,     0,   231,     0,     0,  -155,
     0,  5613, 20669,     0,     0,  4198,     0,     0,   806,   830,
   231, 21185,   832,     0,     0,     0,     0,     0,     0,  4701,
     0,     0,     0,   146,     0, 20540, 18210,  -155,     0,     0,
  -155,     0,   231,   613,    43,  3177, 18210,  3177, 17965, 17852,
 18080,     0,     0,   545,     0, 18210,   616,     0,     0,   167,
     0,   551,   560,   563,   569,   231,  4198,   525,   619,   243,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   231,
 20540, 20669,     0, 20669,   395,   696,     0,     0,     0,     0,
 18599, 18989,     0,     0,     0,    43,   550,     0,   557,   430,
  5613,     0,     0,   184, 21185,     0,     0,     0,     0,   231,
   775,     0,   457,     0,     0,     0,   638,   585,     0,   880,
     0,   231,   231, 20669,     0,     0,  2662,     0, 18210, 18210,
     0,  3177,     0,  3177,     0,  1186,     0,     0,   292,     0,
     0,     0,     0,     0,   722,     0, 18210,     0, 18210,   868,
 18210, 20798, 20798,     0,   442,     0,     0, 20798, 20798,     0,
   442,   595,   590,   195,  -125,     0, 20669, 20798, 20153,     0,
   775, 21185, 20669,   216,     0,   146,   675,     0,     0,     0,
   231,   677,   146,     0,     0,   580, 21314,   128,     0,     0,
 18210,     0,     0, 20540,     0,   688, 20669, 20669, 20669, 20669,
   621,   701,     0, 20282, 18210, 18210, 18210,     0,   440,     0,
     0,     0,   916,     0,     0,     0,     0,     0,     0, 18210,
     0,     0,     0,     0,     0,   231,    15,   919,  2200,     0,
   627,   909,     0,     0,   929,     0,   718,   628,   939,   948,
     0,   952,     0,   929,     0,     0,   808,   943,   954,   231,
   973,     0,     0,   978,   979,     0,   683,     0,   808, 21443,
   772,   684, 20669,   784,     0,  5613,     0,  5613,     0,     0,
  5613,     0,  5613,     0, 20798,     0,     0,     0,  5613, 20669,
     0,   775,  5613, 18210, 18210,     0,     0,     0,     0,     0,
   452,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   748,   579,     0,     0, 18210,     0,
   128,     0, 20669,     0,     0,    77,   786,   799,     0, 18989,
   689,     0,  1022,    15,   867,     0,     0,  1402,  2662,     0,
     0,     0,  2662,     0,  3177,     0,  2662,     0,     0,     0,
 21443,  2662,     0,   710,  3240,     0,  1186,     0,  3240,     0,
     0,     0,     0,     0,   769,   666,     0,     0,  5613,     0,
     0,  5613,     0,   737,   827, 18210,     0, 21797, 21852, 18469,
   392, 18210,     0,     0,     0,     0,     0, 18210,     0,    15,
  1022,    15,  1050,     0,   305,     0,     0,   929,  1061,   929,
   929,   666,  1062,     0,     0,  1069,  1073,     0,   808,  1094,
  1062,     0,     0, 21907,     0,     0,   862,     0,     0,     0,
     0,   231,     0,   167,   875,  1022,    15,  1402,     0,     0,
  2662,     0,     0,     0,  2662,     0,  2662,     0,  3240,     0,
     0,  2662,     0,     0,     0,     0,     0,     0,     0,     0,
  1022,     0,   929,  1062,  1099,  1062,  1062,     0,     0,  2662,
     0,     0,     0,  1062,     0,
    }, yyRindex = {
//yyRindex 1095
     0,     0,   223,     0,     0,     0,     0,     0,  1085,     0,
     0,   876,     0,     0,     0, 14893, 14998,     0,     0, 15104,
  5033,  4530, 15393, 15470, 15576, 15696, 20927,     0, 20411,     0,
     0, 15773, 15877, 15999,     0,  5395,  3524, 16125, 16241,  5525,
 16351,     0,     0,     0,     0,     0,   170,    65,   801,   790,
   150,     0,     0,  1243,     0,     0,     0,  1262,   279,     0,
     0,     0,     0,     0,     0,     0,  1287,   291,     0,     0,
     0, 10309,     0,     0,     0, 10411,     0,     0,     0,     0,
     0,     0,     0,     0,    84, 12960,  9068, 10525, 10661,     0,
     0, 16548,     0, 16428,     0,     0,     0,     0,     0,     0,
   160,     0,     0,     0,     0,    49,     0, 18729,     0,     0,
     0,     0,     0, 10717,  8358,     0,     0,     0,     0,     0,
   813,     0,     0,     0,  6859,     0,     0,  6989,     0,     0,
     0,     0,   170,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   892,  1051,  1102,  1253,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1462,
  1577,  2153,     0,  2759,     0,  3130,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0, 17079,     0,     0,     0,    94,   397,
     0,  2643,  1082,     0,     0,  8599,  8708,  8825,  8949,  9131,
  9255,  9357,  2386,  9471,  9663,  2518,  9777,     0,  2157,     0,
     0, 10003,     0,     0,     0,     0,     0,   876,     0,   888,
     0,     0,     0,   747,   930,  1105,  1241,  1332,  1489,  1600,
  1326,  1703,  1790,  1464,  1824,     0,     0,  1895,     0,     0,
     0,     0,     0,     0,     0,     0,     0, 14654,     0,     0,
 15226,  1760,  1760,     0,     0,     0,     0,   822,     0,     0,
   238,     0,     0,   822,     0,     0,     0,     0,     0,     0,
    30,     0,     0,     0,     0, 10933, 10831, 16530,   170,     0,
   181,   822,   245,   822,     0,     0,   821,   821,     0,     0,
     0,   804,   739,  1662,  1886,  2098,  2299,  4589,  6031,  1054,
  6534,  6981,  1395,  8082,     0,     0,     0,  8412,   169,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -141,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,     0,     0,     0,     0,     0,     0,   170,
   190,   230,     0,     0,     0,    62,     0,   956,     0,     0,
     0,   159,     0,  7403,     0,     0,     0,     0,     0,     0,
     0,    72,  1085,     0,    32,     0,     0,  1212,     0,   319,
   467,     0,     0,  2677, 10185,     0,  1015,  7533,     0,     0,
    72,     0,     0,     0,   725,     0,     0,     0,     0,     0,
     0,  2138,     0,     0,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   822,     0,     0,
     0,     0,     0,   182,   182,   822,   822,     0,     0,     0,
     0,     0,     0,     0, 13749,    30,     0,    30,     0,     0,
     0,     0,   822,     0,    52,   822,     0,     0,   835,     0,
     0,  -174,     0,     0,     0,  8445,     0,   269,     0,     0,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   214,     0,     0,
     0,     0,     0,    46,    33,     0,    47,     0,     0,     0,
    47,    47,     0,     0,   199,     0,     0,     0,   210,   199,
   155,     0,     0,     0,     0,     0,     0,  7664,  7802,     0,
     0,     0,     0,     0,     0,     0, 11057, 12888, 13024, 13129,
 13215, 12440, 12554, 13301, 13575, 13403, 13489,  8468, 13663, 11871,
 11988, 11181, 12097, 11283, 11397, 11645, 11747, 12681, 12783, 12214,
 12338,  1114,  7664,  5898,     0,  6028,  4903,     0,     0,  6401,
  3897,  6531, 18729,     0,  4027,     0,   836,     0,     0,  1989,
     0, 13835,     0,     0,     0, 17016,     0,     0,     0,     0,
   822,     0,   275,     0,     0,     0,     0, 17029,     0, 14743,
     0,     0,     0,     0,     0,     0,  1085,  9879,  7131,  7261,
     0,     0,   836,     0,   822,   247,  1085,   197,     0,     0,
    30,     0,   743,   187,     0,   618,   911,     0,     0,   911,
     0,  2891,  3021,  3394,  4400,   836, 14805,   911,     0,     0,
     0,     0,     0,     0,     0,  1855,  3230,  3733,   708,   836,
     0,     0,     0,     0, 16639,  1760,     0,     0,     0,     0,
   183,   198,     0,     0,     0,   822,     0,     0,     0, 11531,
 13923,   152,     0,   821,     0,  1671,  1861,  8443,   589,   836,
   276,     0,     0,     0,     0,     0,     0,   256,     0,   264,
     0,   822,    24,     0,     0,     0,     0,     0,   115,    30,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    60,     0,   115,     0,    30,     0,
   115,     0,     0,     0, 16701,     0,     0,     0,     0,     0,
 16803, 15287,     0, 16863,  1568, 16914,     0,     0,     0,     0,
   309,     0,     0,  7802,     0,     0,     0,     0,     0,     0,
   822,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  8228,     0,     0,     0,   663,   115,   115,  1366,     0,     0,
     0,     0,   182,     0,     0,     0,     0,     0,  8236,    30,
     0,     0,     0,     0,     0,   822,     0,   265,     0,     0,
     0,  -158,     0,     0,    47,     0,     0,     0,    47,    47,
     0,    47,     0,    47,     0,     0,   199,    51,   107,    60,
   107,     0,     0,   113,   107,     0,     0,     0,   113,    78,
     0,     0,     0,     0,     0, 14009,     0, 14095,     0,     0,
 14183,     0, 14269,     0,     0,     0,     0,     0, 14355,     0,
 16966,   337, 14443,    30,  1085,     0,     0,     0,     0,     0,
    32,     0,   855,  1006,  1198,  1238,  1252,  1631,  1708,   626,
  2086,  2228,   853,  2230,     0,     0,  2231,     0,  1085,     0,
     0,     0,     0,     0,     0,   911,     0,     0,     0,   225,
     0,     0,   267,     0,   270,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   116,     0,     0,     0,     0,     0,
     0,     0,  1420,  1541,     0,   108,     0,     0, 14529,     0,
     0, 14615, 16977,     0,     0,  1085,  2302,     0,     0,    72,
   397,  1015,     0,     0,     0,     0,     0,   115,     0,     0,
   285,     0,   297,     0,  -157,     0,     0,    47,    47,    47,
    47,   114,   107,     0,     0,   107,   107,     0,   113,   107,
   107,     0,     0,     0,     0,     0,     0,  1842,  1864,  2056,
   717,   836,     0,   911,     0,   299,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  5091,   778,     0,  1281,     0,     0,
   311,     0,    47,   107,   107,   107,   107,     0,     0,     0,
     0,     0,     0,   107,     0,
    }, yyGindex = {
//yyGindex 182
     0,     0,    14,     0,  -370,     0,   -60,     1,    -5,   414,
   967,     0,     0,   529,     0,     0,     0,  1117,     0,     0,
   895,  1142,     0,  1380,     0,     0,     0,   828,     0,    17,
  1195,  -392,   -27,     0,    88,     0,   -32,  -437,     0,    35,
   234,  1678,    59,     4,   744,    -1,   131,  -447,     0,   158,
     0,   809,     0,    13,     0,    -4,  1207,   577,     0,     0,
  -662,     0,     0,   840,  -481,     0,     0,     0,  -348,   300,
  -170,   -88,   -17,   565,  -459,     0,     0,   997,    -2,   284,
     0,     0, 12264,   460,  -168,     0,     0,     0,     0,  -451,
  1510,   461,  -291,   469,   274,     0,     0,     0,    11,  -466,
     0,  -434,   280,  -294,  -426,     0,  -558,  8034,   -71,   462,
  -618,  1244,   -18,   257,  1190,     0,   -21,  -690,     0,  -663,
     0,     0,  -197,  -873,     0,  -383,  -816,   512,   215,    40,
  -647,     0,  -859,  -422,     0,     8,     0,  2983,  1550,   699,
     0,     0,     0,   -29,   -25,     0,     0,     0,   -23,     0,
     0,  -267,     0,     0,     0,  -246,     0,  -448,     0,     0,
     0,     0,     0,     0,    56,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,
    };
  protected static final short[] yyTable = {
//yyTable 22349
    97,   218,   218,   315,   384,   318,   317,   217,   496,   264,
   267,   109,   431,   696,   329,   683,   708,   312,   474,   298,
   298,   231,   218,   298,   233,   360,   302,   302,   330,   727,
   302,   779,   714,   358,   311,   817,   653,    84,    84,   646,
   638,   231,   541,   596,   233,   422,   335,   339,   218,   625,
   636,   642,   965,   314,   366,   649,   570,   548,   840,   337,
   341,   569,   626,   135,   135,   727,   726,   270,   682,   726,
   532,   444,   847,   135,   534,   307,   434,   596,   314,   677,
   435,   880,   638,   627,     8,   582,   762,   705,   578,   638,
   570,   541,   596,   736,     8,   569,    86,   439,   636,   642,
   329,   719,   858,   437,   638,   570,   548,   750,  1026,   135,
   569,   882,   677,    72,   266,  1041,   451,   390,   577,   627,
   436,   896,   578,   601,   588,   638,   396,   311,   307,   772,
   774,   522,   326,    89,    89,   136,   136,   578,   266,    89,
   260,   260,   260,     8,   753,   286,   260,   260,   677,   768,
   260,   436,   577,   638,   382,   382,   266,   749,   588,   135,
    83,   270,    74,   265,   563,   576,   390,   577,   677,   342,
    75,   633,   601,   588,   638,   396,   908,    89,   260,    81,
   638,   356,   913,   260,   411,   627,   310,   265,   529,   633,
   448,    73,   639,   273,   529,  1041,    86,   638,  1026,   576,
    79,   411,   627,   965,   820,   265,   822,   563,   275,   601,
   496,    83,   462,    72,   576,   310,   463,   440,   342,   769,
   586,    75,   528,   638,   563,   509,   983,   810,   531,   638,
    81,   356,   660,   638,   563,   274,   383,   383,   475,   816,
    76,   314,    71,   258,   258,   258,   638,   320,   638,   821,
   788,    79,   423,   266,   586,   309,   563,   563,   601,   424,
   841,   260,   666,    89,   781,   727,   383,   536,   825,   586,
   479,   480,   457,   563,   376,   381,   582,   384,   880,    84,
   379,   332,   638,   420,   790,    77,    82,   843,   516,   691,
   421,    76,   510,   511,   880,   382,   329,   270,   321,   301,
   301,   557,   265,   301,   726,   726,   558,   377,   502,   380,
   330,   298,   882,   298,   298,   314,   390,   391,   302,    80,
   302,   378,   559,   270,   560,   561,   562,   563,   979,   638,
    84,    72,   336,   390,   391,   987,    77,    82,   596,   541,
   991,   541,   541,   541,   541,   541,   695,    78,   476,  1057,
   541,   570,   548,   507,   449,   756,   638,   638,   638,   327,
   445,   450,   595,   638,   441,   371,   627,   596,    89,    89,
    80,   524,   541,   526,   880,   596,   373,   921,   638,   638,
   541,   541,   541,   541,   599,   600,   601,   602,   570,   548,
   681,   377,   596,   638,   582,   465,   582,   329,    78,   650,
   958,   654,   260,   260,  1077,   664,   668,   307,   596,   313,
   569,   330,   625,   662,   135,   653,   644,   638,   541,   627,
   502,   570,   548,   969,   603,   626,   298,   973,   975,    83,
   977,   851,   978,   638,   699,   833,   695,   578,   260,    75,
   260,   260,   707,   670,   260,   644,   260,     8,    81,   502,
   266,    89,   379,   536,   638,   298,    18,   694,   697,    89,
   576,   446,   638,   844,   644,   923,   390,   577,   502,    79,
    84,    54,   601,   588,   298,   396,   856,   418,   644,   426,
  1070,   638,   502,   542,   543,   738,   356,  1004,   298,   135,
   545,   734,    83,   727,    74,   638,  1014,   576,   427,   265,
   428,   674,    75,   725,   601,   258,   258,   218,  1012,    76,
   465,    81,   638,    97,   644,   586,   260,   260,   260,   260,
    89,   260,   260,    73,   639,   273,   231,   639,   273,   233,
   576,   638,    79,   726,   644,   713,   713,   728,   502,   743,
   275,   601,   783,   275,   298,   732,   733,   506,    84,   508,
    84,   638,   586,   260,    77,    82,   563,   260,   851,   260,
    89,   356,   741,   260,   260,   742,    89,   274,  1046,   586,
   274,   470,    76,   536,   601,   784,  1059,  1061,  1062,  1063,
   638,   948,   260,    89,   260,   586,   638,   309,    80,   563,
   433,   301,   432,   301,    89,   787,   787,    89,   383,   107,
   135,   260,   484,   542,   543,    89,   376,   381,   789,   384,
   545,    84,   379,   313,   338,   260,    78,    77,    82,   258,
   258,   258,   258,   802,   604,   605,  1051,   382,   638,   866,
   787,  1087,   794,   107,   796,   470,   110,   677,   800,   377,
   456,   380,   570,   571,   260,   803,    89,   796,    89,   793,
   107,    80,   478,   378,   459,   799,   857,   478,   638,   802,
   446,   446,   793,   829,   480,   540,   446,   461,   824,   480,
  1009,   260,   356,   638,   815,   796,   464,   638,   471,    78,
   312,   472,   802,   218,   218,   110,   473,   684,    97,   823,
   793,   828,   476,   799,   832,   442,   802,   697,   962,   443,
   809,   107,   107,   231,  1011,   697,   233,   107,   107,   107,
   107,   478,   659,   481,   107,   107,   659,   510,   107,   848,
   135,   711,   638,   536,   819,    84,   802,   126,   485,   814,
   638,   638,   314,   917,   491,   638,   876,   877,   492,   871,
   495,   852,   392,   659,   515,   107,   107,   735,   392,    97,
   520,   107,   107,   447,   900,   521,   901,   451,   903,   533,
   709,   871,   535,   527,   904,   906,   860,   861,   523,   862,
   909,   911,   541,   407,   552,   853,   126,   409,   410,   556,
   654,   591,   594,    97,   638,   663,   513,   286,   312,   671,
   573,    97,   356,   685,   695,  1020,   690,   700,   949,   312,
    97,   869,   447,   135,   710,   729,   260,    89,   312,   468,
   730,   787,   955,   956,   957,   731,   469,    89,   737,   744,
   755,    89,   312,   763,   299,   305,    89,   960,   306,   107,
   516,   107,   950,    60,    61,   764,   766,   312,   516,   765,
   482,   771,    93,    93,   137,   137,   773,   483,    93,   775,
   777,   260,   778,  1055,   287,   782,   486,   487,   488,   791,
   927,   490,   792,   113,   797,   116,   871,   807,   107,   312,
   135,   925,   798,   518,   808,   356,   811,   818,   929,   830,
   519,   638,   638,   842,   826,   135,    93,  1000,  1080,   836,
   357,  1003,   559,   110,   560,   561,   562,   563,   837,    89,
    89,   838,   206,   538,   713,   961,   613,   839,  1007,   258,
   539,  1021,   113,   854,   116,  1008,  1010,    89,   312,    89,
   855,    89,   260,   260,   868,   312,   902,   638,   260,   260,
   617,   107,   638,   914,   638,   915,   107,   107,   260,   926,
   357,   928,   356,   931,   513,   559,   516,   560,   561,   562,
   563,   206,   951,   697,   258,   510,    60,   945,   135,   952,
   959,    89,   510,   963,   260,   953,    60,   613,   967,   966,
   107,   107,    93,   968,    96,    89,    89,    89,   756,  1053,
   758,   573,   970,   972,   126,  1054,   757,   126,   613,   638,
    89,   971,   974,   657,   638,   449,   976,   667,   981,    96,
    96,  1058,  1043,   644,   980,    96,   107,   502,   107,   107,
   447,   288,   107,   298,   107,    60,   115,   984,    97,   107,
   638,   515,   986,   988,   692,   638,   116,   107,   802,   887,
   995,   560,   561,   562,   563,   564,   996,   312,   644,   135,
   565,   657,   990,    96,   312,   260,   312,   997,   999,   617,
  1015,   697,  1018,   312,    89,    89,   722,   724,   617,  1006,
   338,   199,   566,  1016,    91,   115,  1019,   258,   516,  1034,
   568,   569,   570,   571,   638,   516,   516,    93,    93,    89,
  1042,    97,   447,   516,   107,   107,   107,   107,   107,   107,
   107,  1045,    17,   724,  1056,   638,   338,   515,    91,   573,
  1044,   573,   542,   543,   544,  1060,  1064,   312,   572,   545,
   199,  1031,   209,  1066,   312,    91,   497,  1068,   500,   617,
   113,   107,   116,   542,   543,   107,  1076,   107,   107,    96,
   545,   107,   107,   614,   107,   550,    89,   312,  1071,  1079,
   260,    17,    89,  1089,   638,   510,   638,   625,    89,    98,
   107,   107,   107,   638,   627,   780,   542,   543,   547,   626,
    93,   209,   107,   545,   627,   107,   631,   631,    93,   107,
   758,   867,   627,   107,   559,   638,   560,   561,   562,   563,
   633,   627,   513,   107,   516,   573,   455,   573,   381,   513,
   489,   516,   103,   103,   614,   357,   517,   369,   103,   206,
   139,   206,   206,   206,   206,   206,   593,   698,   117,   115,
   206,  1078,   107,   220,   107,   614,   107,   805,    60,    60,
    60,   516,    16,    60,    60,    60,   804,    60,   516,    93,
  1005,   879,   206,   206,    96,    96,   103,    60,    60,   107,
   206,   206,   206,   206,   884,   891,    60,    60,   118,    60,
    60,    60,    60,    60,   542,   543,   549,   117,   289,   515,
  1037,   545,   120,   194,  1036,   916,   515,  1052,   865,    93,
   357,    16,  1081,   115,     0,    93,     0,     0,   206,   638,
   758,     0,   758,   638,   638,    99,   849,     0,   850,   517,
     0,   122,    93,     0,     0,   724,   338,   118,    60,     0,
   878,    60,   881,    93,     0,     0,    93,     0,   542,   543,
   553,   120,   194,   888,    93,   545,     0,    96,     0,    60,
     0,     0,   103,     0,     0,    96,     0,     0,   872,   518,
     0,     0,   518,    91,   613,   515,    62,    63,    64,    65,
   122,     0,   515,   520,    17,    17,    17,   638,   638,   638,
    17,    17,     0,    17,   638,    93,     0,    93,   199,     0,
   199,   199,   199,   199,   199,     0,     0,     0,     0,   199,
    91,     0,   437,   920,   107,   107,   101,   758,  1022,     0,
   515,   357,     0,   510,   117,   107,    96,   515,   573,   107,
   510,   199,   199,     0,   107,   613,    91,     0,     0,   199,
   199,   199,   199,     0,     0,    94,     0,     0,   954,   209,
   103,   209,   209,   209,   209,   209,   613,   510,     0,   107,
   209,     0,     0,   520,    17,   658,    96,   103,   103,     0,
   510,   517,    96,   758,   517,   758,     0,   199,   517,    94,
     0,   517,   209,   209,     0,    17,     0,     0,     0,    96,
   209,   209,   209,   209,     0,     0,    94,   437,     0,     0,
    96,     0,     0,    96,   510,   117,     0,   107,   107,     0,
   758,    96,   176,     0,    16,    16,    16,     0,     0,   510,
    16,    16,     0,    16,  1002,   107,   513,   107,   209,   107,
   107,   107,     0,   542,   543,   592,   107,   107,     0,   564,
   545,   357,     0,  1028,   565,   118,   107,     0,    94,     0,
   103,   510,    96,  1035,    96,     0,    93,  1039,   103,   120,
   118,   176,     0,     0,   338,     0,    93,   517,     0,   107,
    93,     0,   107,   100,   517,    93,   570,   571,     0,   542,
   543,   547,     0,   107,   107,   107,   545,     0,   122,     0,
     0,   513,     0,     0,    16,   513,   721,     0,   107,     0,
   194,   437,   194,   194,   194,   194,   194,   518,   426,     0,
   518,   194,   572,     0,   518,    16,     0,   518,   426,   103,
   519,   520,   518,     0,   357,   513,     0,   177,   520,   518,
     0,     0,   864,   194,   194,     0,     0,  1084,     0,     0,
   513,   194,   194,   194,   194,   110,   613,     0,    93,    93,
   437,   120,     0,   107,   484,   484,   484,   437,     0,   103,
     0,   484,   107,   107,     0,   103,    93,   426,    93,     0,
    93,     0,   513,   466,   466,   466,   177,     0,     0,   194,
   466,   119,   103,   437,   102,   122,   437,   107,     0,     0,
     0,   357,     0,   103,     0,   510,   103,     0,   472,   472,
   472,   520,   510,     0,   103,   472,   946,   613,   520,     0,
    93,     0,    96,    96,    94,   614,   385,   386,   387,   388,
   389,   104,     0,    96,    93,    93,    93,    96,   613,     0,
   119,   521,    96,   297,   297,   437,     0,   297,     0,    93,
   613,     0,   437,     0,   107,   103,    96,   103,   107,  1023,
   107,   560,   561,   562,   563,   104,   107,     0,   121,     0,
   323,   325,   519,    96,   513,     0,   297,   297,   437,   359,
   361,   513,   104,     0,     0,     0,   614,    94,     0,   137,
     0,     0,     0,   113,   614,     0,     0,    93,   548,   510,
   551,     0,   554,   515,     0,     0,   510,   614,   554,     0,
   639,   613,   616,    93,    93,    96,    96,   121,   119,   176,
   639,   176,   176,   176,   176,   176,     0,     0,     0,   510,
   176,     0,   613,    96,     0,    96,     0,    96,    93,     0,
     0,   520,     0,   513,   512,     0,     0,     0,   520,   521,
   513,     0,   176,   176,   658,   614,     0,     0,     0,     0,
   176,   176,   176,   176,     0,     0,     0,     0,   519,   639,
   137,   614,     0,   947,     0,   519,   614,    96,     0,     0,
   426,   426,   426,     0,    92,   426,   426,   426,     0,   426,
     0,    96,    96,    96,     0,    93,     0,     0,   176,   426,
     0,    93,   123,     0,     0,     0,    96,    93,   426,   426,
     0,   426,   426,   426,   426,   426,   103,     0,    95,   548,
   513,   106,     0,     0,   125,     0,   103,   513,     0,   121,
   103,   511,   614,     0,   177,   103,   177,   177,   177,   177,
   177,     0,     0,     0,     0,   177,    98,   426,   119,   104,
   513,   123,     0,   614,   426,   106,   519,     0,     0,     0,
   426,     0,     0,   519,     0,   514,     0,   177,   177,     0,
    96,    96,   106,   125,     0,   177,   177,   177,   177,   521,
    98,   426,     0,   616,     0,   754,   521,     0,     0,   109,
     0,    96,     0,     0,     0,    96,   616,    98,     0,     0,
   104,   616,   617,     0,     0,   617,     0,     0,   103,   103,
   519,     0,     0,   177,     0,     0,     0,   519,     0,   297,
   297,   297,   361,   754,   297,   121,   103,   517,   103,     0,
   103,     0,   112,     0,     0,   297,   304,   297,   297,   638,
     0,   515,     0,     0,     0,     0,   514,     0,   515,   638,
   616,     0,    96,     0,    96,     0,     0,   616,    96,     0,
     0,     0,   616,   104,    96,     0,     0,     0,     0,     0,
   103,     0,   639,   639,   639,     0,     0,   639,   639,   639,
     0,   639,   512,   616,   103,   103,   103,   521,     0,   512,
     0,   639,   639,     0,   521,     0,     0,     0,   638,   103,
   639,   639,     0,   639,   639,   639,   639,   639,     0,     0,
     0,     0,     0,     0,     0,     0,   124,     0,     0,   111,
   606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
   616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
   626,   627,   628,   629,   630,   631,   112,     0,     0,     0,
   297,     0,   639,   114,   651,   639,   655,   639,    99,   123,
   297,   669,     0,   103,   103,   124,     0,     0,     0,   511,
     0,     0,   616,   639,     0,     0,   511,     0,     0,   297,
     0,   125,     0,     0,   123,   616,     0,   297,   103,     0,
   106,   617,    99,     0,   617,   112,     0,   620,   297,   651,
   706,   669,     0,   514,   297,     0,     0,    52,     0,    99,
   514,     0,   297,   178,     0,    98,     0,    52,     0,   297,
   297,   616,     0,   297,   128,     0,     0,   512,   616,     0,
     0,     0,   108,   616,   616,     0,     0,     0,     0,   518,
   617,   616,     0,   617,     0,   103,   616,   617,   739,   740,
   617,   103,   617,   106,   616,   617,   297,   103,     0,   297,
     0,     0,   178,     0,     0,   517,    52,   616,   297,     0,
     0,     0,   517,   617,   304,     0,   617,     0,    98,   313,
     0,   304,     0,     0,     0,     0,     0,     0,   111,     0,
   114,   128,     0,     0,     0,     0,   281,   281,   281,     0,
   281,   638,   638,   638,   281,   281,   638,   638,   638,   281,
   638,   281,   281,   281,   281,   281,   281,   281,   297,   638,
   638,     0,   281,   281,   281,   281,   281,   281,   281,   638,
   638,   281,   638,   638,   638,   638,   638,   111,   281,   114,
   128,   281,   281,   281,     0,   281,   281,   281,   281,   281,
   281,   281,   281,   281,   281,   281,   281,     0,     0,   101,
     0,     0,   127,     0,     0,     0,     0,     0,   638,   511,
     0,   514,   304,   124,     0,   638,   281,     0,     0,   281,
   297,   638,   281,   281,   899,   281,   620,   281,     0,   281,
     0,   281,     0,   101,     0,   392,     0,     0,     0,   281,
     0,   638,   638,   112,   281,   281,   281,   281,   281,   281,
   101,   127,     0,   281,     0,   281,   281,     0,   281,   281,
   281,   281,     0,   281,   281,   281,   407,    99,     0,     0,
   409,   410,   411,   412,     0,   620,   510,     0,     0,     0,
   520,     0,   620,   313,     0,     0,   510,   616,     0,   297,
   985,   297,     0,     0,   989,     0,     0,     0,   297,   297,
     0,     0,     0,     0,     0,   512,     0,   127,   620,    52,
    52,    52,   512,     0,    52,    52,    52,   518,    52,     0,
   510,     0,     0,     0,   518,     0,     0,     0,    52,     0,
    99,   297,     0,     0,   510,   510,     0,   110,     0,   510,
    52,    52,    52,    52,    52,     0,     0,     0,     0,     0,
   178,     0,   178,   178,   178,   178,   178,   313,     0,   905,
   907,   178,     0,     0,   313,   910,   912,   510,     0,     0,
     0,     0,   521,     0,   918,   706,   297,     0,     0,   521,
   922,     0,     0,   178,   178,   111,     0,   114,   128,    52,
     0,   178,   178,   178,   178,     0,     0,   559,     0,   560,
   561,   562,   563,     0,   905,   907,   910,   912,   513,     0,
    52,   297,     0,     0,     0,     0,     0,     0,   513,     0,
     0,   899,     0,     0,   899,     0,   899,   392,   899,   178,
   756,     0,  1065,     0,     0,  1067,  1069,     0,   964,  1072,
  1073,     0,     0,   405,   406,     0,     0,   511,     0,   514,
   304,     0,   513,     0,   511,     0,   514,   304,   407,   127,
   408,     0,   409,   410,   411,   412,   513,   513,   101,   113,
   998,   513,     0,     0,     0,     0,     0,     0,   392,     0,
     0,     0,  1001,  1088,  1090,  1091,  1092,   297,     0,     0,
     0,     0,     0,  1094,   405,   406,     0,     0,     0,   513,
     0,     0,   314,     0,   899,     0,   899,     0,   899,   407,
     0,   899,     0,   409,   410,   411,   412,     0,   520,     0,
  1001,   313,     0,     0,     0,   520,     0,   297,   313,   899,
     0,   101,     0,   613,   613,   613,     0,   613,   510,   510,
   510,   613,   613,   510,   510,   510,   613,   510,   613,   613,
   613,   613,   613,   613,   613,   417,   613,   510,   510,   613,
   613,   613,   613,   613,   613,   613,   510,   510,   613,   510,
   510,   510,   510,   510,     0,   613,     0,   297,   613,   613,
   613,   510,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   613,   510,   510,   510,   510,   510,   510,
   510,   510,   510,   510,   510,   510,   510,   510,     0,     0,
   510,   510,   510,   613,   522,   510,   613,   613,   510,   613,
   613,   510,   613,   510,   613,   510,   613,   510,   613,   510,
   510,   510,   510,   510,   510,   510,   613,   510,   613,   510,
     0,   613,   613,   613,   613,   613,   613,     0,     0,     0,
   613,   510,   613,   613,     0,   613,   613,   613,   613,   134,
   613,   613,   613,     0,     0,   614,   614,   614,     0,   614,
   513,   513,   513,   614,   614,   513,   513,   513,   614,   513,
   614,   614,   614,   614,   614,   614,   614,     0,   614,   513,
   513,   614,   614,   614,   614,   614,   614,   614,   513,   513,
   614,   513,   513,   513,   513,   513,     0,   614,   134,     0,
   614,   614,   614,   513,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   513,   513,   513,   513,
   513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
     0,     0,   513,   513,   513,   614,   525,   513,   614,   614,
   513,   614,   614,   513,   614,   513,   614,   513,   614,   513,
   614,   513,   513,   513,   513,   513,   513,   513,   614,   513,
   614,   513,     0,   614,   614,   614,   614,   614,   614,     0,
     0,   616,   614,   513,   614,   614,     0,   614,   614,   614,
   614,   616,   614,   614,   614,   625,   625,   625,     0,     0,
     0,   625,   625,     0,   625,     0,     0,     0,     0,     0,
   392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
   402,     0,   403,   404,     0,   616,   405,   406,     0,   626,
   626,   626,     0,     0,     0,   626,   626,     0,   626,   616,
   616,   407,   123,   408,   616,   409,   410,   411,   412,   413,
   414,   415,   392,   416,     0,     0,     0,     0,     0,   559,
     0,   560,   561,   562,   563,   564,     0,     0,   405,   406,
   565,     0,   616,     0,     0,   625,     0,     0,     0,     0,
     0,     0,     0,   407,     0,   408,     0,   409,   410,   411,
   412,     0,   566,   415,     0,   416,   625,     4,     5,     6,
     0,     8,   570,   571,     0,     9,    10,     0,     0,   626,
    11,   617,    12,    13,    14,   110,   111,    17,    18,     0,
     0,   617,     0,   112,   113,   114,   273,   274,   275,   276,
   626,     0,   119,     0,     0,     0,     0,     0,   572,   120,
     0,     0,   277,   278,   279,     0,    34,   280,    36,   281,
   282,   283,   284,     0,    41,   617,   134,   129,   134,   134,
   134,   134,   134,     0,     0,     0,     0,   134,     0,   617,
   617,     0,   125,     0,   617,     0,     0,   285,   510,     0,
    46,     0,     0,    47,    48,   510,    49,     0,    50,   134,
   134,     0,     0,     0,     0,     0,     0,   134,   134,   134,
   134,     0,   617,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,     0,     0,     0,     0,
   135,     0,     0,     0,     0,   134,     0,     0,   616,   616,
   616,     0,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     0,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   135,
   616,     0,     0,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,     0,     0,   616,   616,   616,   616,     0,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,     0,   616,   616,   616,   616,
   616,   616,     0,     0,     0,   616,   616,   616,   616,     0,
   616,   616,   616,   616,   106,   616,   616,   616,   617,   617,
   617,     0,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
     0,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,     0,
   617,   617,     0,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,     0,     0,   617,   617,   617,   617,     0,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,     0,   617,   617,   617,   617,
   617,   617,     0,     0,   620,   617,   617,   617,   617,     0,
   617,   617,   617,   617,   620,   617,   617,   617,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   135,   620,   135,
   135,   135,   135,   135,     0,     0,     0,     0,   135,     0,
     0,     0,   620,   620,     0,   124,     0,   620,   559,   513,
   560,   561,   562,   563,   564,     0,   513,     0,     0,   565,
   135,   135,     0,     0,     0,     0,     0,     0,   135,   135,
   135,   135,     0,     0,   559,   620,   560,   561,   562,   563,
   564,   566,   567,     0,     0,   565,     0,     0,     0,   568,
   569,   570,   571,     0,     0,     0,     0,     0,     0,   125,
   617,     0,     0,     0,     0,     0,   135,   566,     0,     0,
     0,     0,     0,     0,   305,   568,   569,   570,   571,     0,
     0,     0,     0,     0,   305,     0,     0,   572,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   887,     0,   560,
   561,   562,   563,   564,     0,     0,     0,     0,   565,   617,
     0,     0,     0,   572,     0,     0,   617,     0,   305,     0,
     0,   617,     0,     0,     0,     0,     0,     0,     0,     0,
   566,     0,   305,   305,     0,     0,     0,   305,   568,   569,
   570,   571,   617,     0,   392,   393,   394,   395,   396,   397,
   398,   399,   400,   401,   402,     0,     0,   392,     0,     0,
   405,   406,   397,   398,     0,   305,     0,     0,     0,     0,
     0,     0,     0,   405,   406,   407,   572,   408,     0,   409,
   410,   411,   412,   413,   414,   415,     0,   416,   407,     0,
   408,     0,   409,   410,   411,   412,   413,   414,   415,     0,
   416,   616,   616,   616,     0,   616,   620,   620,   620,   616,
   616,   620,   620,   620,   616,   620,   616,   616,   616,   616,
   616,   616,   616,     0,   620,   620,   620,   616,   616,   616,
   616,   616,   616,   616,   620,   620,   616,   620,   620,   620,
   620,   620,     0,   616,     0,     0,   616,   616,   616,   620,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   620,   620,   620,   620,   620,   620,   620,   620,
   620,   620,   620,   620,   620,   620,     0,     0,   620,   620,
   620,   616,     0,   620,   616,   616,   620,   616,   616,   620,
   616,   620,   616,   620,   616,   620,   616,   620,   620,   620,
   620,   620,   620,   620,   616,   620,   620,   620,   886,   616,
   616,   616,   616,   616,   616,     0,     0,   898,   616,   620,
   616,   616,     0,   616,   616,   616,   616,   105,   616,   616,
   616,   615,   615,   615,     0,   615,   305,   305,   305,   615,
   615,   305,   305,   305,   615,   305,   615,   615,   615,   615,
   615,   615,   615,     0,   615,   305,   305,   615,   615,   615,
   615,   615,   615,   615,   305,   305,   615,   305,   305,   305,
   305,   305,     0,   615,   620,     0,   615,   615,   615,   305,
   615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
   615,   615,   305,   305,   305,   305,   305,   305,   305,   305,
   305,   305,   305,   305,   305,   305,     0,     0,   305,   305,
   305,   615,     0,   305,   615,   615,   305,   615,   615,   305,
   615,   305,   615,   305,   615,   305,   615,   305,   305,   305,
   305,   305,   305,   305,   615,   305,   615,   305,     0,   615,
   615,   615,   615,   615,   615,     0,     0,   621,   615,   305,
   615,   615,     0,   615,   615,   615,   615,   621,   615,   615,
   615,   392,   393,   394,   395,   396,   397,   398,   399,     0,
   401,   402,     0,     0,     0,     0,     0,   405,   406,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   621,   407,     0,   408,     0,   409,   410,   411,   412,
   413,   414,   415,     0,   416,   621,   621,     0,     0,     0,
   621,     0,     0,     0,   898,     0,     0,   898,     0,  1038,
     0,   898,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   621,     0,
     0,     0,     0,   392,   393,   394,   395,   396,   397,   398,
     0,     0,   401,   402,     0,     0,     0,     0,     0,   405,
   406,     0,   124,   620,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   407,     0,   408,   622,   409,   410,
   411,   412,   413,   414,   415,     0,   416,   622,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   898,     0,   898,
     0,   898,     0,     0,   898,     0,     0,     0,     0,     0,
     0,     0,   620,     0,     0,     0,     0,     0,     0,   620,
     0,   622,   898,     0,   616,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   622,   622,     0,     0,     0,
   622,     0,     0,     0,     0,   620,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   622,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   618,   618,   618,     0,   618,   621,
   621,   621,   618,   618,   621,   621,   621,   618,   621,   618,
   618,   618,   618,   618,   618,   618,     0,   621,   621,   621,
   618,   618,   618,   618,   618,   618,   618,   621,   621,   618,
   621,   621,   621,   621,   621,     0,   618,     0,     0,   618,
   618,   618,   621,   618,   618,   618,   618,   618,   618,   618,
   618,   618,   618,   618,   618,   621,   621,   621,   621,   621,
   621,   621,   621,   621,   621,   621,   621,   621,   621,     0,
     0,   621,   621,   621,   618,     0,   621,   618,   618,   621,
   618,   618,   621,   618,   621,   618,   621,   618,   621,   618,
   621,   621,   621,   621,   621,   621,   621,   618,   621,   621,
   621,   417,   618,   618,   618,   618,   618,   618,     0,     0,
     0,   618,   621,   618,   618,     0,   618,   618,   618,   618,
     0,   618,   618,   618,   619,   619,   619,     0,   619,   622,
   622,   622,   619,   619,   622,   622,   622,   619,   622,   619,
   619,   619,   619,   619,   619,   619,     0,   622,   622,   622,
   619,   619,   619,   619,   619,   619,   619,   622,   622,   619,
   622,   622,   622,   622,   622,     0,   619,     0,     0,   619,
   619,   619,   622,   619,   619,   619,   619,   619,   619,   619,
   619,   619,   619,   619,   619,   622,   622,   622,   622,   622,
   622,   622,   622,   622,   622,   622,   622,   622,   622,     0,
     0,   622,   622,   622,   619,     0,   622,   619,   619,   622,
   619,   619,   622,   619,   622,   619,   622,   619,   622,   619,
   622,   622,   622,   622,   622,   622,   622,   619,   622,   622,
   622,     0,   619,   619,   619,   619,   619,   619,     0,     0,
   312,   619,   622,   619,   619,     0,   619,   619,   619,   619,
   312,   619,   619,   619,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   633,   634,     0,     0,
   635,     0,     0,     0,   186,   187,     0,   188,   189,   190,
   191,   192,   193,   194,   312,     0,   195,   196,     0,     0,
     0,   197,   198,   199,   200,     0,     0,     0,   312,   312,
   310,   126,     0,   312,     0,     0,     0,   202,   203,     0,
   204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,     0,     0,   215,     0,     0,     0,     0,     0,     0,
     0,   312,     0,     0,     0,   806,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   216,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   392,   393,   394,   395,
   396,   397,   398,   399,   400,   401,   402,     0,   403,   404,
   436,     0,   405,   406,     0,     0,     0,     0,     0,     0,
   436,     0,     0,     0,     0,     0,     0,   407,     0,   408,
     0,   409,   410,   411,   412,   413,   414,   415,     0,   416,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   436,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   436,
     0,     0,     0,   436,     0,     0,     0,     0,     0,   100,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   436,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   100,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   100,     0,     0,     0,     0,     0,     0,   617,   617,   617,
     0,   617,   312,   312,   312,   617,   617,   312,   312,   312,
   617,   312,   617,   617,   617,   617,   617,   617,   617,     0,
   519,   312,   312,   617,   617,   617,   617,   617,   617,   617,
   312,   312,   617,   312,   312,   312,   312,   312,     0,   617,
     0,     0,   617,   617,   617,   312,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   312,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
   312,   312,     0,     0,   312,   312,   312,   617,     0,   312,
   617,   617,   312,   617,   617,   312,   617,   312,   617,   312,
   617,   312,   617,   312,   312,   312,   312,   312,   312,   312,
   617,   312,     0,   312,   417,   617,   617,   617,   617,   617,
   617,     0,     0,     0,   617,   312,   617,   617,     0,   617,
   617,   617,   617,     0,   617,   617,   617,   281,   281,   281,
     0,   281,   436,   436,   436,   281,   281,   436,   436,   436,
   281,   436,   281,   281,   281,   281,   281,   281,   281,     0,
   436,   436,   436,   281,   281,   281,   281,   281,   281,   281,
   436,   436,   281,   436,   436,   436,   436,   436,     0,   281,
     0,     0,   281,   281,   281,     0,   281,   281,   281,   281,
   281,   281,   281,   281,   281,   281,   281,   281,   436,   436,
   436,   436,   436,   436,   436,   436,   436,   436,   436,   436,
   436,   436,     0,     0,   436,   436,   436,   281,   100,   436,
   281,     0,   436,   281,   281,   436,   281,   436,   281,   436,
   281,   436,   281,   436,   436,   436,   436,   436,   436,   436,
   281,   436,   436,   436,     0,   281,   281,   281,   281,   281,
   281,     0,     0,   638,   281,     0,   281,   281,     0,   281,
   281,   281,   281,   638,   281,   281,   281,     0,   519,     0,
     0,     0,     0,     0,     0,   519,     0,     0,     0,   639,
   640,   100,     0,   641,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,   638,     0,   195,
   196,     0,     0,     0,   197,   198,   199,   200,     0,     0,
     0,     0,   638,   310,     0,     0,   638,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,     0,     0,   215,     0,     0,     0,
     0,     0,     0,     0,   638,     0,     0,     0,   812,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   216,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   392,
   393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     0,   403,   404,   319,     0,   405,   406,     0,     0,     0,
     0,     0,     0,   319,     0,     0,     0,     0,     0,     0,
   407,     0,   408,     0,   409,   410,   411,   412,   413,   414,
   415,     0,   416,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   319,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,     0,     0,     0,   319,     0,     0,     0,
     0,   620,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   319,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   620,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   620,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   281,   281,   281,     0,   281,   638,   638,   638,   281,   281,
   638,   638,   638,   281,   638,   281,   281,   281,   281,   281,
   281,   281,   620,   638,   638,   638,   281,   281,   281,   281,
   281,   281,   281,   638,   638,   281,   638,   638,   638,   638,
   638,     0,   281,     0,     0,   281,   281,   281,     0,   281,
   281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   638,   638,   638,   638,   638,   638,   638,   638,   638,
   638,   638,   638,   638,   638,     0,     0,   638,   638,   638,
   281,     0,   638,   281,     0,   638,   281,   281,   638,   281,
   638,   281,   638,   281,   638,   281,   638,   638,   638,   638,
   638,   638,   638,   281,   638,   638,   638,     0,   281,   281,
   281,   281,   281,   281,   355,     0,     0,   281,     0,   281,
   281,     0,   281,   281,   281,   281,     0,   281,   281,   281,
   281,   281,   281,     0,   281,   319,   319,   319,   281,   281,
   319,   319,   319,   281,   319,   281,   281,   281,   281,   281,
   281,   281,     0,     0,   319,   319,   281,   281,   281,   281,
   281,   281,   281,   319,   319,   281,   319,   319,   319,   319,
   319,     0,   281,     0,     0,   281,   281,   281,     0,   281,
   281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   319,   319,   319,   319,   319,   319,   319,   319,   319,
   319,   319,   319,   319,   319,     0,     0,   319,   319,   319,
   281,   620,   319,   281,     0,   319,   281,   281,   319,   281,
   319,   281,   319,   281,   319,   281,   319,   319,   319,   319,
   319,   319,   319,   281,   319,   510,   319,     0,   281,   281,
   281,   281,   281,   281,     0,   510,     0,   281,     0,   281,
   281,     0,   281,   281,   281,   281,     0,   281,   281,   281,
   620,     0,     0,     0,     0,     0,     0,   620,     0,     0,
     0,     0,   616,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   620,     0,     0,   620,   510,     0,   110,     0,   510,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   510,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,   110,   111,    17,    18,     0,
     0,     0,     0,   112,   113,   114,   342,   343,   344,   345,
     0,     0,   119,     0,     0,   513,     0,     0,     0,   120,
     0,     0,   346,   347,   348,   513,    34,   349,    36,   350,
   351,   352,   353,     0,    41,     0,     0,   129,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   354,     0,    94,
   132,     0,     0,    47,    48,     0,    49,     0,     0,     0,
     0,     0,     0,     0,   513,     0,   113,     0,   513,     0,
     0,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,   513,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   613,   613,   613,     0,   613,   510,   510,   510,
   613,   613,     0,   510,   510,   613,   510,   613,   613,   613,
   613,   613,   613,   613,     0,   613,   417,     0,   613,   613,
   613,   613,   613,   613,   613,   510,   510,   613,   510,   510,
   510,   510,   510,     0,   613,     0,     0,   613,   613,   613,
     0,   613,   613,   613,   613,   613,   613,   613,   613,   613,
   613,   613,   613,   510,   510,   510,   510,   510,   510,   510,
   510,   510,   510,   510,   510,   510,   510,     0,     0,   510,
   510,   510,   613,   522,     0,   613,   613,   510,   613,   613,
     0,   613,     0,   613,   510,   613,   510,   613,   510,   510,
   510,   510,   510,   510,   510,   613,   510,   613,   510,     0,
   613,   613,   613,   613,   613,   613,     0,     0,     0,   613,
     0,   613,   613,     0,   613,   613,   613,   613,     0,   613,
   613,   613,   614,   614,   614,     0,   614,   513,   513,   513,
   614,   614,     0,   513,   513,   614,   513,   614,   614,   614,
   614,   614,   614,   614,     0,   614,     0,     0,   614,   614,
   614,   614,   614,   614,   614,   513,   513,   614,   513,   513,
   513,   513,   513,     0,   614,     0,     0,   614,   614,   614,
     0,   614,   614,   614,   614,   614,   614,   614,   614,   614,
   614,   614,   614,   513,   513,   513,   513,   513,   513,   513,
   513,   513,   513,   513,   513,   513,   513,     0,     0,   513,
   513,   513,   614,   525,     0,   614,   614,   513,   614,   614,
     0,   614,     0,   614,   513,   614,   513,   614,   513,   513,
   513,   513,   513,   513,   513,   614,   513,   614,   513,     0,
   614,   614,   614,   614,   614,   614,     0,     0,   616,   614,
     0,   614,   614,     0,   614,   614,   614,   614,   616,   614,
   614,   614,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   392,   393,   394,   395,   396,   397,   398,   399,   400,
   401,   402,   104,   403,   404,     0,     0,   405,   406,     0,
     0,     0,     0,     0,     0,     0,     0,   616,     0,   123,
     0,   616,   407,     0,   408,     0,   409,   410,   411,   412,
   413,   414,   415,     0,   416,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   616,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,   617,    11,
     0,    12,    13,    14,   110,   111,    17,    18,   617,     0,
     0,   102,   112,   113,   114,   115,   116,   117,   118,     0,
     0,   119,     0,     0,     0,     0,     0,     0,   120,     0,
     0,   121,   122,   123,     0,    34,   124,    36,   125,   126,
   127,   128,   106,    41,     0,   102,   129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   617,     0,   125,
     0,   617,   102,   130,     0,     0,   131,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   617,
     0,     0,   521,     0,    53,    54,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   616,   616,   616,     0,   616,
   616,   616,   616,   616,   616,     0,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,     0,   616,     0,
     0,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,     0,   616,     0,     0,
   616,   616,   616,     0,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     0,     0,   616,   616,   616,   616,     0,     0,   616,   616,
   616,   616,   616,     0,   616,     0,   616,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,     0,   616,   616,   616,   616,   616,   616,     0,
     0,     0,   616,     0,   616,   616,     0,   616,   616,   616,
   616,     0,   616,   616,   616,   617,   617,   617,     0,   617,
   617,   617,   617,   617,   617,     0,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,     0,   617,     0,
   102,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,     0,   617,     0,     0,
   617,   617,   617,     0,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   521,     0,   617,   617,   617,   617,     0,   521,   617,   617,
   617,   617,   617,   102,   617,     0,   617,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,     0,   617,   617,   617,   617,   617,   617,     0,
     0,   620,   617,     0,   617,   617,     0,   617,   617,   617,
   617,   620,   617,   617,   617,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   647,   634,     0,
     0,   648,     0,     0,     0,   186,   187,     0,   188,   189,
   190,   191,   192,   193,   194,   105,     0,   195,   196,     0,
     0,     0,   197,   198,   199,   200,     0,     0,     0,     0,
   620,   310,   124,     0,   620,     0,     0,     0,   202,   203,
     0,   204,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,     0,     0,   215,     0,     0,     0,     0,     0,
     0,     0,   620,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   216,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,   312,    11,     0,    12,    13,    14,   110,   111,    17,
    18,   312,     0,     0,    93,   112,   113,   114,   342,   343,
   344,   345,     0,     0,   119,     0,     0,     0,     0,     0,
     0,   120,     0,     0,   346,   347,   348,     0,    34,   349,
    36,   350,   351,   352,   353,   107,    41,     0,    93,   129,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   312,     0,   126,     0,   312,    93,     0,     0,     0,   354,
     0,     0,   429,     0,     0,    47,    48,     0,    49,     0,
   430,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   312,     0,     0,   512,     0,    53,    54,    55,
    56,    57,    58,     0,     0,     0,    59,     0,    60,    61,
     0,    62,    63,    64,    65,     0,    66,    67,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   616,   616,
   616,     0,   616,   620,   620,   620,   616,   616,     0,   620,
   620,   616,   620,   616,   616,   616,   616,   616,   616,   616,
   314,   620,     0,     0,   616,   616,   616,   616,   616,   616,
   616,   620,   620,   616,   620,   620,   620,   620,   620,     0,
   616,     0,     0,   616,   616,   616,     0,   616,   616,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   620,
   620,   620,   620,   620,   620,   620,   620,   620,   620,   620,
   620,   620,   620,     0,     0,   620,   620,   620,   616,     0,
     0,   616,   616,   620,   616,   616,     0,   616,     0,   616,
   620,   616,   620,   616,   620,   620,   620,   620,   620,   620,
   620,   616,   620,   620,   620,     0,   616,   616,   616,   616,
   616,   616,     0,     0,     0,   616,     0,   616,   616,     0,
   616,   616,   616,   616,     0,   616,   616,   616,   617,   617,
   617,     0,   617,   312,   312,   312,   617,   617,     0,   312,
   312,   617,   312,   617,   617,   617,   617,   617,   617,   617,
     0,     0,     0,    93,   617,   617,   617,   617,   617,   617,
   617,   312,   312,   617,   312,   312,   312,   312,   312,     0,
   617,     0,     0,   617,   617,   617,     0,   617,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
   312,   312,   312,   512,     0,   312,   312,   312,   617,   129,
   512,   617,   617,   312,   617,   617,    93,   617,     0,   617,
   312,   617,   312,   617,   312,   312,   312,   312,   312,   312,
   312,   617,   312,     0,   312,     0,   617,   617,   617,   617,
   617,   617,     0,     0,     0,   617,     0,   617,   617,     0,
   617,   617,   617,   617,     0,   617,   617,   617,   129,     0,
     0,     0,     0,     0,     0,     0,     0,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
   510,     0,     0,    19,    20,    21,   245,   246,   247,   248,
     0,     0,   119,     0,     0,     0,     0,     0,     0,    28,
     0,     0,   249,   250,   251,     0,    34,   252,    36,   253,
   254,   255,   256,   291,    41,    42,    43,    44,     0,     0,
     0,    92,     0,     0,     0,     0,     0,     0,     0,   130,
     0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
   132,     0,     0,    47,    48,     0,    49,     0,   292,     0,
   293,     0,    51,     0,     0,    92,     0,     0,     0,     0,
   294,     0,     0,     0,     0,    53,   295,    55,    56,    57,
    58,     0,    92,     0,    59,     0,    60,    61,   130,    62,
    63,    64,    65,     0,    66,    67,   296,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   511,     0,     0,     0,     0,     0,     0,     0,
   513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,     0,     0,   129,   129,
     0,   129,   129,   129,   129,   129,   129,   129,     0,   613,
     0,   129,   129,   129,   129,   129,   129,   129,   129,     0,
     0,   129,     0,     0,     0,     0,     0,   129,   129,     0,
   129,   129,   129,   129,     0,   129,   129,   129,   129,   129,
   129,   129,     0,   129,   129,   129,   129,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   510,     0,
   129,     0,     0,     0,     0,   510,   129,     0,     0,   129,
   613,     0,   129,   129,     0,   129,     0,   129,     0,     0,
     0,   129,     0,     0,     0,     0,   129,     0,     0,   129,
     0,   613,   620,     0,   129,   129,   129,   129,   129,   129,
     0,     0,     0,   129,     0,   129,   129,     0,   129,   129,
   129,   129,     0,   129,   129,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,     0,     0,   130,   130,
    92,   130,   130,   130,   130,   130,   130,   130,     0,   614,
     0,   130,   130,   130,   130,   130,   130,   130,   130,     0,
     0,   130,     0,     0,     0,     0,     0,   130,   130,     0,
   130,   130,   130,   130,     0,   130,   130,   130,   130,   130,
   130,   130,     0,   130,   130,   130,   130,     0,     0,     0,
   511,     0,     0,     0,     0,     0,     0,   511,   513,     0,
   130,     0,     0,    92,     0,   513,   130,     0,     0,   130,
   614,     0,   130,   130,     0,   130,     0,   130,     0,     0,
     0,   130,     0,     0,     0,     0,   130,     0,     0,   130,
     0,   614,   312,     0,   130,   130,   130,   130,   130,   130,
     0,     0,     0,   130,     0,   130,   130,     0,   130,   130,
   130,   130,     0,   130,   130,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,     0,     0,
   129,   129,     0,   129,   129,   129,   129,   129,   129,   129,
     0,   620,     0,   130,   129,   129,   129,   129,   129,   129,
   129,     0,     0,   129,     0,     0,     0,     0,     0,   129,
   129,     0,   129,   129,   129,   129,     0,   129,   129,   129,
   129,   129,   129,   129,     0,   129,   129,   129,   129,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   620,     0,   130,     0,     0,     0,     0,   620,   129,     0,
     0,   129,   616,     0,   129,   129,     0,   129,     0,   129,
     0,     0,     0,   129,     0,     0,     0,     0,   129,     0,
     0,   129,     0,   620,   313,     0,   129,   129,   129,   129,
   129,   129,     0,     0,     0,   129,     0,   129,   129,     0,
   129,   129,   129,   129,     0,   129,   129,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,     0,     0,
   130,   130,     0,   130,   130,   130,   130,   130,   130,   130,
     0,     0,     0,   361,   130,   130,   130,   130,   130,   130,
   130,     0,     0,   130,     0,     0,     0,     0,     0,   130,
   130,     0,   130,   130,   130,   130,     0,   130,   130,   130,
   130,   130,   130,   130,     0,   130,   130,   130,   130,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   312,     0,   361,     0,     0,     0,     0,   312,   130,     0,
     0,   130,   617,     0,   130,   130,     0,   130,     0,   130,
     0,     0,     0,   130,     0,     0,     0,     0,   130,     0,
     0,   130,     0,     0,     0,     0,   130,   130,   130,   130,
   130,   130,     0,     0,     0,   130,     0,   130,   130,     0,
   130,   130,   130,   130,     0,   130,   130,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
     0,     0,   130,   130,   638,   130,   130,   130,   130,   130,
   130,   130,     0,     0,     0,     0,   130,   130,   130,   130,
   130,   130,   130,     0,     0,   130,     0,     0,     0,     0,
     0,   130,   130,     0,   130,   130,   130,   130,     0,   130,
   130,   130,   130,   130,   130,   130,     0,   130,   130,   130,
   130,     0,     0,   638,     0,     0,     0,     0,     0,     0,
     0,     0,   313,     0,     0,     0,     0,     0,     0,   313,
   130,     0,     0,   130,     0,     0,   130,   130,     0,   130,
     0,   130,     0,     0,     0,   130,     0,     0,     0,     0,
   130,     0,     0,   130,     0,     0,     0,     0,   130,   130,
   130,   130,   130,   130,     0,     0,     0,   130,     0,   130,
   130,     0,   130,   130,   130,   130,     0,   130,   130,   361,
   361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
     0,   361,   361,   361,   361,   361,   361,   361,   361,   361,
   361,   361,   638,     0,     0,     0,   361,   361,   361,   361,
   361,   361,   361,     0,     0,   361,     0,     0,     0,     0,
     0,   361,   361,     0,   361,   361,   361,   361,     0,   361,
   361,   361,   361,   361,   361,   361,     0,   361,   361,   361,
   361,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   638,     0,     0,     0,     0,     0,     0,     0,     0,
   361,     0,     0,   361,     0,     0,   361,   361,     0,   361,
     0,   361,     0,     0,     0,   361,     0,     0,     0,     0,
     0,     0,     0,   361,     0,     0,     0,     0,   361,   361,
   361,   361,   361,   361,     0,     0,     0,   361,     0,   361,
   361,     0,   361,   361,   361,   361,     0,   361,   361,     0,
   638,   638,   638,   638,   638,   638,     0,     0,   638,   638,
   638,     0,     0,     0,   638,     0,   638,   638,   638,   638,
   638,   638,   638,   266,     0,     0,     0,   638,   638,   638,
   638,   638,   638,   638,     0,     0,   638,     0,     0,     0,
     0,     0,   638,   638,     0,   638,   638,   638,   638,     0,
   638,   638,   638,   638,   638,   638,   638,     0,   638,   638,
   638,   638,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   265,     0,     0,     0,     0,     0,     0,     0,
     0,   638,     0,     0,   638,     0,     0,   638,   638,     0,
   638,     0,   638,     0,     0,     0,   638,     0,     0,     0,
     0,     0,     0,     0,   638,     0,     0,     0,     0,   638,
   638,   638,   638,   638,   638,     0,     0,     0,   638,     0,
   638,   638,     0,   638,   638,   638,   638,     0,   638,   638,
     0,     0,     0,     0,     0,     0,     0,     0,   638,   638,
   638,   638,   638,   638,     0,     0,     0,   638,   638,     0,
     0,     0,   638,   314,   638,   638,   638,   638,   638,   638,
   638,     0,     0,     0,     0,   638,   638,   638,   638,   638,
   638,   638,    95,     0,   638,     0,     0,     0,     0,     0,
   638,   638,     0,   638,   638,   638,   638,     0,   638,   638,
   638,   638,   638,   638,   638,     0,   638,   638,   638,   638,
     0,     0,     0,     0,     0,     0,    95,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   638,
     0,     0,   638,    95,     0,   638,   638,     0,   638,     0,
   638,     0,     0,     0,   638,     0,     0,     0,     0,     0,
     0,     0,   638,     0,     0,   638,     0,   638,   638,   638,
   638,   638,   638,   514,     0,     0,   638,     0,   638,   638,
     0,   638,   638,   638,   638,     0,   638,   638,     0,     0,
     4,     5,     6,     0,     8,     0,     0,     0,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,     0,    19,    20,    21,   245,
   246,   247,   248,     0,     0,    26,     0,     0,   437,     0,
     0,     0,    28,     0,     0,   249,   250,   251,   437,    34,
   252,    36,   253,   254,   255,   256,   103,    41,    42,    43,
    44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   257,     0,   437,   132,     0,     0,    47,    48,     0,    49,
   103,     0,     0,     0,     0,    51,   437,   437,     0,   122,
     0,   437,     0,    52,     0,     0,     0,   103,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,   437,
     4,     5,     6,     0,     8,     0,     0,   437,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,     0,    19,    20,    21,   245,
   246,   247,   248,     0,     0,    26,     0,     0,   436,     0,
     0,    95,    28,     0,     0,   249,   250,   251,   436,    34,
   252,    36,   253,   254,   255,   256,     0,    41,    42,    43,
    44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   257,     0,   436,   132,     0,     0,    47,    48,     0,    49,
     0,   514,     0,     0,     0,    51,   436,   436,   514,     0,
     0,   436,   109,    52,    95,     0,     0,     0,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,   436,
     0,     0,     0,   105,     0,   108,   109,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
     0,     0,     0,   109,     0,     0,     0,     0,   230,     0,
     0,     0,     0,     0,     0,     0,     0,   105,     0,   108,
   437,   437,   437,     0,     0,   437,   437,   437,     0,   437,
     0,     0,     0,   304,   105,     0,   108,     0,   437,   437,
   437,     0,   230,     0,     0,   103,   437,     0,   437,   437,
     0,   437,   437,   437,   437,   437,   230,   230,     0,     0,
     0,   230,     0,   437,   620,     0,   313,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   437,   437,   437,   437,
   437,   437,   437,   437,   437,   437,   437,   437,   437,   437,
     0,     0,   437,   437,   437,   437,     0,   437,     0,     0,
   437,     0,   437,   437,     0,   437,     0,   437,   103,   437,
     0,   437,   437,   437,   437,   437,   437,   437,     0,   437,
   437,   437,     0,     0,     0,     0,     0,     0,   437,   516,
     0,     0,     0,   437,     0,     0,     0,     0,     0,   516,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   436,   436,   436,     0,     0,   436,   436,   436,     0,   436,
     0,     0,     0,     0,     0,     0,     0,     0,   436,   436,
   436,     0,     0,   516,     0,     0,     0,     0,   436,   436,
     0,   436,   436,   436,   436,   436,     0,   516,   516,     0,
   116,     0,   516,   436,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   436,   436,   436,   436,
   436,   436,   436,   436,   436,   436,   436,   436,   436,   436,
   516,   109,   436,   436,   436,     0,     0,   436,     0,     0,
   436,     0,     0,   436,     0,   436,     0,   436,   515,   436,
     0,   436,   436,   436,   436,   436,   436,   436,   515,   436,
   436,   436,   105,   620,   108,     0,     0,     0,     0,     0,
   230,   230,   230,   436,     0,   230,   230,   230,     0,   230,
     0,   304,     0,     0,     0,     0,     0,     0,   304,   230,
   230,     0,   515,     0,   109,     0,     0,     0,   230,   230,
     0,   230,   230,   230,   230,   230,   515,   515,     0,   115,
     0,   515,   620,   230,   313,     0,     0,     0,     0,   620,
     0,   313,     0,     0,   616,   105,     0,   108,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   515,
     0,     0,     0,     0,     0,   620,     0,   230,     0,   885,
   230,     0,   885,   230,     0,   230,     0,     0,   895,     0,
     0,     0,     0,     0,     0,   517,     0,     0,     0,     0,
     0,   230,     0,     0,     0,   517,     0,     0,     0,     0,
     0,     0,     0,   230,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   516,   516,   516,     0,     0,   516,   516,   516,   517,
   516,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   516,   516,     0,   517,   517,     0,   117,     0,   517,   516,
   516,     0,   516,   516,   516,   516,   516,     0,     0,     0,
     0,     0,     0,     0,   516,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   517,   516,   516,   516,
   516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
   516,     0,     0,   516,   516,   516,     0,   528,   516,     0,
     0,   516,     0,     0,   516,     0,   516,     0,   516,   518,
   516,     0,   516,   516,   516,   516,   516,   516,   516,   518,
   516,     0,   516,     0,     0,     0,     0,     0,     0,     0,
   515,   515,   515,     0,   516,   515,   515,   515,     0,   515,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   515,
   515,     0,     0,   518,     0,     0,     0,     0,   515,   515,
     0,   515,   515,   515,   515,   515,     0,   518,   518,     0,
   118,     0,   518,   515,     0,   895,     0,     0,   895,     0,
   885,     0,   895,     0,     0,     0,   515,   515,   515,   515,
   515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
   518,     0,   515,   515,   515,     0,   527,   515,     0,     0,
   515,     0,     0,   515,     0,   515,     0,   515,     0,   515,
     0,   515,   515,   515,   515,   515,   515,   515,    51,   515,
     0,   515,     0,     0,     0,     0,     0,     0,    51,     0,
     0,     0,     0,   515,     0,     0,     0,   517,   517,   517,
     0,     0,   517,   517,   517,     0,   517,     0,   895,     0,
   895,     0,   895,     0,     0,   895,   517,   517,     0,     0,
     0,     0,     0,     0,     0,   517,   517,     0,   517,   517,
   517,   517,   517,   895,     0,     0,     0,    51,     0,     0,
   517,   520,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   520,     0,   517,   517,   517,   517,   517,   517,   517,
   517,   517,   517,   517,   517,   517,   517,     0,     0,   517,
   517,   517,     0,   529,   517,     0,     0,   517,     0,     0,
   517,     0,   517,     0,   517,   520,   517,     0,   517,   517,
   517,   517,   517,   517,   517,     0,   517,     0,   517,   520,
   520,     0,   120,     0,   520,     0,     0,     0,     0,     0,
   517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   518,   518,   518,     0,     0,   518,   518,   518,     0,
   518,     0,   520,     0,     0,     0,     0,     0,     0,     0,
   518,   518,     0,     0,     0,     0,     0,     0,     0,   518,
   518,     0,   518,   518,   518,   518,   518,     0,     0,     0,
     0,     0,     0,     0,   518,   519,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   519,     0,   518,   518,   518,
   518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
   518,     0,     0,   518,   518,   518,     0,   530,   518,     0,
     0,   518,     0,     0,   518,     0,   518,     0,   518,   519,
   518,     0,   518,   518,   518,   518,   518,   518,   518,     0,
   518,     0,   518,   519,   519,     0,   119,     0,   519,     0,
     0,     0,     0,     0,   518,     0,     0,     0,     0,     0,
    51,    51,    51,     0,     0,    51,    51,    51,     0,    51,
     0,     0,     0,     0,     0,     0,   519,     0,     0,    51,
     0,     0,     0,     0,     0,     0,     0,   521,    51,    51,
     0,    51,    51,    51,    51,    51,     0,   521,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   520,   520,   520,     0,     0,   520,   520,
   520,   521,   520,     0,     0,     0,     0,     0,     0,     0,
    51,     0,   520,   520,     0,   521,   521,     0,   121,     0,
   521,   520,   520,     0,   520,   520,   520,   520,   520,     0,
     0,    51,     0,     0,     0,     0,   520,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   521,   520,
   520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
   520,   520,   520,     0,     0,   520,   520,   520,     0,   532,
   520,   512,     0,   520,     0,     0,   520,     0,   520,     0,
   520,   512,   520,     0,   520,   520,   520,   520,   520,   520,
   520,     0,   520,     0,   520,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   520,     0,     0,     0,
     0,     0,     0,     0,     0,   512,     0,   519,   519,   519,
     0,     0,   519,   519,   519,     0,   519,     0,     0,   512,
   512,     0,   112,     0,   512,     0,   519,   519,     0,     0,
     0,     0,     0,     0,     0,   519,   519,     0,   519,   519,
   519,   519,   519,     0,     0,     0,     0,     0,     0,     0,
   519,     0,   512,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   519,   519,   519,   519,   519,   519,   519,
   519,   519,   519,   519,   519,   519,   519,     0,     0,   519,
   519,   519,     0,   531,   519,     0,     0,   519,     0,     0,
   519,     0,   519,     0,   519,     0,   519,     0,   519,   519,
   519,   519,   519,   519,   519,     0,   519,     0,   519,   521,
   521,   521,     0,     0,   521,   521,   521,     0,   521,     0,
   519,     0,     0,     0,     0,     0,     0,     0,   521,   521,
     0,     0,     0,     0,     0,     0,     0,   521,   521,     0,
   521,   521,   521,   521,   521,     0,     0,     0,     0,     0,
     0,     0,   521,   511,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   511,     0,   521,   521,   521,   521,   521,
   521,   521,   521,   521,   521,   521,   521,   521,   521,     0,
     0,   521,   521,   521,     0,   533,   521,     0,     0,   521,
     0,     0,   521,     0,   521,     0,   521,   511,   521,     0,
   521,   521,   521,   521,   521,   521,   521,     0,   521,     0,
   521,   511,   511,     0,   111,     0,   511,     0,     0,     0,
     0,     0,   521,   512,   512,   512,     0,     0,   512,   512,
   512,     0,   512,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   512,   512,   511,     0,     0,     0,     0,     0,
     0,   512,   512,     0,   512,   512,   512,   512,   512,     0,
     0,     0,     0,     0,     0,     0,   512,   514,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   514,     0,   512,
   512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
   512,   512,   512,     0,     0,   512,   512,   512,     0,   524,
   512,     0,     0,   512,     0,     0,   512,     0,   512,     0,
   512,   514,   512,     0,   512,   512,   512,   512,   512,   512,
   512,     0,   512,     0,   512,   514,   514,     0,   114,     0,
   514,     0,     0,     0,     0,     0,   512,     0,     0,   678,
   640,     0,     0,   679,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,   514,   195,
   196,     0,     0,     0,   197,   198,   199,   200,     0,   638,
     0,     0,     0,   310,     0,     0,     0,     0,     0,   638,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,     0,     0,   215,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   638,     0,   511,   511,   511,   216,     0,
   511,   511,   511,     0,   511,     0,     0,   638,   638,     0,
     0,     0,   638,     0,   511,   511,     0,     0,     0,     0,
     0,     0,     0,   511,   511,     0,   511,   511,   511,   511,
   511,     0,     0,     0,     0,     0,     0,     0,   511,     0,
   638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   511,   511,   511,   511,   511,   511,   511,   511,   511,
   511,   511,   511,   511,   511,     0,     0,   511,   511,   511,
     0,   523,   511,   304,     0,   511,     0,     0,   511,     0,
   511,     0,   511,   304,   511,     0,   511,   511,   511,   511,
   511,   511,   511,     0,   511,     0,   511,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   511,   514,
   514,   514,     0,     0,   514,   514,   514,   304,   514,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   514,   514,
     0,   304,   304,     0,   128,     0,   304,   514,   514,     0,
   514,   514,   514,   514,   514,     0,     0,     0,     0,     0,
     0,     0,   514,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   304,   514,   514,   514,   514,   514,
   514,   514,   514,   514,   514,   514,   514,   514,   514,     0,
     0,   514,   514,   514,     0,   526,   514,     0,     0,   514,
     0,     0,   514,     0,   514,     0,   514,     0,   514,     0,
   514,   514,   514,   514,   514,   514,   514,     0,   514,     0,
   514,   638,   638,   638,     0,     0,   638,   638,   638,     0,
   638,     0,   514,     0,     0,     0,     0,     0,     0,   638,
   638,   638,     0,     0,     0,     0,     0,     0,     0,   638,
   638,     0,   638,   638,   638,   638,   638,     0,     0,     0,
     0,     0,     0,     0,   638,   313,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   313,     0,   638,   638,   638,
   638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
   638,     0,     0,   638,   638,   638,     0,     0,   638,     0,
     0,   638,     0,     0,   638,     0,   638,     0,   638,   313,
   638,     0,   638,   638,   638,   638,   638,   638,   638,     0,
   638,   638,   638,   313,   313,     0,   127,     0,   313,     0,
     0,     0,     0,     0,   638,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   304,   304,   304,     0,     0,
   304,   304,   304,     0,   304,     0,   313,     0,     0,     0,
     0,     0,     0,     0,   304,   304,     0,     0,     0,     0,
     0,     0,     0,   304,   304,     0,   304,   304,   304,   304,
   304,     0,     0,     0,     0,     0,     0,     0,   304,   457,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   457,
     0,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   304,   304,   304,   304,     0,     0,   304,   304,   304,
     0,     0,   304,     0,     0,   304,     0,     0,   304,     0,
   304,     0,   304,   457,   304,     0,   304,   304,   304,   304,
   304,   304,   304,     0,   304,     0,   304,   457,   457,     0,
     0,     0,   457,     0,     0,     0,     0,     0,   304,     0,
     0,   701,   634,     0,     0,   702,     0,     0,     0,   186,
   187,     0,   188,   189,   190,   191,   192,   193,   194,     0,
   457,   195,   196,     0,     0,     0,   197,   198,   199,   200,
     0,   324,     0,     0,     0,   310,     0,     0,     0,     0,
     0,   324,   202,   203,     0,   204,   205,   206,   207,   208,
   209,   210,   211,   212,   213,   214,     0,     0,   215,     0,
     0,     0,     0,     0,     0,     0,     0,   313,   313,   313,
     0,     0,   313,   313,   313,   324,   313,     0,     0,     0,
   216,     0,     0,     0,     0,     0,   313,   313,     0,   324,
   324,     0,     0,     0,   324,   313,   313,     0,   313,   313,
   313,   313,   313,     0,     0,     0,     0,     0,     0,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   324,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,     0,     0,   313,
   313,   313,     0,     0,   313,   262,     0,   313,     0,     0,
   313,     0,   313,     0,   313,   262,   313,     0,   313,   313,
   313,   313,   313,   313,   313,     0,   313,     0,   313,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   313,     0,     0,     0,     0,     0,     0,     0,     0,   262,
     0,   457,   457,   457,     0,     0,   457,   457,   457,     0,
   457,     0,     0,   262,   262,     0,     0,     0,   262,     0,
   457,   457,     0,     0,     0,     0,     0,     0,     0,   457,
   457,     0,   457,   457,   457,   457,   457,     0,     0,     0,
     0,     0,     0,     0,   457,     0,   360,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   457,   457,   457,
   457,   457,   457,   457,   457,   457,   457,   457,   457,   457,
   457,     0,     0,   457,   457,   457,     0,     0,   457,     0,
     0,   457,     0,     0,   457,     0,   457,     0,   457,     0,
   457,    53,   457,   457,   457,   457,   457,   457,   457,     0,
   457,    53,   457,   324,   324,   324,     0,     0,   324,   324,
   324,     0,   324,     0,   457,     0,     0,     0,     0,     0,
     0,     0,   324,   324,     0,     0,     0,     0,     0,     0,
     0,   324,   324,     0,   324,   324,   324,   324,   324,     0,
     0,     0,     0,     0,     0,     0,   324,   319,     0,     0,
    53,     0,     0,     0,     0,     0,     0,   319,     0,   324,
   324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,     0,     0,   324,   324,   324,     0,     0,
   324,     0,     0,   324,     0,     0,   324,     0,   324,     0,
   324,   319,   324,     0,   324,   324,   324,   324,   324,   324,
   324,     0,   324,     0,   324,   319,   319,     0,     0,     0,
   319,     0,     0,     0,     0,     0,   324,   262,   262,   262,
     0,     0,   262,   262,   262,     0,   262,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   262,   262,   319,     0,
     0,     0,     0,     0,     0,   262,   262,     0,   262,   262,
   262,   262,   262,     0,     0,     0,     0,     0,     0,     0,
   262,   505,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   505,     0,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   360,   262,   262,     0,     0,   262,
   262,   360,     0,     0,   262,     0,     0,   262,     0,     0,
   262,     0,   262,     0,   262,   505,   262,     0,   262,   262,
   262,   262,   262,   262,   262,     0,   262,     0,   262,   505,
   505,     0,     0,     0,   505,     0,     0,     0,     0,     0,
   262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   505,    53,    53,    53,     0,     0,    53,    53,
    53,     0,    53,   240,     0,     0,     0,     0,     0,     0,
     0,     0,    53,   240,     0,     0,     0,     0,     0,     0,
     0,    53,    53,     0,    53,    53,    53,    53,    53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   240,     0,   319,
   319,   319,     0,     0,   319,   319,   319,     0,   319,     0,
     0,   240,   240,     0,     0,     0,   240,     0,   319,   319,
     0,     0,     0,    53,     0,     0,     0,   319,   319,     0,
   319,   319,   319,   319,   319,     0,     0,     0,     0,     0,
     0,     0,   319,     0,    53,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   319,   319,   319,   319,   319,
   319,   319,   319,   319,   319,   319,   319,   319,   319,     0,
     0,   319,   319,   319,     0,     0,   319,   237,     0,   319,
     0,     0,   319,     0,   319,     0,   319,   237,   319,     0,
   319,   319,   319,   319,   319,   319,   319,     0,   319,     0,
   319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,   505,   505,   505,     0,     0,   505,   505,
   505,   237,   505,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   505,   505,     0,   237,   237,     0,     0,     0,
   237,   505,   505,     0,   505,   505,   505,   505,   505,     0,
     0,     0,     0,     0,     0,     0,   505,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
   505,   505,   505,     0,     0,   505,   505,   505,     0,     0,
   505,     0,     0,   505,     0,     0,   505,     0,   505,     0,
   505,   234,   505,     0,   505,   505,   505,   505,   505,   505,
   505,   234,   505,     0,   505,   240,   240,   240,     0,     0,
   240,   240,   240,     0,   240,     0,   505,     0,     0,     0,
     0,     0,     0,     0,   240,   240,     0,     0,     0,     0,
     0,     0,     0,   240,   240,   234,   240,   240,   240,   240,
   240,     0,     0,     0,     0,     0,     0,     0,   240,   234,
   234,     0,     0,     0,   234,     0,     0,     0,     0,     0,
     0,     0,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,     0,   240,   240,     0,     0,   240,   240,     0,
     0,     0,   240,     0,     0,   240,     0,     0,   240,     0,
   240,     0,   240,   236,   240,     0,   240,   240,   240,   240,
   240,   240,   240,   236,   240,     0,   240,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   240,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   237,
   237,   237,     0,     0,   237,   237,   237,   236,   237,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   237,   237,
     0,   236,   236,     0,     0,     0,   236,   237,   237,     0,
   237,   237,   237,   237,   237,     0,     0,     0,     0,     0,
     0,     0,   237,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,     0,   237,   237,     0,
     0,   237,   237,     0,     0,     0,   237,   235,     0,   237,
     0,     0,   237,     0,   237,     0,   237,   235,   237,     0,
   237,   237,   237,   237,   237,   237,   237,     0,   237,     0,
   237,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   237,     0,     0,     0,     0,     0,     0,     0,
     0,   235,     0,   234,   234,   234,     0,     0,   234,   234,
   234,     0,   234,     0,     0,   235,   235,     0,     0,     0,
   235,     0,   234,   234,     0,     0,     0,     0,     0,     0,
     0,   234,   234,     0,   234,   234,   234,   234,   234,     0,
     0,     0,     0,     0,     0,     0,   234,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
     0,   234,   234,     0,     0,   234,   234,     0,     0,     0,
   234,     0,     0,   234,     0,     0,   234,     0,   234,     0,
   234,   238,   234,     0,   234,   234,   234,   234,   234,   234,
   234,   238,   234,     0,   234,   236,   236,   236,     0,     0,
   236,   236,   236,     0,   236,     0,   234,     0,     0,     0,
     0,     0,     0,     0,   236,   236,     0,     0,     0,     0,
     0,     0,     0,   236,   236,   238,   236,   236,   236,   236,
   236,     0,     0,     0,     0,     0,     0,     0,   236,   238,
   238,     0,     0,     0,   238,     0,     0,     0,     0,     0,
     0,     0,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,     0,   236,   236,     0,     0,   236,   236,     0,
     0,     0,   236,     0,     0,   236,     0,     0,   236,     0,
   236,     0,   236,     0,   236,     0,   236,   236,   236,   236,
   236,   236,   236,     0,   236,   232,   236,     0,     0,     0,
     0,     0,     0,     0,     0,   232,     0,     0,   236,   235,
   235,   235,     0,     0,   235,   235,   235,     0,   235,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   235,   235,
     0,     0,     0,     0,     0,     0,     0,   235,   235,   232,
   235,   235,   235,   235,   235,     0,     0,     0,     0,     0,
     0,     0,   235,   232,   232,     0,     0,     0,   232,     0,
     0,     0,     0,     0,     0,     0,   235,   235,   235,   235,
   235,   235,   235,   235,   235,   235,     0,   235,   235,     0,
     0,   235,   235,     0,     0,     0,   235,     0,     0,   235,
     0,     0,   235,     0,   235,     0,   235,   233,   235,     0,
   235,   235,   235,   235,   235,   235,   235,   233,   235,     0,
   235,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   235,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   233,     0,   238,   238,   238,     0,     0,   238,   238,
   238,     0,   238,     0,     0,   233,   233,     0,     0,     0,
   233,     0,   238,   238,     0,     0,     0,     0,     0,     0,
     0,   238,   238,     0,   238,   238,   238,   238,   238,     0,
     0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     0,   238,   238,     0,     0,   238,   238,     0,     0,     0,
   238,   256,     0,   238,     0,     0,   238,     0,   238,     0,
   238,   256,   238,     0,   238,   238,   238,   238,   238,   238,
   238,     0,   238,     0,   238,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   238,   232,   232,   232,
     0,     0,   232,   232,   232,   256,   232,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   232,   232,     0,   256,
   256,     0,     0,     0,   256,   232,   232,     0,   232,   232,
   232,   232,   232,     0,     0,     0,     0,     0,     0,     0,
   232,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   232,   232,   232,   232,   232,   232,
   232,   232,   232,   232,     0,   232,   232,     0,     0,   232,
   232,     0,     0,     0,   232,     0,     0,   232,   257,     0,
   232,     0,   232,     0,     0,     0,   232,     0,   257,     0,
   232,   232,   232,   232,   232,     0,   232,     0,   232,   233,
   233,   233,     0,     0,   233,   233,   233,     0,   233,     0,
   232,     0,     0,     0,     0,     0,     0,     0,   233,   233,
     0,     0,   257,     0,     0,     0,     0,   233,   233,     0,
   233,   233,   233,   233,   233,     0,   257,   257,     0,     0,
     0,   257,   233,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,     0,   233,   233,     0,
     0,   233,   233,     0,     0,     0,   233,     0,     0,   233,
     0,     0,   233,     0,   233,     0,     0,   243,   233,     0,
     0,     0,   233,   233,   233,   233,   233,   243,   233,     0,
   233,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   233,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   256,   256,   256,     0,     0,   256,   256,
   256,   243,   256,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,   256,     0,   243,   243,     0,     0,     0,
   243,   256,   256,     0,   256,   256,   256,   256,   256,     0,
     0,     0,     0,     0,     0,     0,   256,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   256,
     0,   256,   256,     0,     0,   256,   256,     0,     0,     0,
   256,     0,     0,   256,   241,     0,   256,     0,   256,     0,
     0,     0,   256,     0,   241,     0,     0,     0,   256,   256,
   256,     0,   256,     0,   256,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   256,     0,     0,     0,
   257,   257,   257,     0,     0,   257,   257,   257,   241,   257,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
   257,     0,   241,   241,     0,     0,     0,   241,   257,   257,
     0,   257,   257,   257,   257,   257,     0,     0,     0,     0,
     0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   257,   257,   257,
   257,   257,   257,   257,   257,   257,   257,     0,   257,   257,
     0,     0,   257,   257,     0,     0,     0,   257,     0,     0,
   257,     0,     0,   257,     0,   257,     0,     0,   242,   257,
     0,     0,     0,     0,     0,   257,   257,   257,   242,   257,
     0,   257,     0,     0,     0,     0,     0,     0,     0,   243,
   243,   243,     0,   257,   243,   243,   243,     0,   243,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   243,   243,
     0,     0,   242,     0,     0,     0,     0,   243,   243,     0,
   243,   243,   243,   243,   243,     0,   242,   242,     0,     0,
     0,   242,   243,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,     0,   243,   243,     0,
     0,     0,     0,     0,     0,     0,   243,     0,     0,   243,
   246,     0,   243,     0,   243,     0,     0,     0,   243,     0,
   246,     0,     0,     0,   243,   243,   243,     0,   243,     0,
   243,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   243,     0,     0,     0,   241,   241,   241,     0,
     0,   241,   241,   241,   246,   241,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   241,   241,     0,   246,   246,
     0,     0,     0,   246,   241,   241,     0,   241,   241,   241,
   241,   241,     0,     0,     0,     0,     0,     0,     0,   241,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,     0,   241,   241,     0,     0,     0,     0,
     0,     0,     0,   241,   248,     0,   241,     0,     0,   241,
     0,   241,     0,     0,   248,     0,     0,     0,     0,     0,
     0,   241,   241,   241,     0,   241,     0,   241,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
     0,     0,     0,     0,     0,     0,     0,     0,   248,     0,
   242,   242,   242,     0,     0,   242,   242,   242,     0,   242,
     0,     0,   248,   248,     0,     0,     0,   248,     0,   242,
   242,     0,     0,     0,     0,     0,     0,     0,   242,   242,
     0,   242,   242,   242,   242,   242,     0,     0,     0,     0,
     0,     0,     0,   242,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,     0,   242,   242,
     0,     0,     0,     0,     0,     0,     0,   242,     0,     0,
   242,   247,     0,   242,     0,   242,     0,     0,     0,     0,
     0,   247,     0,     0,     0,   242,   242,   242,     0,   242,
     0,   242,   246,   246,   246,     0,     0,   246,   246,   246,
     0,   246,     0,   242,     0,     0,     0,     0,     0,     0,
     0,   246,   246,     0,     0,   247,     0,     0,     0,     0,
   246,   246,     0,   246,   246,   246,   246,   246,     0,   247,
   247,     0,     0,     0,   247,   246,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,     0,
   246,   246,     0,     0,     0,     0,     0,     0,     0,   246,
     0,     0,   246,   245,     0,   246,     0,   246,     0,     0,
     0,     0,     0,   245,     0,     0,     0,   246,   246,     0,
     0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   246,   248,   248,   248,     0,
     0,   248,   248,   248,     0,   248,     0,   245,     0,     0,
     0,     0,     0,     0,     0,   248,   248,     0,     0,     0,
     0,   245,   245,     0,   248,   248,   245,   248,   248,   248,
   248,   248,     0,     0,     0,     0,     0,     0,     0,   248,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,     0,   248,   248,     0,     0,   244,     0,
     0,     0,     0,   248,     0,     0,   248,     0,   244,   248,
     0,   248,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   248,   248,     0,     0,     0,     0,   248,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   248,
     0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   247,   247,   247,   244,   244,   247,   247,
   247,   244,   247,     0,     0,     0,     0,     0,     0,     0,
    43,     0,   247,   247,     0,     0,     0,     0,     0,     0,
    43,   247,   247,     0,   247,   247,   247,   247,   247,     0,
     0,     0,     0,     0,     0,     0,   247,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
     0,   247,   247,     0,     0,     0,     0,     0,     0,    43,
   247,     0,     0,   247,   249,     0,   247,     0,   247,     0,
   874,     0,     0,     0,   249,     0,     0,   883,   247,   247,
     0,     0,     0,     0,   247,   245,   245,   245,   890,     0,
   245,   245,   245,     0,   245,     0,   247,     0,     0,     0,
     0,     0,     0,     0,   245,   245,     0,     0,   249,     0,
     0,     0,     0,   245,   245,     0,   245,   245,   245,   245,
   245,     0,   249,   249,     0,     0,     0,   249,   245,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,     0,   245,   245,     0,     0,     0,     0,     0,
     0,     0,   245,     0,     0,   245,     0,     0,   245,   250,
   245,     0,     0,     0,     0,     0,     0,     0,     0,   250,
   245,   245,     0,     0,     0,     0,   245,     0,     0,     0,
   244,   244,   244,     0,     0,   244,   244,   244,   245,   244,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
   244,     0,     0,   250,     0,     0,     0,     0,   244,   244,
     0,   244,   244,   244,   244,   244,     0,   250,   250,     0,
     0,     0,   250,   244,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   244,   244,   251,     0,     0,   244,   244,
     0,     0,    43,    43,    43,   251,     0,   244,    43,    43,
   244,    43,     0,   244,     0,   244,  1027,     0,  1029,     0,
  1030,     0,     0,     0,     0,  1032,     0,     0,     0,     0,
     0,   244,  1040,    43,    43,    43,    43,    43,     0,   251,
     0,     0,     0,   244,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   251,   251,     0,     0,     0,   251,     0,
     0,     0,     0,     0,     0,     0,   249,   249,   249,     0,
     0,   249,   249,   249,     0,   249,     0,     0,     0,     0,
     0,   258,    43,     0,     0,   249,   249,     0,     0,     0,
     0,   258,     0,     0,   249,   249,     0,   249,   249,   249,
   249,   249,     0,    43,  1082,     0,     0,     0,     0,   249,
  1083,     0,  1085,     0,     0,  1086,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   258,     0,     0,     0,   249,
   249,     0,     0,  1093,   249,   249,     0,     0,     0,   258,
   258,     0,     0,   249,   258,     0,   249,     0,     0,   249,
     0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
     0,   250,   250,   250,     0,     0,   250,   250,   250,   249,
   250,     0,     0,   252,     0,     0,     0,     0,     0,     0,
   250,   250,     0,   252,     0,     0,     0,     0,     0,   250,
   250,     0,   250,   250,   250,   250,   250,     0,     0,     0,
     0,     0,     0,     0,   250,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   252,     0,     0,
     0,     0,     0,     0,   250,   250,     0,     0,     0,   250,
   250,   252,   252,     0,     0,     0,   252,     0,   250,     0,
     0,   250,     0,     0,   250,     0,   250,   251,   251,   251,
     0,     0,   251,   251,   251,     0,   251,     0,     0,   253,
     0,     0,   250,     0,     0,     0,   251,   251,     0,   253,
     0,     0,     0,     0,   250,   251,   251,     0,   251,   251,
   251,   251,   251,     0,     0,     0,     0,     0,     0,     0,
   251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   253,     0,     0,     0,     0,     0,     0,
   251,   251,     0,     0,     0,   251,   251,   253,   253,     0,
     0,     0,   253,     0,   251,     0,     0,   251,     0,     0,
   251,     0,   251,   258,   258,   258,     0,     0,   258,   258,
   258,     0,   258,     0,     0,   259,     0,     0,   251,     0,
     0,     0,   258,   258,     0,   259,     0,     0,     0,     0,
   251,   258,   258,     0,   258,   258,   258,   258,   258,     0,
     0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
     0,     0,     0,     0,     0,     0,   258,   258,     0,     0,
     0,   258,   258,   259,   259,     0,     0,     0,   259,     0,
   258,     0,     0,   258,     0,     0,   258,     0,   258,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   231,   258,   252,   252,   252,     0,     0,
   252,   252,   252,   231,   252,     0,   258,     0,     0,     0,
     0,     0,     0,     0,   252,   252,     0,     0,     0,     0,
     0,     0,     0,   252,   252,     0,   252,   252,   252,   252,
   252,     0,     0,     0,     0,     0,     0,   231,   252,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   231,   231,     0,     0,     0,   231,     0,   252,   252,
     0,     0,     0,   252,   252,     0,     0,     0,     0,     0,
     0,     0,   252,     0,     0,   252,     0,     0,   252,   260,
   252,   253,   253,   253,     0,     0,   253,   253,   253,   260,
   253,     0,     0,     0,     0,     0,   252,     0,     0,     0,
   253,   253,     0,     0,     0,     0,     0,     0,   252,   253,
   253,     0,   253,   253,   253,   253,   253,     0,     0,     0,
     0,     0,     0,   260,   253,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   260,   260,     0,
     0,     0,     0,     0,   253,   253,     0,     0,     0,   253,
   253,     0,     0,     0,     0,     0,     0,     0,   253,     0,
     0,   253,     0,     0,   253,   229,   253,   259,   259,   259,
     0,     0,   259,   259,   259,   229,   259,     0,     0,     0,
     0,     0,   253,     0,     0,     0,   259,   259,     0,     0,
     0,     0,     0,     0,   253,   259,   259,     0,   259,   259,
   259,   259,   259,     0,     0,     0,     0,     0,     0,   229,
   259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   229,   229,     0,     0,     0,     0,     0,
     0,   259,     0,     0,     0,   259,   259,     0,     0,     0,
     0,     0,     0,     0,   259,     0,     0,   259,     0,     0,
   259,     0,   259,   228,     0,   231,   231,   231,     0,     0,
   231,   231,   231,   228,   231,     0,     0,     0,   259,     0,
     0,     0,     0,     0,   231,   231,     0,     0,     0,     0,
   259,     0,     0,   231,   231,     0,   231,   231,   231,   231,
   231,     0,     0,     0,     0,     0,     0,   228,   231,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   228,   228,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   231,     0,     0,   231,     0,     0,   231,   224,
   231,   260,   260,   260,     0,     0,   260,   260,   260,   224,
   260,     0,     0,     0,     0,     0,   231,     0,     0,     0,
   260,   260,     0,     0,     0,     0,     0,     0,   231,   260,
   260,     0,   260,   260,   260,   260,   260,     0,     0,     0,
     0,     0,     0,   224,   260,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   224,   224,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   260,     0,
     0,   260,     0,     0,   260,   225,   260,   229,   229,   229,
     0,     0,   229,   229,   229,   225,   229,     0,     0,     0,
     0,     0,   260,     0,     0,     0,   229,   229,     0,     0,
     0,     0,     0,     0,   260,   229,   229,     0,   229,   229,
   229,   229,   229,     0,     0,     0,     0,     0,     0,   225,
   229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   225,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   229,     0,     0,   229,     0,     0,
   229,     0,   229,   226,     0,   228,   228,   228,     0,     0,
   228,   228,   228,   226,   228,     0,     0,     0,   229,     0,
     0,     0,     0,     0,   228,   228,     0,     0,     0,     0,
   229,     0,     0,   228,   228,     0,   228,   228,   228,   228,
   228,     0,     0,     0,     0,     0,     0,   226,   228,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   226,   226,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   228,     0,     0,   228,     0,     0,   228,   227,
   228,   224,   224,   224,     0,     0,   224,   224,   224,   227,
   224,     0,     0,     0,     0,     0,   228,     0,     0,     0,
   224,   224,     0,     0,     0,     0,     0,     0,   228,   224,
   224,     0,   224,   224,   224,   224,   224,     0,     0,     0,
     0,     0,     0,   227,   224,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   227,   227,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   224,     0,
     0,   224,     0,     0,   224,   220,   224,   225,   225,   225,
     0,     0,   225,   225,   225,   220,   225,     0,     0,     0,
     0,     0,   224,     0,     0,     0,   225,   225,     0,     0,
     0,     0,     0,     0,   224,   225,   225,     0,   225,   225,
   225,   225,   225,     0,     0,     0,     0,     0,     0,   220,
   225,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   220,   220,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   225,     0,     0,   225,     0,     0,
   225,     0,   225,   222,     0,   226,   226,   226,     0,     0,
   226,   226,   226,   222,   226,     0,     0,     0,   225,     0,
     0,     0,     0,     0,   226,   226,     0,     0,     0,     0,
   225,     0,     0,   226,   226,     0,   226,   226,   226,   226,
   226,     0,     0,     0,     0,     0,     0,   222,   226,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   222,   222,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   226,     0,     0,   226,     0,     0,   226,   261,
   226,   227,   227,   227,     0,     0,   227,   227,   227,   261,
   227,     0,     0,     0,     0,     0,   226,     0,     0,     0,
   227,   227,     0,     0,     0,     0,     0,     0,   226,   227,
   227,     0,   227,   227,   227,   227,   227,     0,     0,     0,
     0,     0,     0,   261,   227,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   261,   261,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   227,     0,
     0,   227,     0,     0,   227,   223,   227,   220,   220,   220,
     0,     0,   220,   220,   220,   223,   220,     0,     0,     0,
     0,     0,   227,     0,     0,     0,   220,   220,     0,     0,
     0,     0,     0,     0,   227,   220,   220,     0,   220,   220,
   220,   220,   220,     0,   263,     0,     0,     0,     0,   223,
   220,     0,     0,     0,   263,     0,     0,     0,     0,     0,
     0,     0,     0,   223,   223,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   220,     0,     0,   220,   263,     0,
   220,     0,   220,     0,     0,   222,   222,   222,     0,     0,
   222,   222,   222,   263,   222,     0,     0,     0,   220,     0,
     0,     0,     0,     0,   222,   222,     0,     0,     0,     0,
   220,     0,     0,   222,   222,     0,   222,   222,   222,   222,
   222,     0,     0,   221,     0,     0,     0,     0,   222,     0,
     0,     0,     0,   221,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   222,     0,     0,   222,     0,   221,   222,     0,
   222,   261,   261,   261,     0,     0,   261,   261,   261,     0,
   261,   221,   221,     0,     0,   219,   222,     0,     0,     0,
   261,   261,     0,     0,     0,   219,     0,     0,   222,   261,
   261,     0,   261,   261,   261,   261,   261,     0,     0,     0,
     0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   219,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   219,   219,     0,     0,     0,   261,     0,
     0,   261,     0,     0,   261,     0,   261,   223,   223,   223,
     0,     0,   223,   223,   223,     0,   223,     0,     0,     0,
     0,     0,   261,   352,     0,     0,   223,   223,     0,     0,
     0,     0,     0,   352,   261,   223,   223,     0,   223,   223,
   223,   223,   223,     0,     0,     0,   263,   263,   263,     0,
   223,   263,   263,   263,     0,   263,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   263,   263,   352,     0,     0,
     0,     0,     0,     0,   263,   263,     0,   263,   263,   263,
   263,   263,   352,     0,   223,     0,   352,   223,     0,   263,
   223,     0,   223,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   223,     0,
     0,     0,     0,     0,   352,     0,     0,     0,     0,     0,
   223,     0,     0,   263,     0,     0,   263,     0,   353,   263,
     0,   263,     0,     0,     0,   221,   221,   221,   353,     0,
   221,   221,   221,     0,   221,     0,     0,   263,     0,     0,
     0,     0,     0,     0,   221,   221,     0,     0,     0,   263,
     0,     0,     0,   221,   221,     0,   221,   221,   221,   221,
     0,     0,   353,     0,     0,     0,     0,     0,   221,     0,
     0,     0,     0,     0,     0,     0,     0,   353,     0,     0,
     0,   353,     0,     0,     0,     0,     0,   219,   219,   219,
     0,     0,   219,   219,   219,     0,   219,     0,     0,     0,
     0,     0,   221,     0,     0,   221,   219,   219,   221,   353,
   221,     0,     0,     0,     0,   219,   219,     0,   219,   219,
   219,   219,     0,     0,   316,     0,   221,     0,     0,     0,
   219,     0,     0,     0,   316,     0,     0,     0,   221,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   219,     0,     0,   219,   316,     0,
   219,     0,   219,     0,     0,   352,   352,   352,     0,     0,
   352,   352,   352,   316,   352,     0,     0,   316,   219,     0,
     0,     0,     0,     0,   352,   352,     0,     0,     0,     0,
   219,     0,     0,   352,   352,     0,   352,   352,   352,   352,
   352,     0,     0,     0,     0,   316,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   352,   352,   352,   352,   352,   352,   352,   352,   352,
   352,   352,   352,   352,   352,     0,   286,   352,   352,   352,
     0,     0,   352,     0,     0,   352,   286,     0,   352,     0,
   352,     0,   352,     0,   352,     0,   352,   352,   352,   352,
   352,   352,   352,     0,   352,     0,   352,     0,     0,     0,
   353,   353,   353,     0,     0,   353,   353,   353,     0,   353,
   286,     0,     0,     0,     0,     0,     0,     0,     0,   353,
   353,     0,     0,     0,     0,   286,     0,   437,   353,   353,
     0,   353,   353,   353,   353,   353,     0,   437,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   353,   353,   353,   353,
   353,   353,   353,   353,   353,   353,   353,   353,   353,   353,
     0,   103,   353,   353,   353,     0,     0,   353,     0,     0,
   353,     0,     0,   353,     0,   353,   437,   353,   122,   353,
   437,   353,   353,   353,   353,   353,   353,   353,     0,   353,
     0,   353,     0,     0,     0,     0,   316,   316,   316,     0,
     0,   316,   316,   316,     0,   316,     0,     0,   437,     0,
     0,     0,     0,     0,     0,   316,   316,     0,     0,     0,
     0,     0,     0,   516,   316,   316,     0,   316,   316,   316,
   316,   316,     0,   516,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   316,   316,   316,   316,   316,   316,   316,   316,
   316,   316,   316,   316,   316,   316,     0,    97,   316,   316,
   316,     0,     0,   316,     0,     0,   316,     0,     0,   316,
     0,   316,   516,   316,   116,   316,   516,   316,   316,   316,
   316,   316,   316,   316,     0,   316,     0,   316,     0,     0,
   515,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   515,     0,     0,     0,   516,     0,     0,     0,   286,   286,
   286,     0,     0,   286,   286,   286,     0,   286,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   286,   286,     0,
     0,     0,     0,     0,    96,     0,   286,   286,     0,   286,
   286,   286,   286,   286,     0,     0,     0,     0,     0,   515,
     0,   115,     0,   515,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   437,
   437,   437,     0,     0,     0,   437,   437,     0,   437,     0,
     0,   515,     0,     0,     0,     0,     0,   437,   286,     0,
     0,   286,     0,   286,     0,     0,   517,   437,   437,     0,
   437,   437,   437,   437,   437,     0,   517,     0,     0,   286,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   437,   437,   437,   437,   437,
   437,   437,   437,   437,   437,   437,   437,   437,   437,     0,
    98,   437,   437,   437,     0,     0,     0,     0,     0,   437,
     0,     0,     0,     0,     0,   517,   437,   117,   437,   517,
   437,   437,   437,   437,   437,   437,   437,     0,   437,   437,
   437,     0,     0,     0,     0,   516,   516,   516,     0,     0,
     0,   516,   516,     0,   516,     0,     0,   517,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   516,   516,     0,   516,   516,   516,   516,
   516,     0,     0,     0,     0,     0,   518,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   518,     0,     0,     0,
     0,   516,   516,   516,   516,   516,   516,   516,   516,   516,
   516,   516,   516,   516,   516,     0,     0,   516,   516,   516,
     0,   528,   515,   515,   515,   516,     0,     0,   515,   515,
    99,   515,   516,     0,   516,     0,   516,   516,   516,   516,
   516,   516,   516,     0,   516,   518,   516,   118,     0,   518,
   515,   515,     0,   515,   515,   515,   515,   515,     0,     0,
     0,     0,     0,   520,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   520,     0,     0,     0,   518,   515,   515,
   515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
   515,   515,     0,     0,   515,   515,   515,     0,   527,     0,
     0,     0,   515,     0,     0,     0,     0,   101,     0,   515,
     0,   515,     0,   515,   515,   515,   515,   515,   515,   515,
     0,   515,   520,   515,   120,     0,   520,     0,   517,   517,
   517,     0,     0,     0,   517,   517,     0,   517,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   520,     0,   517,   517,     0,   517,
   517,   517,   517,   517,     0,     0,     0,   519,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   519,     0,     0,
     0,     0,     0,     0,   517,   517,   517,   517,   517,   517,
   517,   517,   517,   517,   517,   517,   517,   517,     0,     0,
   517,   517,   517,     0,   529,     0,     0,     0,   517,     0,
     0,   100,     0,     0,     0,   517,     0,   517,     0,   517,
   517,   517,   517,   517,   517,   517,   519,   517,   119,   517,
   519,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   518,   518,
   518,     0,     0,     0,   518,   518,     0,   518,   519,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   518,   518,     0,   518,
   518,   518,   518,   518,     0,     0,     0,     0,     0,   521,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   521,
     0,     0,     0,     0,   518,   518,   518,   518,   518,   518,
   518,   518,   518,   518,   518,   518,   518,   518,     0,     0,
   518,   518,   518,     0,   530,   520,   520,   520,   518,     0,
     0,   520,   520,   102,   520,   518,     0,   518,     0,   518,
   518,   518,   518,   518,   518,   518,     0,   518,   521,   518,
   121,     0,   521,   520,   520,     0,   520,   520,   520,   520,
   520,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   521,   520,   520,   520,   520,   520,   520,   520,   520,   520,
   520,   520,   520,   520,   520,     0,     0,   520,   520,   520,
     0,   532,     0,     0,     0,   520,     0,     0,     0,     0,
     0,     0,   520,     0,   520,   512,   520,   520,   520,   520,
   520,   520,   520,     0,   520,   512,   520,     0,     0,   519,
   519,   519,     0,     0,     0,   519,   519,     0,   519,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   519,   519,    93,
   519,   519,   519,   519,   519,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   512,     0,   112,     0,   512,     0,
     0,     0,     0,     0,     0,   519,   519,   519,   519,   519,
   519,   519,   519,   519,   519,   519,   519,   519,   519,     0,
     0,   519,   519,   519,     0,   531,   512,     0,     0,   519,
     0,     0,     0,     0,     0,     0,   519,     0,   519,     0,
   519,   519,   519,   519,   519,   519,   519,     0,   519,     0,
   519,   511,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   511,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   521,   521,   521,     0,     0,     0,   521,   521,     0,
   521,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,     0,     0,     0,   521,
   521,     0,   521,   521,   521,   521,   521,     0,     0,     0,
   511,     0,   111,     0,   511,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   521,   521,   521,
   521,   521,   521,   521,   521,   521,   521,   521,   521,   521,
   521,     0,   511,   521,   521,   521,     0,   533,     0,     0,
     0,   521,     0,     0,     0,     0,     0,     0,   521,     0,
   521,   514,   521,   521,   521,   521,   521,   521,   521,     0,
   521,   514,   521,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   512,   512,   512,
     0,     0,     0,   512,   512,    95,   512,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   514,     0,   114,     0,   514,   512,   512,     0,   512,   512,
   512,   512,   512,     0,     0,     0,     0,     0,   304,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   304,     0,
     0,     0,   514,   512,   512,   512,   512,   512,   512,   512,
   512,   512,   512,   512,   512,   512,   512,     0,     0,   512,
   512,   512,     0,   524,     0,     0,     0,   512,     0,     0,
     0,     0,   109,     0,   512,     0,   512,     0,   512,   512,
   512,   512,   512,   512,   512,     0,   512,   304,   512,   128,
     0,   304,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   511,   511,   511,     0,     0,     0,   511,
   511,     0,   511,     0,     0,     0,     0,     0,     0,   304,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   313,   511,   511,     0,   511,   511,   511,   511,   511,     0,
   313,     0,     0,     0,     0,     0,     0,     0,    55,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,   511,
   511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
   511,   511,   511,     0,   108,   511,   511,   511,     0,   523,
     0,     0,     0,   511,     0,     0,     0,     0,     0,   313,
   511,   127,   511,   313,   511,   511,   511,   511,   511,   511,
   511,     0,   511,     0,   511,     0,     0,    55,     0,     0,
     0,     0,     0,   514,   514,   514,     0,     0,     0,   514,
   514,   313,   514,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   288,
     0,   514,   514,     0,   514,   514,   514,   514,   514,   288,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   514,
   514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
   514,   514,   514,   288,     0,   514,   514,   514,     0,   526,
   304,   304,   304,   514,     0,     0,   304,   304,   288,   304,
   514,    62,   514,     0,   514,   514,   514,   514,   514,   514,
   514,    62,   514,     0,   514,     0,     0,     0,   304,   304,
     0,   304,   304,   304,   304,   304,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   304,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
    62,     0,   304,   304,   304,     0,     0,     0,     0,     0,
   304,     0,     0,     0,     0,     0,     0,   304,     0,   304,
     0,   304,   304,   304,   304,   304,   304,   304,     0,   304,
     0,   304,   313,   313,   313,     0,     0,     0,   313,   313,
     0,   313,     0,    64,     0,     0,     0,     0,     0,     0,
    55,    55,    55,    64,     0,    55,    55,    55,     0,    55,
   313,   313,     0,   313,   313,   313,   313,   313,     0,    55,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    55,
     0,    55,    55,    55,    55,    55,     0,     0,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,    64,    56,   313,   313,   313,     0,     0,     0,
     0,     0,   313,    56,     0,     0,     0,     0,     0,   313,
     0,   313,     0,   313,   313,   313,   313,   313,   313,   313,
    55,   313,     0,   313,     0,     0,     0,     0,     0,     0,
     0,   288,   288,   288,     0,     0,   288,   288,   288,     0,
   288,    55,     0,     0,   294,     0,     0,     0,     0,     0,
   288,   288,    56,     0,   294,     0,     0,     0,     0,   288,
   288,     0,   288,   288,   288,   288,   288,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   287,     0,
     0,     0,     0,    62,    62,    62,   292,     0,    62,    62,
    62,     0,    62,   294,     0,     0,   292,   293,     0,     0,
     0,   288,    62,    62,   288,     0,   288,   293,     0,     0,
     0,    62,    62,     0,    62,    62,    62,    62,    62,     0,
     0,     0,   288,     0,     0,     0,     0,     0,     0,     0,
   288,     0,     0,     0,     0,     0,   219,     0,     0,     0,
     0,   289,     0,     0,     0,   292,   219,     0,     0,   291,
     0,     0,     0,     0,     0,     0,   293,     0,     0,   291,
     0,     0,     0,    62,     0,     0,    62,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   263,     0,     0,     0,    62,    64,    64,    64,     0,     0,
    64,    64,    64,   286,    64,   219,     0,     0,     0,    25,
     0,     0,     0,     0,    64,    64,     0,     0,   291,    25,
     0,     0,     0,    64,    64,     0,    64,    64,    64,    64,
    64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    56,    56,    56,     0,     0,
    56,    56,    56,     0,    56,     0,     0,     0,    25,     0,
     0,     0,     0,     0,    56,    64,     0,     0,    64,     0,
     0,     0,     0,    56,    56,     0,    56,    56,    56,    56,
    56,     0,     0,     0,     0,     0,    64,   661,     0,     0,
     0,     0,     0,     0,     0,     0,   294,   294,   294,     0,
     0,   294,   294,   294,     0,   294,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    56,     0,   294,   294,   294,
   294,   294,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    56,     0,   292,   292,
   292,     0,     0,   292,   292,   292,     0,   292,     0,   293,
   293,   293,     0,     0,   293,   293,   293,     0,   293,     0,
     0,     0,     0,   294,     0,     0,   294,     0,     0,   292,
   292,   292,   292,   292,     0,     0,     0,     0,     0,     0,
   293,   293,   293,   293,   293,     0,     0,   294,   219,   219,
   219,     0,     0,     0,   219,   219,     0,   219,     0,     0,
     0,   291,   291,   291,     0,     0,     0,   291,   291,     0,
   291,     0,     0,     0,     0,   292,   219,   219,   292,   219,
   219,   219,   219,   478,     0,     0,   293,     0,     0,   293,
     0,     0,   291,   291,   291,   291,   291,     0,     0,   292,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   293,    25,    25,    25,     0,     0,     0,    25,    25,     0,
    25,     0,     0,     0,     0,     0,     0,     0,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   291,    25,    25,    25,    25,    25,     0,     0,   219,
     4,     5,     6,     0,     8,     0,     0,     0,     9,    10,
     0,     0,   291,    11,     0,    12,    13,    14,   110,   111,
    17,    18,     0,     0,     0,     0,   112,   113,   114,   342,
   343,   344,   345,     0,     0,   119,     0,     0,     0,     0,
     0,    25,   120,     0,     0,   346,   347,   348,     0,    34,
   349,    36,   350,   351,   352,   353,     0,    41,     0,     0,
   129,     0,    25,   478,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   354,     0,     0,   132,     0,     0,    47,    48,     0,    49,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,     0,
     0,     4,     5,     6,     7,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,     0,    19,    20,    21,
    22,    23,    24,    25,     0,     0,    26,     0,     0,     0,
     0,     0,    27,    28,    29,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
    43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    45,     0,     0,    46,     0,     0,    47,    48,     0,
    49,     0,    50,     0,     0,     0,    51,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,     0,     0,     0,    59,     0,
    60,    61,     0,    62,    63,    64,    65,     0,    66,    67,
     0,     4,     5,     6,     7,   238,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,     0,    19,    20,    21,
    22,    23,    24,    25,     0,     0,    26,     0,     0,     0,
     0,     0,    27,    28,     0,    30,    31,    32,    33,     0,
    34,    35,    36,    37,    38,    39,    40,     0,    41,    42,
    43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    45,     0,     0,    46,     0,     0,    47,    48,     0,
    49,     0,    50,     0,     0,     0,    51,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,     0,     0,     0,    59,     0,
    60,    61,     0,    62,    63,    64,    65,     0,    66,    67,
   140,   141,   142,   143,   144,   145,   146,   147,     0,     0,
   148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
   156,   157,   158,   159,     0,     0,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
   183,   184,   125,   126,   185,   128,     0,     0,   186,   187,
     0,   188,   189,   190,   191,   192,   193,   194,     0,     0,
   195,   196,     0,     0,     0,   197,   198,   199,   200,     0,
     0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     0,   202,   203,     0,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,     0,     0,   215,     0,     0,
     0,     0,     0,   140,   141,   142,   143,   144,   145,   146,
   147,     0,     0,   148,   149,   150,   151,   152,     0,   216,
   153,   154,   155,   156,   157,   158,   159,     0,     0,   160,
   161,   162,   222,   223,   224,   225,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   226,   227,
   228,     0,   182,   229,   184,   362,   363,   230,   364,     0,
     0,   186,   187,     0,   188,   189,   190,   191,   192,   193,
   194,     0,     0,   195,   196,     0,     0,     0,   197,   198,
   199,   200,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   202,   203,     0,   204,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,     0,     0,
   215,     0,     0,     0,     0,     0,   140,   141,   142,   143,
   144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
   152,     0,   216,   153,   154,   155,   156,   157,   158,   159,
     0,     0,   160,   161,   162,   222,   223,   224,   225,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   226,   227,   228,     0,   182,   229,   184,   316,     0,
   230,     0,     0,     0,   186,   187,     0,   188,   189,   190,
   191,   192,   193,   194,     0,     0,   195,   196,     0,     0,
     0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   202,   203,     0,
   204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,     0,     0,   215,    53,     0,     0,     0,     0,   140,
   141,   142,   143,   144,   145,   146,   147,     0,     0,   148,
   149,   150,   151,   152,     0,   216,   153,   154,   155,   156,
   157,   158,   159,     0,     0,   160,   161,   162,   222,   223,
   224,   225,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   226,   227,   228,     0,   182,   229,
   184,     0,     0,   230,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,     0,   195,
   196,     0,     0,     0,   197,   198,   199,   200,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,     0,     0,   215,    53,     0,     0,
     0,     0,   140,   141,   142,   143,   144,   145,   146,   147,
     0,     0,   148,   149,   150,   151,   152,     0,   216,   153,
   154,   155,   156,   157,   158,   159,     0,     0,   160,   161,
   162,   222,   223,   224,   225,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   226,   227,   228,
     0,   182,   229,   184,     0,     0,   230,     0,     0,     0,
   186,   187,     0,   188,   189,   190,   191,   192,   193,   194,
     0,     0,   195,   196,     0,     0,     0,   197,   198,   199,
   200,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   202,   203,     0,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,     0,     0,   215,
     0,     0,     0,     0,     0,     0,     3,     4,     5,     6,
     7,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,   216,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,    22,    23,    24,    25,
     0,     0,    26,     0,     0,     0,     0,     0,    27,    28,
    29,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,     0,    41,    42,    43,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
    46,     0,     0,    47,    48,     0,    49,     0,    50,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,   237,     4,     5,     6,
     7,   238,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,    22,    23,    24,    25,
     0,     0,    26,     0,     0,     0,     0,     0,    27,    28,
     0,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,     0,    41,    42,    43,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
    46,     0,     0,    47,    48,     0,    49,     0,    50,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,   237,     4,     5,     6,
     7,   238,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,    22,    23,    24,    25,
     0,     0,    26,     0,     0,     0,     0,     0,    27,    28,
     0,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,    40,     0,    41,    42,    43,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
   328,     0,     0,    47,    48,     0,    49,     0,    50,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,     0,    19,    20,    21,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,   291,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,   292,     0,   293,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,   295,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,   296,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   110,   111,    17,    18,     0,     0,
     0,     0,   112,   113,   114,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,   291,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,   723,     0,   293,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,   295,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,   296,   281,   281,   281,     0,
   281,     0,     0,     0,   281,   281,     0,     0,     0,   281,
     0,   281,   281,   281,   281,   281,   281,   281,     0,     0,
     0,     0,   281,   281,   281,   281,   281,   281,   281,     0,
     0,   281,     0,     0,     0,     0,     0,     0,   281,     0,
     0,   281,   281,   281,     0,   281,   281,   281,   281,   281,
   281,   281,   281,   281,   281,   281,   281,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   281,     0,     0,   281,
     0,     0,   281,   281,     0,   281,     0,   281,     0,   281,
     0,   281,     0,     0,     0,     0,     0,     0,     0,   281,
     0,     0,     0,     0,   281,   281,   281,   281,   281,   281,
     0,     0,     0,   281,     0,   281,   281,     0,   281,   281,
   281,   281,     0,   281,   281,   281,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   110,   111,    17,    18,     0,     0,
     0,     0,   112,   113,   114,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,   291,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,   292,     0,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,   295,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,   296,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   110,   111,    17,    18,     0,     0,
     0,     0,   112,   113,   114,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,   291,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,     0,     0,   293,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,   295,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,   296,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   110,   111,    17,    18,     0,     0,
     0,     0,   112,   113,   114,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,   291,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,   723,     0,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,   295,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,   296,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   110,   111,    17,    18,     0,     0,
     0,     0,   112,   113,   114,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,   291,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,     0,     0,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,   295,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,   296,     4,     5,     6,     7,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,     0,    19,    20,    21,    22,    23,    24,    25,     0,
     0,    26,     0,     0,     0,     0,     0,    27,    28,    29,
    30,    31,    32,    33,     0,    34,    35,    36,    37,    38,
    39,    40,     0,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    45,     0,     0,    46,
     0,     0,    47,    48,     0,    49,     0,    50,     0,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,    52,
     0,     0,     0,     0,    53,    54,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,     4,     5,     6,     7,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
     0,    19,    20,    21,    22,    23,    24,    25,     0,     0,
    26,     0,     0,     0,     0,     0,    27,    28,     0,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,     0,    41,    42,    43,    44,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    45,     0,     0,    46,     0,
     0,    47,    48,     0,    49,     0,    50,     0,     0,     0,
    51,     0,     0,     0,     0,     0,     0,     0,    52,     0,
     0,     0,     0,    53,    54,    55,    56,    57,    58,     0,
     0,     0,    59,     0,    60,    61,     0,    62,    63,    64,
    65,     0,    66,    67,     4,     5,     6,     0,     8,     0,
     0,     0,     9,    10,     0,     0,     0,    11,     0,    12,
    13,    14,   110,   111,    17,    18,     0,     0,     0,     0,
   112,   113,   114,   245,   246,   247,   248,     0,     0,   119,
     0,     0,     0,     0,     0,     0,    28,     0,     0,   249,
   250,   251,     0,    34,   252,    36,   253,   254,   255,   256,
     0,    41,    42,    43,    44,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   257,     0,     0,   132,   513,     0,
    47,    48,     0,    49,     0,     0,     0,     0,     0,    51,
     0,     0,     0,     0,     0,     0,     0,   294,     0,     0,
     0,     0,    53,    54,    55,    56,    57,    58,     0,     0,
     0,    59,     0,    60,    61,     0,    62,    63,    64,    65,
     0,    66,    67,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,   245,   246,   247,   248,     0,     0,   119,     0,
     0,     0,     0,     0,     0,    28,     0,     0,   249,   250,
   251,     0,    34,   252,    36,   253,   254,   255,   256,     0,
    41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   257,     0,     0,   132,     0,     0,    47,
    48,     0,    49,     0,   652,     0,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,   294,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   110,   111,    17,    18,     0,     0,     0,     0,   112,   113,
   114,   245,   246,   247,   248,     0,     0,   119,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   249,   250,   251,
     0,    34,   252,    36,   253,   254,   255,   256,     0,    41,
    42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   257,     0,     0,   132,     0,     0,    47,    48,
     0,    49,     0,   652,     0,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,   294,     0,     0,     0,     0,
    53,    54,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,   110,
   111,    17,    18,     0,     0,     0,     0,   112,   113,   114,
   245,   246,   247,   248,     0,     0,   119,     0,     0,     0,
     0,     0,     0,    28,     0,     0,   249,   250,   251,     0,
    34,   252,    36,   253,   254,   255,   256,     0,    41,    42,
    43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   257,     0,     0,   132,     0,     0,    47,    48,     0,
    49,     0,   292,     0,     0,     0,    51,     0,     0,     0,
     0,     0,     0,     0,   294,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,     0,     0,     0,    59,     0,
    60,    61,     0,    62,    63,    64,    65,     0,    66,    67,
     4,     5,     6,     0,     8,     0,     0,     0,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,   110,   111,
    17,    18,     0,     0,     0,     0,   112,   113,   114,   245,
   246,   247,   248,     0,     0,   119,     0,     0,     0,     0,
     0,     0,    28,     0,     0,   249,   250,   251,     0,    34,
   252,    36,   253,   254,   255,   256,     0,    41,    42,    43,
    44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   257,     0,     0,   132,     0,     0,    47,    48,     0,    49,
     0,   919,     0,     0,     0,    51,     0,     0,     0,     0,
     0,     0,     0,   294,     0,     0,     0,     0,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,   110,   111,    17,
    18,     0,     0,     0,     0,   112,   113,   114,   245,   246,
   247,   248,     0,     0,   119,     0,     0,     0,     0,     0,
     0,    28,     0,     0,   249,   250,   251,     0,    34,   252,
    36,   253,   254,   255,   256,     0,    41,    42,    43,    44,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
     0,     0,   132,     0,     0,    47,    48,     0,    49,     0,
   723,     0,     0,     0,    51,     0,     0,     0,     0,     0,
     0,     0,   294,     0,     0,     0,     0,    53,    54,    55,
    56,    57,    58,     0,     0,     0,    59,     0,    60,    61,
     0,    62,    63,    64,    65,     0,    66,    67,   627,   627,
   627,     0,   627,     0,     0,     0,   627,   627,     0,     0,
     0,   627,     0,   627,   627,   627,   627,   627,   627,   627,
     0,     0,     0,     0,   627,   627,   627,   627,   627,   627,
   627,     0,     0,   627,     0,     0,     0,     0,     0,     0,
   627,     0,     0,   627,   627,   627,     0,   627,   627,   627,
   627,   627,   627,   627,     0,   627,   627,   627,   627,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   627,     0,
     0,   627,   627,     0,   627,   627,     0,   627,     0,     0,
     0,     0,     0,   627,     0,     0,     0,     0,     0,     0,
     0,   627,     0,     0,     0,     0,   627,   627,   627,   627,
   627,   627,     0,     0,     0,   627,     0,   627,   627,     0,
   627,   627,   627,   627,     0,   627,   627,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,   245,   246,   247,   248,
     0,     0,    26,     0,     0,     0,     0,     0,     0,    28,
     0,     0,   249,   250,   251,     0,    34,   252,    36,   253,
   254,   255,   256,     0,    41,    42,    43,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
   132,     0,     0,    47,    48,     0,    49,     0,     0,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,    53,    54,    55,    56,    57,
    58,     0,     0,     0,    59,     0,    60,    61,     0,    62,
    63,    64,    65,     0,    66,    67,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,   110,   111,    17,    18,     0,     0,
     0,     0,   112,   113,   114,   245,   246,   247,   248,     0,
     0,   119,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   249,   250,   251,     0,    34,   252,    36,   253,   254,
   255,   256,     0,    41,    42,    43,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   257,     0,     0,   132,
     0,     0,    47,    48,     0,    49,     0,     0,     0,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,   294,
     0,     0,     0,     0,    53,    54,    55,    56,    57,    58,
     0,     0,     0,    59,     0,    60,    61,     0,    62,    63,
    64,    65,     0,    66,    67,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
     0,    19,    20,    21,   245,   246,   247,   248,     0,     0,
   119,     0,     0,     0,     0,     0,     0,    28,     0,     0,
   249,   250,   251,     0,    34,   252,    36,   253,   254,   255,
   256,     0,    41,    42,    43,    44,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   257,     0,     0,   132,     0,
     0,    47,    48,     0,    49,     0,     0,     0,     0,     0,
    51,     0,     0,     0,     0,     0,     0,     0,   294,     0,
     0,     0,     0,    53,    54,    55,    56,    57,    58,     0,
     0,     0,    59,     0,    60,    61,     0,    62,    63,    64,
    65,     0,    66,    67,   627,   627,   627,     0,   627,     0,
     0,     0,   627,   627,     0,     0,     0,   627,     0,   627,
   627,   627,   627,   627,   627,   627,     0,     0,     0,     0,
   627,   627,   627,   627,   627,   627,   627,     0,     0,   627,
     0,     0,     0,     0,     0,     0,   627,     0,     0,   627,
   627,   627,     0,   627,   627,   627,   627,   627,   627,   627,
     0,   627,   627,   627,   627,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   627,     0,     0,   627,     0,     0,
   627,   627,     0,   627,     0,     0,     0,     0,     0,   627,
     0,     0,     0,     0,     0,     0,     0,   627,     0,     0,
     0,     0,   627,   627,   627,   627,   627,   627,     0,     0,
     0,   627,     0,   627,   627,     0,   627,   627,   627,   627,
     0,   627,   627,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,   110,   111,    17,    18,     0,     0,     0,     0,   112,
   113,   114,   115,   116,   117,   118,     0,     0,   119,     0,
     0,     0,     0,     0,     0,   120,     0,     0,   121,   122,
   123,     0,    34,   124,    36,   125,   126,   127,   128,     0,
    41,     0,     0,   129,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   131,     0,     0,   132,     0,     0,    47,
    48,     0,    49,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,     0,     0,     0,
    59,     0,    60,    61,     0,    62,    63,    64,    65,     0,
    66,    67,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   110,   111,    17,    18,     0,     0,     0,     0,   112,   113,
   114,   342,   343,   344,   345,     0,     0,   119,     0,     0,
     0,     0,     0,     0,   120,     0,     0,   346,   347,   348,
     0,    34,   349,    36,   350,   351,   352,   353,     0,    41,
     0,     0,   129,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   354,     0,     0,   429,     0,     0,    47,    48,
     0,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    54,    55,    56,    57,    58,     0,     0,     0,    59,
     0,    60,    61,     0,    62,    63,    64,    65,     0,    66,
    67,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,   110,
   111,    17,    18,     0,     0,     0,     0,   112,   113,   114,
   932,   933,   934,   935,     0,     0,   119,     0,     0,     0,
     0,     0,     0,   120,     0,     0,   936,   937,   938,     0,
    34,   939,    36,   940,   941,   942,   943,     0,    41,     0,
     0,   129,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   944,     0,     0,   132,     0,     0,    47,    48,     0,
    49,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,     0,     0,     0,    59,     0,
    60,    61,     0,    62,    63,    64,    65,     0,    66,    67,
     4,     5,     6,     0,     8,     0,     0,     0,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,   110,   111,
    17,    18,     0,     0,     0,     0,   112,   113,   114,   115,
   116,   117,   118,     0,     0,   119,     0,     0,     0,     0,
     0,     0,   120,     0,     0,   121,   122,   123,     0,    34,
   992,    36,   125,   126,   993,   128,     0,    41,     0,     0,
   129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   994,     0,     0,   132,     0,     0,    47,    48,     0,    49,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    53,    54,
    55,    56,    57,    58,     0,     0,     0,    59,     0,    60,
    61,     0,    62,    63,    64,    65,     0,    66,    67,   703,
   640,     0,     0,   704,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,     0,   195,
   196,     0,     0,     0,   197,   198,   199,   200,     0,     0,
     0,     0,     0,   310,     0,     0,     0,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   715,   634,   215,     0,   716,     0,
     0,     0,   186,   187,     0,   188,   189,   190,   191,   192,
   193,   194,     0,     0,   195,   196,     0,     0,   216,   197,
   198,   199,   200,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,     0,   202,   203,     0,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   717,
   640,   215,     0,   718,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,     0,   195,
   196,     0,     0,   216,   197,   198,   199,   200,     0,     0,
     0,     0,     0,   310,     0,     0,     0,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   745,   634,   215,     0,   746,     0,
     0,     0,   186,   187,     0,   188,   189,   190,   191,   192,
   193,   194,     0,     0,   195,   196,     0,     0,   216,   197,
   198,   199,   200,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,     0,   202,   203,     0,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   747,
   640,   215,     0,   748,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,     0,   195,
   196,     0,     0,   216,   197,   198,   199,   200,     0,     0,
     0,     0,     0,   310,     0,     0,     0,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,  1047,   634,   215,     0,  1048,     0,
     0,     0,   186,   187,     0,   188,   189,   190,   191,   192,
   193,   194,     0,     0,   195,   196,     0,     0,   216,   197,
   198,   199,   200,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,     0,   202,   203,     0,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,  1049,
   640,   215,     0,  1050,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,     0,   195,
   196,     0,     0,   216,   197,   198,   199,   200,     0,     0,
     0,     0,     0,   310,     0,     0,     0,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,  1074,   640,   215,     0,  1075,     0,
     0,     0,   186,   187,     0,   188,   189,   190,   191,   192,
   193,   194,     0,     0,   195,   196,     0,     0,   216,   197,
   198,   199,   200,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,     0,   202,   203,     0,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   647,
   634,   215,     0,   648,     0,     0,     0,   186,   187,     0,
   188,   189,   190,   191,   192,   193,   194,     0,     0,   195,
   196,     0,     0,   216,   197,   198,   199,   200,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,     0,     0,   215,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   216,
    };
  protected static final short[] yyCheck = {
//yyCheck 22349
     2,     6,     7,    26,    75,    28,    27,     6,   302,    10,
    11,     3,   100,   460,    46,   452,   475,    21,   264,    15,
    16,     7,    27,    19,     7,    52,    15,    16,    46,   495,
    19,   589,   480,    50,    21,   682,   428,     2,     3,   422,
    10,    27,    10,    10,    27,    91,    48,    49,    53,     0,
   420,   421,   868,    10,    53,   425,    10,    10,   705,    48,
    49,    10,     0,     4,     5,   531,   492,    11,   451,   495,
   337,   131,   719,    14,   341,    10,   105,    44,    10,   449,
   105,   771,    10,    59,     0,   376,   567,   470,    10,    59,
    44,    59,    59,   515,    10,    44,    44,   120,   468,   469,
   132,   484,   749,   107,    10,    59,    59,   541,   967,    50,
    59,   773,   482,    61,    10,   988,    91,    10,    10,    59,
   107,   784,    44,    10,    10,    10,    10,   114,   341,   580,
   581,   328,    44,     2,     3,     4,     5,    59,    10,     8,
     9,    10,    11,    59,    32,    14,    15,    16,   518,   305,
    19,   138,    44,    59,   280,   280,    10,   540,    44,   100,
    10,   105,    10,    59,   305,    10,    59,    59,   538,    10,
    10,   345,    59,    59,    59,    59,   794,    46,    47,    10,
    10,    50,   800,    52,   342,   342,   341,    59,    10,   363,
   134,    10,    10,    10,    10,  1068,    44,    10,  1057,    44,
    10,   359,   359,  1019,   685,    59,   687,    10,    10,    10,
   504,    61,   241,    61,    59,   341,   241,   129,    59,   375,
    10,    61,    44,     0,    10,   309,   889,   661,    44,    59,
    61,   100,   429,    10,   375,    10,   362,   362,   267,   676,
    10,    10,    61,     9,    10,    11,    59,   362,    10,   686,
   598,    61,   329,    10,    44,    10,    59,    10,    59,   336,
   707,   130,   432,   132,    32,   731,    10,   355,   690,    59,
   271,   272,   237,    59,    10,    10,   567,    10,   968,    10,
    10,    47,    59,   329,   632,    10,    10,    44,   320,   459,
   336,    61,   376,   377,   984,    10,   328,   241,   347,    15,
    16,   373,    59,    19,   730,   731,   378,    10,   310,    10,
   328,   307,   974,   309,   310,    10,   290,   291,   307,    10,
   309,    10,   307,   267,   309,   310,   311,   312,   886,    10,
    61,   279,    48,   290,   291,   893,    61,    61,   305,   307,
   898,   309,   310,   311,   312,   313,   269,    10,   271,    44,
   318,   305,   305,   313,   329,   340,   262,   263,   264,   311,
   256,   336,   373,   269,   130,    32,   342,   378,   237,   238,
    61,   331,   340,   333,  1064,   342,    32,   811,    59,   264,
   348,   349,   350,   351,   385,   386,   387,   388,   342,   342,
   450,    32,   359,   363,   685,   267,   687,   429,    61,   426,
   848,   428,   271,   272,  1051,   432,   433,   342,   375,   341,
   359,   429,   363,   430,   355,   807,   421,   345,   386,   359,
   422,   375,   375,   874,   389,   363,   422,   878,   879,   279,
   881,   725,   883,   420,   466,   268,   269,   359,   307,   279,
   309,   310,   474,   435,   313,   450,   315,   363,   279,   451,
    10,   320,    32,   541,   267,   451,   362,   459,   460,   328,
   305,   357,   449,   709,   469,   813,   359,   359,   470,   279,
   435,   366,   359,   359,   470,   359,   743,   282,   483,   338,
  1038,   468,   484,   371,   372,   517,   355,   924,   484,   430,
   378,   512,   342,   959,   342,   482,   955,   342,    44,    59,
    61,   445,   342,   492,   305,   271,   272,   512,   955,   279,
   267,   342,   342,   515,   519,   305,   385,   386,   387,   388,
   389,   390,   391,   342,   342,   342,   512,   345,   345,   512,
   375,   518,   342,   959,   539,   479,   480,   497,   540,   528,
   342,   342,   326,   345,   540,   505,   506,   313,   279,   315,
   515,   538,   342,   422,   279,   279,   342,   426,   852,   428,
   429,   430,   522,   432,   433,   525,   435,   342,  1005,   359,
   345,    91,   342,   661,   375,   359,  1027,  1028,  1029,  1030,
   342,   827,   451,   452,   453,   375,   267,   342,   279,   342,
   338,   307,    61,   309,   463,   597,   598,   466,   342,    10,
   541,   470,    91,   371,   372,   474,   342,   342,   631,   342,
   378,   342,   342,   341,    49,   484,   279,   342,   342,   385,
   386,   387,   388,   646,   390,   391,  1009,   342,    10,    44,
   632,  1082,   636,    44,   636,    91,    10,  1007,   642,   342,
    44,   342,   350,   351,   513,   649,   515,   649,   517,   636,
    61,   342,   373,   342,   262,   642,   744,   378,   339,   682,
   263,   264,   649,   695,   373,    91,   269,   264,   689,   378,
    91,   540,   541,    10,   675,   677,   311,    59,   338,   342,
    91,    61,   705,   688,   689,    59,   338,   453,   690,   688,
   677,   693,   271,   680,   696,   307,   719,   699,   866,   311,
   660,     2,     3,   689,   950,   707,   689,     8,     9,    10,
    11,    59,   428,   311,    15,    16,   432,    91,    19,   720,
   661,   281,    59,   811,   684,   690,   749,    10,   279,   673,
   263,   264,    10,   804,   339,    10,   768,   769,    44,   762,
    44,   730,   318,   459,   362,    46,    47,   513,   318,    10,
   318,    52,    44,    10,   786,   338,   788,    91,   790,   363,
   476,   784,   311,   345,   791,   792,   309,   310,   342,   312,
   797,   798,    44,   349,   373,   735,    59,   353,   354,   373,
   807,   373,   373,    44,    59,    44,   341,    44,    10,   347,
   376,    44,   661,   341,   269,   963,   362,   267,   830,    91,
    61,   761,    59,   744,   264,   342,   675,   676,    91,   329,
    44,   813,   844,   845,   846,    44,   336,   686,   363,    44,
    32,   690,    44,    61,    15,    16,   695,   859,    19,   130,
    91,   132,   833,   376,   377,   307,    44,    59,    91,   307,
   329,    44,     2,     3,     4,     5,    44,   336,     8,    44,
   307,   720,    44,  1021,    14,    32,   291,   292,   293,   338,
   820,   296,   338,    10,   338,    10,   889,    61,   279,    91,
   811,   815,   338,   329,    44,   744,    44,   264,   822,   263,
   336,   263,   264,   264,   339,   826,    46,   914,  1056,   338,
    50,   923,   307,   267,   309,   310,   311,   312,   338,   768,
   769,   338,    10,   329,   848,   865,   280,   338,   329,   675,
   336,    44,    59,   363,    59,   336,   948,   786,   329,   788,
   363,   790,   791,   792,    44,   336,    58,   264,   797,   798,
   341,   342,   269,   338,   271,   345,   237,   238,   807,   264,
   100,   264,   811,   363,    91,   307,    91,   309,   310,   311,
   312,    59,   264,   955,   720,   329,     0,   826,   899,   338,
    44,   830,   336,    44,   833,   264,    10,   341,    59,   342,
   271,   272,   132,    44,    44,   844,   845,   846,   340,  1011,
   566,   567,   264,    44,   267,  1017,   348,   279,   362,   264,
   859,   363,    44,   428,   269,   329,    44,   432,    44,     2,
     3,  1024,   336,  1008,    61,     8,   307,  1009,   309,   310,
   267,    14,   313,  1009,   315,    59,    10,    44,   279,   320,
  1007,    91,    44,    44,   459,    10,   279,   328,  1051,   307,
   899,   309,   310,   311,   312,   313,   264,   329,  1043,   980,
   318,   476,   359,    46,   336,   914,   329,   363,   264,   341,
   264,  1053,   363,   336,   923,   924,   491,   492,   341,   311,
   495,    10,   340,   264,    10,    59,    44,   833,   329,   359,
   348,   349,   350,   351,    59,   336,   329,   237,   238,   948,
   311,   342,   339,   336,   385,   386,   387,   388,   389,   390,
   391,   264,    10,   528,    44,    10,   531,    91,    44,   685,
   363,   687,   371,   372,   373,    44,    44,   329,   386,   378,
    59,   980,    10,    44,   336,    61,   307,    44,   309,   341,
   267,   422,   267,   371,   372,   426,   264,   428,   429,   132,
   378,   432,   433,   280,   435,   383,  1005,   359,    44,   264,
  1009,    59,  1011,    44,    59,    91,   345,   271,  1017,    44,
   451,   452,   453,   363,   341,   590,   371,   372,   373,   271,
   320,    59,   463,   378,   342,   466,   345,   363,   328,   470,
   756,   757,    58,   474,   307,   264,   309,   310,   311,   312,
   345,   345,   329,   484,   329,   771,   219,   773,    71,   336,
   295,   336,     2,     3,   341,   355,    91,    55,     8,   307,
     5,   309,   310,   311,   312,   313,   378,   463,    10,   279,
   318,  1053,   513,     6,   515,   362,   517,   652,   262,   263,
   264,   329,    10,   267,   268,   269,   649,   271,   336,   389,
   930,   771,   340,   341,   237,   238,    46,   281,   282,   540,
   348,   349,   350,   351,   775,   784,   290,   291,    10,   293,
   294,   295,   296,   297,   371,   372,   373,    59,    14,   329,
   986,   378,    10,    10,   984,   803,   336,  1010,   756,   429,
   430,    59,  1057,   267,    -1,   435,    -1,    -1,   386,   264,
   866,    -1,   868,   268,   269,    44,   721,    -1,   723,    91,
    -1,    10,   452,    -1,    -1,   730,   731,    59,   342,    -1,
   771,   345,   773,   463,    -1,    -1,   466,    -1,   371,   372,
   373,    59,    59,   784,   474,   378,    -1,   320,    -1,   363,
    -1,    -1,   132,    -1,    -1,   328,    -1,    -1,   763,    91,
    -1,    -1,    91,   279,   280,   329,   379,   380,   381,   382,
    59,    -1,   336,    91,   262,   263,   264,   262,   263,   264,
   268,   269,    -1,   271,   269,   515,    -1,   517,   307,    -1,
   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
    44,    -1,    91,   808,   675,   676,    44,   963,   964,    -1,
   329,   541,    -1,   329,   279,   686,   389,   336,   974,   690,
   336,   340,   341,    -1,   695,   341,   342,    -1,    -1,   348,
   349,   350,   351,    -1,    -1,    10,    -1,    -1,   843,   307,
    44,   309,   310,   311,   312,   313,   362,    91,    -1,   720,
   318,    -1,    -1,    91,   342,   428,   429,   237,   238,    -1,
    10,   329,   435,  1019,   329,  1021,    -1,   386,   336,    44,
    -1,   336,   340,   341,    -1,   363,    -1,    -1,    -1,   452,
   348,   349,   350,   351,    -1,    -1,    61,    91,    -1,    -1,
   463,    -1,    -1,   466,    44,   267,    -1,   768,   769,    -1,
  1056,   474,    10,    -1,   262,   263,   264,    -1,    -1,    59,
   268,   269,    -1,   271,   919,   786,    91,   788,   386,   790,
   791,   792,    -1,   371,   372,   373,   797,   798,    -1,   313,
   378,   661,    -1,   974,   318,   267,   807,    -1,    44,    -1,
   320,    91,   515,   984,   517,    -1,   676,   988,   328,   267,
   279,    59,    -1,    -1,   959,    -1,   686,   329,    -1,   830,
   690,    -1,   833,    44,   336,   695,   350,   351,    -1,   371,
   372,   373,    -1,   844,   845,   846,   378,    -1,   267,    -1,
    -1,    10,    -1,    -1,   342,    91,   388,    -1,   859,    -1,
   307,   280,   309,   310,   311,   312,   313,   329,     0,    -1,
   329,   318,   386,    -1,   336,   363,    -1,   336,    10,   389,
    91,   329,   329,    -1,   744,    44,    -1,    10,   336,   336,
    -1,    -1,   752,   340,   341,    -1,    -1,  1068,    -1,    -1,
    59,   348,   349,   350,   351,   279,   280,    -1,   768,   769,
   329,   279,    -1,   914,   371,   372,   373,   336,    -1,   429,
    -1,   378,   923,   924,    -1,   435,   786,    59,   788,    -1,
   790,    -1,    91,   371,   372,   373,    59,    -1,    -1,   386,
   378,    10,   452,   362,    44,   279,   280,   948,    -1,    -1,
    -1,   811,    -1,   463,    -1,   329,   466,    -1,   371,   372,
   373,   329,   336,    -1,   474,   378,   826,   341,   336,    -1,
   830,    -1,    10,   676,   279,   280,   293,   294,   295,   296,
   297,    10,    -1,   686,   844,   845,   846,   690,   362,    -1,
    59,    91,   695,    15,    16,   329,    -1,    19,    -1,   859,
   280,    -1,   336,    -1,  1005,   515,    44,   517,  1009,   307,
  1011,   309,   310,   311,   312,    44,  1017,    -1,    10,    -1,
    42,    43,    91,    61,   329,    -1,    48,    49,   362,    51,
    52,   336,    61,    -1,    -1,    -1,   341,   342,    -1,   899,
    -1,    -1,    -1,   279,   280,    -1,    -1,    44,   368,   329,
   370,    -1,   372,    91,    -1,    -1,   336,   362,   378,    -1,
     0,   341,    91,   923,   924,   768,   769,    59,   279,   307,
    10,   309,   310,   311,   312,   313,    -1,    -1,    -1,   359,
   318,    -1,   362,   786,    -1,   788,    -1,   790,   948,    -1,
    -1,   329,    -1,   329,    91,    -1,    -1,    -1,   336,    91,
   336,    -1,   340,   341,   807,   341,    -1,    -1,    -1,    -1,
   348,   349,   350,   351,    -1,    -1,    -1,    -1,   329,    59,
   980,   280,    -1,   826,    -1,   336,   362,   830,    -1,    -1,
   262,   263,   264,    -1,    44,   267,   268,   269,    -1,   271,
    -1,   844,   845,   846,    -1,  1005,    -1,    -1,   386,   281,
    -1,  1011,    10,    -1,    -1,    -1,   859,  1017,   290,   291,
    -1,   293,   294,   295,   296,   297,   676,    -1,    44,   489,
   329,    10,    -1,    -1,    10,    -1,   686,   336,    -1,   279,
   690,    91,   341,    -1,   307,   695,   309,   310,   311,   312,
   313,    -1,    -1,    -1,    -1,   318,    10,   329,   267,    44,
   359,    59,    -1,   362,   336,    44,   329,    -1,    -1,    -1,
   342,    -1,    -1,   336,    -1,    91,    -1,   340,   341,    -1,
   923,   924,    61,    59,    -1,   348,   349,   350,   351,   329,
    44,   363,    -1,    91,    -1,   555,   336,    -1,    -1,    44,
    -1,   279,    -1,    -1,    -1,   948,    91,    61,    -1,    -1,
   279,   280,    91,    -1,    -1,    91,    -1,    -1,   768,   769,
   329,    -1,    -1,   386,    -1,    -1,    -1,   336,    -1,   291,
   292,   293,   294,   593,   296,   267,   786,    91,   788,    -1,
   790,    -1,   279,    -1,    -1,   307,    91,   309,   310,     0,
    -1,   329,    -1,    -1,    -1,    -1,   318,    -1,   336,    10,
   329,    -1,  1005,    -1,   342,    -1,    -1,   336,  1011,    -1,
    -1,    -1,   341,   342,  1017,    -1,    -1,    -1,    -1,    -1,
   830,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,   329,   362,   844,   845,   846,   329,    -1,   336,
    -1,   281,   282,    -1,   336,    -1,    -1,    -1,    59,   859,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,   279,
   392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
   402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
   412,   413,   414,   415,   416,   417,    10,    -1,    -1,    -1,
   422,    -1,   342,   279,   426,   345,   428,   347,    10,   267,
   432,   433,    -1,   923,   924,    59,    -1,    -1,    -1,   329,
    -1,    -1,   280,   363,    -1,    -1,   336,    -1,    -1,   451,
    -1,   267,    -1,    -1,   279,   280,    -1,   459,   948,    -1,
   279,   280,    44,    -1,   280,    59,    -1,    91,   470,   471,
   472,   473,    -1,   329,   476,    -1,    -1,     0,    -1,    61,
   336,    -1,   484,    10,    -1,   279,    -1,    10,    -1,   491,
   492,   329,    -1,   495,   279,    -1,    -1,    91,   336,    -1,
    -1,    -1,    44,   341,   329,    -1,    -1,    -1,    -1,    91,
   329,   336,    -1,   329,    -1,  1005,   341,   336,   520,   521,
   336,  1011,   341,   342,   362,   341,   528,  1017,    -1,   531,
    -1,    -1,    59,    -1,    -1,   329,    59,   362,   540,    -1,
    -1,    -1,   336,   362,   329,    -1,   362,    -1,   342,    91,
    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    10,    10,    -1,    -1,    -1,    -1,   257,   258,   259,    -1,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   590,   280,
   281,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,    59,   299,    59,
    59,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    10,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,   329,    91,
    -1,    91,    91,   267,    -1,   336,   337,    -1,    -1,   340,
   652,   342,   343,   344,   784,   346,   280,   348,    -1,   350,
    -1,   352,    -1,    44,    -1,   318,    -1,    -1,    -1,   360,
    -1,   362,   363,   267,   365,   366,   367,   368,   369,   370,
    61,    59,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   349,   279,    -1,    -1,
   353,   354,   355,   356,    -1,   329,     0,    -1,    -1,    -1,
    91,    -1,   336,    91,    -1,    -1,    10,   341,    -1,   721,
   890,   723,    -1,    -1,   894,    -1,    -1,    -1,   730,   731,
    -1,    -1,    -1,    -1,    -1,   329,    -1,   279,   362,   262,
   263,   264,   336,    -1,   267,   268,   269,   329,   271,    -1,
    44,    -1,    -1,    -1,   336,    -1,    -1,    -1,   281,    -1,
   342,   763,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
   307,    -1,   309,   310,   311,   312,   313,   329,    -1,   791,
   792,   318,    -1,    -1,   336,   797,   798,    91,    -1,    -1,
    -1,    -1,   329,    -1,   806,   807,   808,    -1,    -1,   336,
   812,    -1,    -1,   340,   341,   267,    -1,   267,   267,   342,
    -1,   348,   349,   350,   351,    -1,    -1,   307,    -1,   309,
   310,   311,   312,    -1,   836,   837,   838,   839,     0,    -1,
   363,   843,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,   981,    -1,    -1,   984,    -1,   986,   318,   988,   386,
   340,    -1,  1032,    -1,    -1,  1035,  1036,    -1,   348,  1039,
  1040,    -1,    -1,   334,   335,    -1,    -1,   329,    -1,   329,
   329,    -1,    44,    -1,   336,    -1,   336,   336,   349,   267,
   351,    -1,   353,   354,   355,   356,    58,    59,   279,    61,
   902,    63,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,
    -1,    -1,   914,  1083,  1084,  1085,  1086,   919,    -1,    -1,
    -1,    -1,    -1,  1093,   334,   335,    -1,    -1,    -1,    91,
    -1,    -1,    10,    -1,  1064,    -1,  1066,    -1,  1068,   349,
    -1,  1071,    -1,   353,   354,   355,   356,    -1,   329,    -1,
   952,   329,    -1,    -1,    -1,   336,    -1,   959,   336,  1089,
    -1,   342,    -1,   257,   258,   259,    -1,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,    63,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,    -1,   299,    -1,  1009,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
   344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,   375,   376,   377,    -1,   379,   380,   381,   382,    10,
   384,   385,   386,    -1,    -1,   257,   258,   259,    -1,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,    -1,   299,    59,    -1,
   302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    -1,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
   342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,     0,   374,   375,   376,   377,    -1,   379,   380,   381,
   382,    10,   384,   385,   386,   262,   263,   264,    -1,    -1,
    -1,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,    -1,   330,   331,    -1,    44,   334,   335,    -1,   262,
   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,    58,
    59,   349,    61,   351,    63,   353,   354,   355,   356,   357,
   358,   359,   318,   361,    -1,    -1,    -1,    -1,    -1,   307,
    -1,   309,   310,   311,   312,   313,    -1,    -1,   334,   335,
   318,    -1,    91,    -1,    -1,   342,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   349,    -1,   351,    -1,   353,   354,   355,
   356,    -1,   340,   359,    -1,   361,   363,   257,   258,   259,
    -1,   261,   350,   351,    -1,   265,   266,    -1,    -1,   342,
   270,     0,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    10,    -1,   283,   284,   285,   286,   287,   288,   289,
   363,    -1,   292,    -1,    -1,    -1,    -1,    -1,   386,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,    44,   307,   317,   309,   310,
   311,   312,   313,    -1,    -1,    -1,    -1,   318,    -1,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,   337,   329,    -1,
   340,    -1,    -1,   343,   344,   336,   346,    -1,   348,   340,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,   349,   350,
   351,    -1,    91,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,   386,    -1,    -1,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    59,
   299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
   339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,   375,   376,   377,    -1,
   379,   380,   381,   382,    44,   384,   385,   386,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    91,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
   339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,     0,   374,   375,   376,   377,    -1,
   379,   380,   381,   382,    10,   384,   385,   386,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,    44,   309,
   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,   307,   329,
   309,   310,   311,   312,   313,    -1,   336,    -1,    -1,   318,
   340,   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,   349,
   350,   351,    -1,    -1,   307,    91,   309,   310,   311,   312,
   313,   340,   341,    -1,    -1,   318,    -1,    -1,    -1,   348,
   349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,   279,
   280,    -1,    -1,    -1,    -1,    -1,   386,   340,    -1,    -1,
    -1,    -1,    -1,    -1,     0,   348,   349,   350,   351,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    -1,   386,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,    -1,   309,
   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,   329,
    -1,    -1,    -1,   386,    -1,    -1,   336,    -1,    44,    -1,
    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   340,    -1,    58,    59,    -1,    -1,    -1,    63,   348,   349,
   350,   351,   362,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,    -1,    -1,   318,    -1,    -1,
   334,   335,   323,   324,    -1,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   334,   335,   349,   386,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,   349,    -1,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
   336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   775,   365,
   366,   367,   368,   369,   370,    -1,    -1,   784,   374,   375,
   376,   377,    -1,   379,   380,   381,   382,    44,   384,   385,
   386,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    91,    -1,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
   336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,     0,   374,   375,
   376,   377,    -1,   379,   380,   381,   382,    10,   384,   385,
   386,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
   327,   328,    -1,    -1,    -1,    -1,    -1,   334,   335,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    58,    59,    -1,    -1,    -1,
    63,    -1,    -1,    -1,   981,    -1,    -1,   984,    -1,   986,
    -1,   988,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,    -1,   334,
   335,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   349,    -1,   351,     0,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1064,    -1,  1066,
    -1,  1068,    -1,    -1,  1071,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,
    -1,    44,  1089,    -1,   341,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,
    63,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   257,   258,   259,    -1,   261,   262,
   263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,    -1,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
   343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
   363,    63,   365,   366,   367,   368,   369,   370,    -1,    -1,
    -1,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   386,   257,   258,   259,    -1,   261,   262,
   263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,    -1,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
   343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
   363,    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,
     0,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
    10,   384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   307,   308,    -1,    -1,
   311,    -1,    -1,    -1,   315,   316,    -1,   318,   319,   320,
   321,   322,   323,   324,    44,    -1,   327,   328,    -1,    -1,
    -1,   332,   333,   334,   335,    -1,    -1,    -1,    58,    59,
   341,    61,    -1,    63,    -1,    -1,    -1,   348,   349,    -1,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     0,    -1,   334,   335,    -1,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    61,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,
    -1,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
    91,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    -1,   299,
    -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,   339,
   340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,    -1,   363,    63,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,   375,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   386,   257,   258,   259,
    -1,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,    -1,   334,   335,   336,   337,   279,   339,
   340,    -1,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,     0,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    10,   384,   385,   386,    -1,   329,    -1,
    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,   307,
   308,   342,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    44,    -1,   327,
   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    59,   341,    -1,    -1,    63,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,    -1,    -1,   364,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    -1,   330,   331,     0,    -1,   334,   335,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,
   349,    -1,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   257,   258,   259,    -1,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    91,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
   337,    -1,   339,   340,    -1,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
   367,   368,   369,   370,    44,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
   257,   258,   259,    -1,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
   337,   280,   339,   340,    -1,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   361,     0,   363,    -1,   365,   366,
   367,   368,   369,   370,    -1,    10,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   359,    -1,    -1,   362,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,     0,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    10,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,    -1,    -1,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    44,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   257,   258,   259,    -1,   261,   262,   263,   264,
   265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,    -1,   280,    63,    -1,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
    -1,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   386,   257,   258,   259,    -1,   261,   262,   263,   264,
   265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,    -1,   280,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
    -1,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,     0,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    10,   384,
   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,    44,   330,   331,    -1,    -1,   334,   335,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,
    -1,    63,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,     0,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    10,    -1,
    -1,    10,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    44,   314,    -1,    44,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,
    -1,    63,    61,   334,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    91,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   257,   258,   259,    -1,   261,
   262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,    -1,   280,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    -1,    -1,   334,   335,   336,   337,    -1,    -1,   340,   341,
   342,   343,   344,    -1,   346,    -1,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    -1,   384,   385,   386,   257,   258,   259,    -1,   261,
   262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,    -1,   280,    -1,
   279,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
   329,    -1,   334,   335,   336,   337,    -1,   336,   340,   341,
   342,   343,   344,   342,   346,    -1,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,     0,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    10,   384,   385,   386,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,   308,    -1,
    -1,   311,    -1,    -1,    -1,   315,   316,    -1,   318,   319,
   320,   321,   322,   323,   324,    44,    -1,   327,   328,    -1,
    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,
    59,   341,    61,    -1,    63,    -1,    -1,    -1,   348,   349,
    -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,    -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,     0,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    10,    -1,    -1,    10,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,    44,   314,    -1,    44,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    61,    -1,    63,    61,    -1,    -1,    -1,   337,
    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
   348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    91,    -1,   365,   366,   367,
   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,    -1,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    10,   280,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,   337,    -1,
    -1,   340,   341,   342,   343,   344,    -1,   346,    -1,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   386,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,    -1,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,   279,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   329,    -1,   334,   335,   336,   337,    10,
   336,   340,   341,   342,   343,   344,   342,   346,    -1,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,    -1,   363,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   386,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    91,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
   350,    -1,   352,    -1,    -1,    44,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    61,    -1,   374,    -1,   376,   377,    59,   379,
   380,   381,   382,    -1,   384,   385,   386,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
    -1,    10,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,
    59,    -1,    -1,    -1,    -1,   336,   337,    -1,    -1,   340,
   341,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,    -1,   360,
    -1,   362,    91,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
   279,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
    -1,    10,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,   329,    -1,
    59,    -1,    -1,   342,    -1,   336,   337,    -1,    -1,   340,
   341,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,    -1,   360,
    -1,   362,    91,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
   269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,    -1,    10,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,
   299,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   329,    -1,    59,    -1,    -1,    -1,    -1,   336,   337,    -1,
    -1,   340,   341,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,
    -1,   360,    -1,   362,    91,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
   269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    10,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,
   299,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   329,    -1,    59,    -1,    -1,    -1,    -1,   336,   337,    -1,
    -1,   340,   341,    -1,   343,   344,    -1,   346,    -1,   348,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   357,    -1,
    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
    -1,    -1,   269,   270,    10,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
   357,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
    -1,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    10,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
   256,   257,   258,   259,   260,   261,    -1,    -1,   264,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    10,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,   257,
   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    10,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    10,    -1,   292,    -1,    -1,    -1,    -1,    -1,
   298,   299,    -1,   301,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,
    -1,    -1,   340,    61,    -1,   343,   344,    -1,   346,    -1,
   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   360,    -1,    -1,   363,    -1,   365,   366,   367,
   368,   369,   370,    91,    -1,    -1,   374,    -1,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,    -1,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,     0,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    10,   306,
   307,   308,   309,   310,   311,   312,    10,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    44,   340,    -1,    -1,   343,   344,    -1,   346,
    44,    -1,    -1,    -1,    -1,   352,    58,    59,    -1,    61,
    -1,    63,    -1,   360,    -1,    -1,    -1,    61,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,    91,
   257,   258,   259,    -1,   261,    -1,    -1,    91,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,     0,    -1,
    -1,   279,   299,    -1,    -1,   302,   303,   304,    10,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    44,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,   329,    -1,    -1,    -1,   352,    58,    59,   336,    -1,
    -1,    63,    10,   360,   342,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,    91,
    -1,    -1,    -1,    10,    -1,    10,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    44,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    91,    61,    -1,    61,    -1,   280,   281,
   282,    -1,    44,    -1,    -1,   279,   280,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    58,    59,    -1,    -1,
    -1,    63,    -1,   305,    91,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    -1,    -1,   334,   335,   336,   329,    -1,   339,    -1,    -1,
   342,    -1,   336,   345,    -1,   347,    -1,   349,   342,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
   362,   363,    -1,    -1,    -1,    -1,    -1,    -1,   362,     0,
    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281,
   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    58,    59,    -1,
    61,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    91,   279,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,    -1,   347,    -1,   349,     0,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    10,   361,
   362,   363,   279,   280,   279,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,   375,    -1,   267,   268,   269,    -1,   271,
    -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,   336,   281,
   282,    -1,    44,    -1,   342,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    58,    59,    -1,    61,
    -1,    63,   329,   305,   329,    -1,    -1,    -1,    -1,   336,
    -1,   336,    -1,    -1,   341,   342,    -1,   342,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,   362,    -1,   339,    -1,   775,
   342,    -1,   778,   345,    -1,   347,    -1,    -1,   784,    -1,
    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
    -1,   363,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    44,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    58,    59,    -1,    61,    -1,    63,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,   338,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,     0,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    10,
   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,   375,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    58,    59,    -1,
    61,    -1,    63,   305,    -1,   981,    -1,    -1,   984,    -1,
   986,    -1,   988,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    91,    -1,   334,   335,   336,    -1,   338,   339,    -1,    -1,
   342,    -1,    -1,   345,    -1,   347,    -1,   349,    -1,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,     0,   361,
    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,   375,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,  1064,    -1,
  1066,    -1,  1068,    -1,    -1,  1071,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,  1089,    -1,    -1,    -1,    59,    -1,    -1,
   305,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,    -1,   338,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    44,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,   338,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,    44,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    -1,   363,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,   281,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    44,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   342,    -1,   281,   282,    -1,    58,    59,    -1,    61,    -1,
    63,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,   363,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,    -1,   338,
   339,     0,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,    10,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    58,
    59,    -1,    61,    -1,    63,    -1,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   305,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,    -1,   338,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    -1,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,    -1,   338,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,    -1,   349,    44,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,   375,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    91,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,    -1,   338,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,    44,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,   307,
   308,    -1,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    91,   327,
   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,     0,
    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    10,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,    -1,    -1,   364,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,   262,   263,   264,   386,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,    58,    59,    -1,
    -1,    -1,    63,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
    -1,   338,   339,     0,    -1,   342,    -1,    -1,   345,    -1,
   347,    -1,   349,    10,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    -1,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,   262,
   263,   264,    -1,    -1,   267,   268,   269,    44,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    58,    59,    -1,    61,    -1,    63,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,    -1,   338,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,    -1,   349,    -1,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,   280,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,    44,
   351,    -1,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,   362,   363,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,
   347,    -1,   349,    44,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    -1,   363,    58,    59,    -1,
    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,   375,    -1,
    -1,   307,   308,    -1,    -1,   311,    -1,    -1,    -1,   315,
   316,    -1,   318,   319,   320,   321,   322,   323,   324,    -1,
    91,   327,   328,    -1,    -1,    -1,   332,   333,   334,   335,
    -1,     0,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,
    -1,    10,   348,   349,    -1,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,    -1,    -1,   364,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    44,   271,    -1,    -1,    -1,
   386,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    58,
    59,    -1,    -1,    -1,    63,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,    -1,    -1,   339,     0,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    10,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    58,    59,    -1,    -1,    -1,    63,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    -1,   334,   335,   336,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,    -1,   349,    -1,
   351,     0,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    10,   363,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,   375,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,     0,    -1,    -1,
    59,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,    -1,    -1,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,    44,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    58,    59,    -1,    -1,    -1,
    63,    -1,    -1,    -1,    -1,    -1,   375,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    91,    -1,
    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   305,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,    -1,   349,    44,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,    58,
    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    58,    59,    -1,    -1,    -1,    63,    -1,   281,   282,
    -1,    -1,    -1,   342,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,    -1,    -1,   339,     0,    -1,   342,
    -1,    -1,   345,    -1,   347,    -1,   349,    10,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   375,   262,   263,   264,    -1,    -1,   267,   268,
   269,    44,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    -1,    58,    59,    -1,    -1,    -1,
    63,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    -1,   334,   335,   336,    -1,    -1,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,     0,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    10,   361,    -1,   363,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    44,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    58,
    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,    -1,   330,   331,    -1,    -1,   334,   335,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,
   347,    -1,   349,     0,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    10,   361,    -1,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    44,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    58,    59,    -1,    -1,    -1,    63,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
    -1,   334,   335,    -1,    -1,    -1,   339,     0,    -1,   342,
    -1,    -1,   345,    -1,   347,    -1,   349,    10,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    58,    59,    -1,    -1,    -1,
    63,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    -1,   330,   331,    -1,    -1,   334,   335,    -1,    -1,    -1,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,     0,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    10,   361,    -1,   363,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    44,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    58,
    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,    -1,   330,   331,    -1,    -1,   334,   335,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,    -1,
   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,     0,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,   375,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    44,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    58,    59,    -1,    -1,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
    -1,   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,    -1,   349,     0,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    10,   361,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    58,    59,    -1,    -1,    -1,
    63,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    -1,   330,   331,    -1,    -1,   334,   335,    -1,    -1,    -1,
   339,     0,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
   349,    10,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   375,   262,   263,   264,
    -1,    -1,   267,   268,   269,    44,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    58,
    59,    -1,    -1,    -1,    63,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,    -1,   330,   331,    -1,    -1,   334,
   335,    -1,    -1,    -1,   339,    -1,    -1,   342,     0,    -1,
   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    10,    -1,
   355,   356,   357,   358,   359,    -1,   361,    -1,   363,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    58,    59,    -1,    -1,
    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
    -1,   334,   335,    -1,    -1,    -1,   339,    -1,    -1,   342,
    -1,    -1,   345,    -1,   347,    -1,    -1,     0,   351,    -1,
    -1,    -1,   355,   356,   357,   358,   359,    10,   361,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    44,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    -1,    58,    59,    -1,    -1,    -1,
    63,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    -1,   330,   331,    -1,    -1,   334,   335,    -1,    -1,    -1,
   339,    -1,    -1,   342,     0,    -1,   345,    -1,   347,    -1,
    -1,    -1,   351,    -1,    10,    -1,    -1,    -1,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    44,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    58,    59,    -1,    -1,    -1,    63,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
    -1,    -1,   334,   335,    -1,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,    -1,   347,    -1,    -1,     0,   351,
    -1,    -1,    -1,    -1,    -1,   357,   358,   359,    10,   361,
    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,   375,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    58,    59,    -1,    -1,
    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,
     0,    -1,   345,    -1,   347,    -1,    -1,    -1,   351,    -1,
    10,    -1,    -1,    -1,   357,   358,   359,    -1,   361,    -1,
   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   375,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    44,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    58,    59,
    -1,    -1,    -1,    63,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,    -1,   330,   331,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   339,     0,    -1,   342,    -1,    -1,   345,
    -1,   347,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
    -1,   357,   358,   359,    -1,   361,    -1,   363,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    58,    59,    -1,    -1,    -1,    63,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
   342,     0,    -1,   345,    -1,   347,    -1,    -1,    -1,    -1,
    -1,    10,    -1,    -1,    -1,   357,   358,   359,    -1,   361,
    -1,   363,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   281,   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    58,
    59,    -1,    -1,    -1,    63,   305,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,
    -1,    -1,   342,     0,    -1,   345,    -1,   347,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,   357,   358,    -1,
    -1,    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   375,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    58,    59,    -1,   290,   291,    63,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,    -1,   330,   331,    -1,    -1,     0,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    10,   345,
    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   357,   358,    -1,    -1,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    58,    59,   267,   268,
   269,    63,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     0,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    10,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    59,
   339,    -1,    -1,   342,     0,    -1,   345,    -1,   347,    -1,
   766,    -1,    -1,    -1,    10,    -1,    -1,   773,   357,   358,
    -1,    -1,    -1,    -1,   363,   262,   263,   264,   784,    -1,
   267,   268,   269,    -1,   271,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    44,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    58,    59,    -1,    -1,    -1,    63,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,
   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
   357,   358,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,   375,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    58,    59,    -1,
    -1,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   325,   326,     0,    -1,    -1,   330,   331,
    -1,    -1,   262,   263,   264,    10,    -1,   339,   268,   269,
   342,   271,    -1,   345,    -1,   347,   972,    -1,   974,    -1,
   976,    -1,    -1,    -1,    -1,   981,    -1,    -1,    -1,    -1,
    -1,   363,   988,   293,   294,   295,   296,   297,    -1,    44,
    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,     0,   342,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    10,    -1,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,   363,  1060,    -1,    -1,    -1,    -1,   305,
  1066,    -1,  1068,    -1,    -1,  1071,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,   325,
   326,    -1,    -1,  1089,   330,   331,    -1,    -1,    -1,    58,
    59,    -1,    -1,   339,    63,    -1,   342,    -1,    -1,   345,
    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,   375,
   271,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    10,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,   325,   326,    -1,    -1,    -1,   330,
   331,    58,    59,    -1,    -1,    -1,    63,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,     0,
    -1,    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    10,
    -1,    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
   325,   326,    -1,    -1,    -1,   330,   331,    58,    59,    -1,
    -1,    -1,    63,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,     0,    -1,    -1,   363,    -1,
    -1,    -1,   281,   282,    -1,    10,    -1,    -1,    -1,    -1,
   375,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,   325,   326,    -1,    -1,
    -1,   330,   331,    58,    59,    -1,    -1,    -1,    63,    -1,
   339,    -1,    -1,   342,    -1,    -1,   345,    -1,   347,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     0,   363,   262,   263,   264,    -1,    -1,
   267,   268,   269,    10,   271,    -1,   375,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    -1,    -1,    -1,    63,    -1,   325,   326,
    -1,    -1,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,
   347,   262,   263,   264,    -1,    -1,   267,   268,   269,    10,
   271,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,   325,   326,    -1,    -1,    -1,   330,
   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,     0,   347,   262,   263,   264,
    -1,    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,
    -1,    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
    -1,   326,    -1,    -1,    -1,   330,   331,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
   375,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,
   347,   262,   263,   264,    -1,    -1,   267,   268,   269,    10,
   271,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,     0,   347,   262,   263,   264,
    -1,    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,
    -1,    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
   375,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,
   347,   262,   263,   264,    -1,    -1,   267,   268,   269,    10,
   271,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,     0,   347,   262,   263,   264,
    -1,    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,
    -1,    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,
   345,    -1,   347,     0,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    10,   271,    -1,    -1,    -1,   363,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
   375,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    44,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,     0,
   347,   262,   263,   264,    -1,    -1,   267,   268,   269,    10,
   271,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   375,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    44,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,     0,   347,   262,   263,   264,
    -1,    -1,   267,   268,   269,    10,   271,    -1,    -1,    -1,
    -1,    -1,   363,    -1,    -1,    -1,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,   375,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,     0,    -1,    -1,    -1,    -1,    44,
   305,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    44,    -1,
   345,    -1,   347,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    59,   271,    -1,    -1,    -1,   363,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
   375,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,     0,    -1,    -1,    -1,    -1,   305,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,    -1,    44,   345,    -1,
   347,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    58,    59,    -1,    -1,     0,   363,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    10,    -1,    -1,   375,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,   339,    -1,
    -1,   342,    -1,    -1,   345,    -1,   347,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,   363,     0,    -1,    -1,   281,   282,    -1,    -1,
    -1,    -1,    -1,    10,   375,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,   262,   263,   264,    -1,
   305,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    44,    -1,    -1,
    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    59,    -1,   339,    -1,    63,   342,    -1,   305,
   345,    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
   375,    -1,    -1,   339,    -1,    -1,   342,    -1,     0,   345,
    -1,   347,    -1,    -1,    -1,   262,   263,   264,    10,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,   363,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,   375,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    -1,    63,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,   339,    -1,    -1,   342,   281,   282,   345,    91,
   347,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,    -1,    -1,     0,    -1,   363,    -1,    -1,    -1,
   305,    -1,    -1,    -1,    10,    -1,    -1,    -1,   375,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   339,    -1,    -1,   342,    44,    -1,
   345,    -1,   347,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    59,   271,    -1,    -1,    63,   363,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
   375,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,     0,   334,   335,   336,
    -1,    -1,   339,    -1,    -1,   342,    10,    -1,   345,    -1,
   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    -1,   363,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    59,    -1,     0,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    -1,    44,   334,   335,   336,    -1,    -1,   339,    -1,    -1,
   342,    -1,    -1,   345,    -1,   347,    59,   349,    61,   351,
    63,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
    -1,   363,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,     0,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,    -1,    44,   334,   335,
   336,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   345,
    -1,   347,    59,   349,    61,   351,    63,   353,   354,   355,
   356,   357,   358,   359,    -1,   361,    -1,   363,    -1,    -1,
     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    91,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    -1,    44,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
    -1,    91,    -1,    -1,    -1,    -1,    -1,   280,   342,    -1,
    -1,   345,    -1,   347,    -1,    -1,     0,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    10,    -1,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    44,   334,   335,   336,    -1,    -1,    -1,    -1,    -1,   342,
    -1,    -1,    -1,    -1,    -1,    59,   349,    61,   351,    63,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
   363,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
    -1,   268,   269,    -1,   271,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
    -1,   338,   262,   263,   264,   342,    -1,    -1,   268,   269,
    44,   271,   349,    -1,   351,    -1,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    59,   363,    61,    -1,    63,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    91,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    -1,    -1,   334,   335,   336,    -1,   338,    -1,
    -1,    -1,   342,    -1,    -1,    -1,    -1,    44,    -1,   349,
    -1,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
    -1,   361,    59,   363,    61,    -1,    63,    -1,   262,   263,
   264,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,     0,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,    -1,   338,    -1,    -1,    -1,   342,    -1,
    -1,    44,    -1,    -1,    -1,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    59,   361,    61,   363,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,    -1,   268,   269,    -1,   271,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,    -1,    -1,
   334,   335,   336,    -1,   338,   262,   263,   264,   342,    -1,
    -1,   268,   269,    44,   271,   349,    -1,   351,    -1,   353,
   354,   355,   356,   357,   358,   359,    -1,   361,    59,   363,
    61,    -1,    63,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,    -1,    -1,   334,   335,   336,
    -1,   338,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,
    -1,    -1,   349,    -1,   351,     0,   353,   354,   355,   356,
   357,   358,   359,    -1,   361,    10,   363,    -1,    -1,   262,
   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    44,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,    -1,
    -1,   334,   335,   336,    -1,   338,    91,    -1,    -1,   342,
    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,   351,    -1,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,    -1,
   363,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,    -1,    91,   334,   335,   336,    -1,   338,    -1,    -1,
    -1,   342,    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,
   351,     0,   353,   354,   355,   356,   357,   358,   359,    -1,
   361,    10,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,    -1,    -1,   268,   269,    44,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    61,    -1,    63,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    91,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
   335,   336,    -1,   338,    -1,    -1,    -1,   342,    -1,    -1,
    -1,    -1,    44,    -1,   349,    -1,   351,    -1,   353,   354,
   355,   356,   357,   358,   359,    -1,   361,    59,   363,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,   268,
   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     0,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    -1,    44,   334,   335,   336,    -1,   338,
    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,    59,
   349,    61,   351,    63,   353,   354,   355,   356,   357,   358,
   359,    -1,   361,    -1,   363,    -1,    -1,    59,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,   268,
   269,    91,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,    44,    -1,   334,   335,   336,    -1,   338,
   262,   263,   264,   342,    -1,    -1,   268,   269,    59,   271,
   349,     0,   351,    -1,   353,   354,   355,   356,   357,   358,
   359,    10,   361,    -1,   363,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    59,    -1,   334,   335,   336,    -1,    -1,    -1,    -1,    -1,
   342,    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,   351,
    -1,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
    -1,   363,   262,   263,   264,    -1,    -1,    -1,   268,   269,
    -1,   271,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    10,    -1,   267,   268,   269,    -1,   271,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,   281,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,    59,     0,   334,   335,   336,    -1,    -1,    -1,
    -1,    -1,   342,    10,    -1,    -1,    -1,    -1,    -1,   349,
    -1,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
   342,   361,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,   363,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   281,   282,    59,    -1,    10,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
    -1,    -1,    -1,   262,   263,   264,     0,    -1,   267,   268,
   269,    -1,   271,    59,    -1,    -1,    10,     0,    -1,    -1,
    -1,   342,   281,   282,   345,    -1,   347,    10,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    59,    10,    -1,    -1,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    10,
    -1,    -1,    -1,   342,    -1,    -1,   345,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,   363,   262,   263,   264,    -1,    -1,
   267,   268,   269,    44,   271,    59,    -1,    -1,    -1,     0,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    59,    10,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,    59,    -1,
    -1,    -1,    -1,    -1,   281,   342,    -1,    -1,   345,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,   363,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   342,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
   293,   294,   295,   296,   297,    -1,    -1,   363,   262,   263,
   264,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,   339,   290,   291,   342,   293,
   294,   295,   296,    59,    -1,    -1,   339,    -1,    -1,   342,
    -1,    -1,   293,   294,   295,   296,   297,    -1,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   363,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   342,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   342,   293,   294,   295,   296,   297,    -1,    -1,   363,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,   363,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   342,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,    -1,    -1,
   317,    -1,   363,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,    -1,
    -1,   257,   258,   259,   260,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,   298,   299,   300,   301,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
    -1,   257,   258,   259,   260,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
   257,   258,   259,   260,   261,   262,   263,   264,    -1,    -1,
   267,   268,   269,   270,   271,    -1,    -1,   274,   275,   276,
   277,   278,   279,   280,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,    -1,   315,   316,
    -1,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
   327,   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,
    -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,
    -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   361,    -1,    -1,   364,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,   260,   261,   262,   263,
   264,    -1,    -1,   267,   268,   269,   270,   271,    -1,   386,
   274,   275,   276,   277,   278,   279,   280,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
    -1,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
   324,    -1,    -1,   327,   328,    -1,    -1,    -1,   332,   333,
   334,   335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,    -1,    -1,
   364,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,   260,
   261,   262,   263,   264,    -1,    -1,   267,   268,   269,   270,
   271,    -1,   386,   274,   275,   276,   277,   278,   279,   280,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
   311,    -1,    -1,    -1,   315,   316,    -1,   318,   319,   320,
   321,   322,   323,   324,    -1,    -1,   327,   328,    -1,    -1,
    -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,    -1,    -1,   364,   365,    -1,    -1,    -1,    -1,   257,
   258,   259,   260,   261,   262,   263,   264,    -1,    -1,   267,
   268,   269,   270,   271,    -1,   386,   274,   275,   276,   277,
   278,   279,   280,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,    -1,   306,   307,
   308,    -1,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,    -1,    -1,   364,   365,    -1,    -1,
    -1,    -1,   257,   258,   259,   260,   261,   262,   263,   264,
    -1,    -1,   267,   268,   269,   270,   271,    -1,   386,   274,
   275,   276,   277,   278,   279,   280,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
    -1,   306,   307,   308,    -1,    -1,   311,    -1,    -1,    -1,
   315,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
    -1,    -1,   327,   328,    -1,    -1,    -1,   332,   333,   334,
   335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   348,   349,    -1,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
    -1,    -1,    -1,    -1,    -1,    -1,   256,   257,   258,   259,
   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,   386,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,
   300,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   256,   257,   258,   259,
   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,
    -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   256,   257,   258,   259,
   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,
    -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,   350,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   386,   257,   258,   259,   260,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,   300,
   301,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   257,   258,   259,   260,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,   301,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,
    -1,   343,   344,    -1,   346,    -1,   348,    -1,    -1,    -1,
   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,
    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,
    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,
   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
    -1,   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,   341,    -1,
   343,   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,
    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,
    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
   315,   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
   316,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,
    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
   348,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,
   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,
    -1,   379,   380,   381,   382,    -1,   384,   385,   257,   258,
   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,
    -1,   340,   341,    -1,   343,   344,    -1,   346,    -1,    -1,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,
   369,   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,
   379,   380,   381,   382,    -1,   384,   385,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,
   340,    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,
    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   360,    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,
   370,    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,
   380,   381,   382,    -1,   384,   385,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,
    -1,    -1,   343,   344,    -1,   346,    -1,    -1,    -1,    -1,
    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
    -1,    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,
    -1,    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,
   381,   382,    -1,   384,   385,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,    -1,   314,   315,   316,   317,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,
    -1,   343,   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,
   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,
    -1,    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,
    -1,    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,
   382,    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,
    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,
   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
    -1,   314,   315,   316,   317,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,
   343,   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,   352,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,
    -1,    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,
    -1,   374,    -1,   376,   377,    -1,   379,   380,   381,   382,
    -1,   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,    -1,
   314,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,
   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,
   374,    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,
   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,
    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   365,   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,
    -1,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,    -1,   314,    -1,
    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,
   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,
   366,   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,
   376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,    -1,   314,    -1,    -1,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   337,    -1,    -1,   340,    -1,    -1,   343,   344,    -1,   346,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,
   367,   368,   369,   370,    -1,    -1,    -1,   374,    -1,   376,
   377,    -1,   379,   380,   381,   382,    -1,   384,   385,   307,
   308,    -1,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   307,   308,   364,    -1,   311,    -1,
    -1,    -1,   315,   316,    -1,   318,   319,   320,   321,   322,
   323,   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,
   333,   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,
    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   307,
   308,   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   307,   308,   364,    -1,   311,    -1,
    -1,    -1,   315,   316,    -1,   318,   319,   320,   321,   322,
   323,   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,
   333,   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,
    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   307,
   308,   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   307,   308,   364,    -1,   311,    -1,
    -1,    -1,   315,   316,    -1,   318,   319,   320,   321,   322,
   323,   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,
   333,   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,
    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   307,
   308,   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   307,   308,   364,    -1,   311,    -1,
    -1,    -1,   315,   316,    -1,   318,   319,   320,   321,   322,
   323,   324,    -1,    -1,   327,   328,    -1,    -1,   386,   332,
   333,   334,   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,
    -1,    -1,    -1,    -1,    -1,   348,   349,    -1,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   307,
   308,   364,    -1,   311,    -1,    -1,    -1,   315,   316,    -1,
   318,   319,   320,   321,   322,   323,   324,    -1,    -1,   327,
   328,    -1,    -1,   386,   332,   333,   334,   335,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,    -1,    -1,   364,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,
    };

  /** maps symbol value to printable name.
      @see #yyExpecting
    */
  protected static final String[] yyNames = {
    "end-of-file",null,null,null,null,null,null,null,null,null,"'\\n'",
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"' '",null,null,null,null,null,
    null,null,null,null,null,null,"','",null,null,null,null,null,null,
    null,null,null,null,null,null,null,"':'","';'",null,"'='",null,"'?'",
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,
    "kCLASS","kMODULE","kDEF","kUNDEF","kBEGIN","kRESCUE","kENSURE",
    "kEND","kIF","kUNLESS","kTHEN","kELSIF","kELSE","kCASE","kWHEN",
    "kWHILE","kUNTIL","kFOR","kBREAK","kNEXT","kREDO","kRETRY","kIN",
    "kDO","kDO_COND","kDO_BLOCK","kRETURN","kYIELD","kSUPER","kSELF",
    "kNIL","kTRUE","kFALSE","kAND","kOR","kNOT","kIF_MOD","kUNLESS_MOD",
    "kWHILE_MOD","kUNTIL_MOD","kRESCUE_MOD","kALIAS","kDEFINED","klBEGIN",
    "klEND","k__LINE__","k__FILE__","k__ENCODING__","kDO_LAMBDA",
    "kSIGNAL","tIDENTIFIER","tFID","tGVAR","tIVAR","tCONSTANT","tCVAR",
    "tLABEL","tCHAR","tUPLUS","tUMINUS","tUMINUS_NUM","tPOW","tCMP","tEQ",
    "tEQQ","tNEQ","tGEQ","tLEQ","tANDOP","tOROP","tMATCH","tNMATCH",
    "tDOT","tDOT2","tDOT3","tAREF","tASET","tLSHFT","tRSHFT","tCOLON2",
    "tCOLON3","tOP_ASGN","tASSOC","tLPAREN","tLPAREN2","tRPAREN",
    "tLPAREN_ARG","tLBRACK","tRBRACK","tLBRACE","tLBRACE_ARG","tSTAR",
    "tSTAR2","tAMPER","tAMPER2","tTILDE","tPERCENT","tDIVIDE","tPLUS",
    "tMINUS","tLT","tGT","tPIPE","tBANG","tCARET","tLCURLY","tRCURLY",
    "tBACK_REF2","tSYMBEG","tSTRING_BEG","tXSTRING_BEG","tREGEXP_BEG",
    "tWORDS_BEG","tQWORDS_BEG","tSTRING_DBEG","tSTRING_DVAR",
    "tSTRING_END","tLAMBDA","tLAMBEG","tNTH_REF","tBACK_REF",
    "tSTRING_CONTENT","tINTEGER","tIMAGINARY","tFLOAT","tRATIONAL",
    "tREGEXP_END","tSYMBOLS_BEG","tQSYMBOLS_BEG","tDSTAR","tSTRING_DEND",
    "tLABEL_END","tLOWEST",
    };

  /** printable rules for debugging.
    */
  protected static final String [] yyRule = {
    "$accept : program",
    "$$1 :",
    "program : $$1 top_compstmt",
    "top_compstmt : top_stmts opt_terms",
    "top_stmts : none",
    "top_stmts : top_stmt",
    "top_stmts : top_stmts terms top_stmt",
    "top_stmts : error top_stmt",
    "top_stmt : stmt",
    "$$2 :",
    "top_stmt : klBEGIN $$2 tLCURLY top_compstmt tRCURLY",
    "bodystmt : compstmt opt_rescue opt_else opt_ensure",
    "compstmt : stmts opt_terms",
    "stmts : none",
    "stmts : stmt_or_begin",
    "stmts : stmts terms stmt_or_begin",
    "stmts : error stmt",
    "stmt_or_begin : stmt",
    "$$3 :",
    "stmt_or_begin : kBEGIN $$3 tLCURLY top_compstmt tRCURLY",
    "$$4 :",
    "stmt : kALIAS fitem $$4 fitem",
    "stmt : kALIAS tGVAR tGVAR",
    "stmt : kALIAS tGVAR tBACK_REF",
    "stmt : kALIAS tGVAR tNTH_REF",
    "stmt : kUNDEF undef_list",
    "stmt : stmt kIF_MOD expr_value",
    "stmt : stmt kUNLESS_MOD expr_value",
    "stmt : stmt kWHILE_MOD expr_value",
    "stmt : stmt kUNTIL_MOD expr_value",
    "stmt : stmt kRESCUE_MOD stmt",
    "stmt : klEND tLCURLY compstmt tRCURLY",
    "stmt : command_asgn",
    "stmt : mlhs '=' command_call",
    "stmt : var_lhs tOP_ASGN command_call",
    "stmt : primary_value '[' opt_call_args rbracket tOP_ASGN command_call",
    "stmt : primary_value tDOT tIDENTIFIER tOP_ASGN command_call",
    "stmt : primary_value tDOT tCONSTANT tOP_ASGN command_call",
    "stmt : primary_value tCOLON2 tCONSTANT tOP_ASGN command_call",
    "stmt : primary_value tCOLON2 tIDENTIFIER tOP_ASGN command_call",
    "stmt : backref tOP_ASGN command_call",
    "stmt : lhs '=' mrhs",
    "stmt : mlhs '=' mrhs_arg",
    "stmt : expr",
    "command_asgn : lhs '=' command_call",
    "command_asgn : lhs '=' command_asgn",
    "expr : command_call",
    "expr : expr kAND expr",
    "expr : expr kOR expr",
    "expr : kNOT opt_nl expr",
    "expr : tBANG command_call",
    "expr : arg",
    "expr_value : expr",
    "command_call : command",
    "command_call : block_command",
    "block_command : block_call",
    "block_command : block_call dot_or_colon operation2 command_args",
    "$$5 :",
    "cmd_brace_block : tLBRACE_ARG $$5 opt_block_param compstmt tRCURLY",
    "fcall : operation",
    "command : fcall command_args",
    "command : fcall command_args cmd_brace_block",
    "command : primary_value tDOT operation2 command_args",
    "command : primary_value tDOT operation2 command_args cmd_brace_block",
    "command : primary_value tCOLON2 operation2 command_args",
    "command : primary_value tCOLON2 operation2 command_args cmd_brace_block",
    "command : kSUPER command_args",
    "command : kYIELD command_args",
    "command : kRETURN call_args",
    "command : kBREAK call_args",
    "command : kNEXT call_args",
    "mlhs : mlhs_basic",
    "mlhs : tLPAREN mlhs_inner rparen",
    "mlhs_inner : mlhs_basic",
    "mlhs_inner : tLPAREN mlhs_inner rparen",
    "mlhs_basic : mlhs_head",
    "mlhs_basic : mlhs_head mlhs_item",
    "mlhs_basic : mlhs_head tSTAR mlhs_node",
    "mlhs_basic : mlhs_head tSTAR mlhs_node ',' mlhs_post",
    "mlhs_basic : mlhs_head tSTAR",
    "mlhs_basic : mlhs_head tSTAR ',' mlhs_post",
    "mlhs_basic : tSTAR mlhs_node",
    "mlhs_basic : tSTAR mlhs_node ',' mlhs_post",
    "mlhs_basic : tSTAR",
    "mlhs_basic : tSTAR ',' mlhs_post",
    "mlhs_item : mlhs_node",
    "mlhs_item : tLPAREN mlhs_inner rparen",
    "mlhs_head : mlhs_item ','",
    "mlhs_head : mlhs_head mlhs_item ','",
    "mlhs_post : mlhs_item",
    "mlhs_post : mlhs_post ',' mlhs_item",
    "mlhs_node : tIDENTIFIER",
    "mlhs_node : tIVAR",
    "mlhs_node : tGVAR",
    "mlhs_node : tCONSTANT",
    "mlhs_node : tCVAR",
    "mlhs_node : kNIL",
    "mlhs_node : kSELF",
    "mlhs_node : kTRUE",
    "mlhs_node : kFALSE",
    "mlhs_node : k__FILE__",
    "mlhs_node : k__LINE__",
    "mlhs_node : k__ENCODING__",
    "mlhs_node : primary_value '[' opt_call_args rbracket",
    "mlhs_node : primary_value tDOT tIDENTIFIER",
    "mlhs_node : primary_value tCOLON2 tIDENTIFIER",
    "mlhs_node : primary_value tDOT tCONSTANT",
    "mlhs_node : primary_value tCOLON2 tCONSTANT",
    "mlhs_node : tCOLON3 tCONSTANT",
    "mlhs_node : backref",
    "lhs : tIDENTIFIER",
    "lhs : tIVAR",
    "lhs : tGVAR",
    "lhs : tCONSTANT",
    "lhs : tCVAR",
    "lhs : kNIL",
    "lhs : kSELF",
    "lhs : kTRUE",
    "lhs : kFALSE",
    "lhs : k__FILE__",
    "lhs : k__LINE__",
    "lhs : k__ENCODING__",
    "lhs : primary_value '[' opt_call_args rbracket",
    "lhs : primary_value tDOT tIDENTIFIER",
    "lhs : primary_value tCOLON2 tIDENTIFIER",
    "lhs : primary_value tDOT tCONSTANT",
    "lhs : primary_value tCOLON2 tCONSTANT",
    "lhs : tCOLON3 tCONSTANT",
    "lhs : backref",
    "cname : tIDENTIFIER",
    "cname : tCONSTANT",
    "cpath : tCOLON3 cname",
    "cpath : cname",
    "cpath : primary_value tCOLON2 cname",
    "fname : tIDENTIFIER",
    "fname : tCONSTANT",
    "fname : tFID",
    "fname : op",
    "fname : reswords",
    "fsym : fname",
    "fsym : symbol",
    "fitem : fsym",
    "fitem : dsym",
    "undef_list : fitem",
    "$$6 :",
    "undef_list : undef_list ',' $$6 fitem",
    "op : tPIPE",
    "op : tCARET",
    "op : tAMPER2",
    "op : tCMP",
    "op : tEQ",
    "op : tEQQ",
    "op : tMATCH",
    "op : tNMATCH",
    "op : tGT",
    "op : tGEQ",
    "op : tLT",
    "op : tLEQ",
    "op : tNEQ",
    "op : tLSHFT",
    "op : tRSHFT",
    "op : tDSTAR",
    "op : tPLUS",
    "op : tMINUS",
    "op : tSTAR2",
    "op : tSTAR",
    "op : tDIVIDE",
    "op : tPERCENT",
    "op : tPOW",
    "op : tBANG",
    "op : tTILDE",
    "op : tUPLUS",
    "op : tUMINUS",
    "op : tAREF",
    "op : tASET",
    "op : tBACK_REF2",
    "reswords : k__LINE__",
    "reswords : k__FILE__",
    "reswords : k__ENCODING__",
    "reswords : klBEGIN",
    "reswords : klEND",
    "reswords : kALIAS",
    "reswords : kAND",
    "reswords : kBEGIN",
    "reswords : kBREAK",
    "reswords : kCASE",
    "reswords : kCLASS",
    "reswords : kDEF",
    "reswords : kDEFINED",
    "reswords : kDO",
    "reswords : kELSE",
    "reswords : kELSIF",
    "reswords : kEND",
    "reswords : kENSURE",
    "reswords : kFALSE",
    "reswords : kFOR",
    "reswords : kIN",
    "reswords : kMODULE",
    "reswords : kNEXT",
    "reswords : kNIL",
    "reswords : kNOT",
    "reswords : kOR",
    "reswords : kREDO",
    "reswords : kRESCUE",
    "reswords : kRETRY",
    "reswords : kRETURN",
    "reswords : kSELF",
    "reswords : kSUPER",
    "reswords : kTHEN",
    "reswords : kTRUE",
    "reswords : kUNDEF",
    "reswords : kWHEN",
    "reswords : kYIELD",
    "reswords : kIF_MOD",
    "reswords : kUNLESS_MOD",
    "reswords : kSIGNAL",
    "reswords : kWHILE_MOD",
    "reswords : kUNTIL_MOD",
    "reswords : kRESCUE_MOD",
    "arg : lhs '=' arg",
    "arg : lhs '=' arg kRESCUE_MOD arg",
    "arg : var_lhs tOP_ASGN arg",
    "arg : var_lhs tOP_ASGN arg kRESCUE_MOD arg",
    "arg : primary_value '[' opt_call_args rbracket tOP_ASGN arg",
    "arg : primary_value tDOT tIDENTIFIER tOP_ASGN arg",
    "arg : primary_value tDOT tCONSTANT tOP_ASGN arg",
    "arg : primary_value tCOLON2 tIDENTIFIER tOP_ASGN arg",
    "arg : primary_value tCOLON2 tCONSTANT tOP_ASGN arg",
    "arg : tCOLON3 tCONSTANT tOP_ASGN arg",
    "arg : backref tOP_ASGN arg",
    "arg : arg tDOT2 arg",
    "arg : arg tDOT3 arg",
    "arg : arg tPLUS arg",
    "arg : arg tMINUS arg",
    "arg : arg tSTAR2 arg",
    "arg : arg tDIVIDE arg",
    "arg : arg tPERCENT arg",
    "arg : arg tPOW arg",
    "arg : tUMINUS_NUM simple_numeric tPOW arg",
    "arg : tUPLUS arg",
    "arg : tUMINUS arg",
    "arg : arg tPIPE arg",
    "arg : arg tCARET arg",
    "arg : arg tAMPER2 arg",
    "arg : arg tCMP arg",
    "arg : arg tGT arg",
    "arg : arg tGEQ arg",
    "arg : arg tLT arg",
    "arg : arg tLEQ arg",
    "arg : arg tEQ arg",
    "arg : arg tEQQ arg",
    "arg : arg tNEQ arg",
    "arg : arg tMATCH arg",
    "arg : arg tNMATCH arg",
    "arg : tBANG arg",
    "arg : tTILDE arg",
    "arg : arg tLSHFT arg",
    "arg : arg tRSHFT arg",
    "arg : arg tANDOP arg",
    "arg : arg tOROP arg",
    "arg : kDEFINED opt_nl arg",
    "arg : arg '?' arg opt_nl ':' arg",
    "arg : primary",
    "arg_value : arg",
    "aref_args : none",
    "aref_args : args trailer",
    "aref_args : args ',' assocs trailer",
    "aref_args : assocs trailer",
    "paren_args : tLPAREN2 opt_call_args rparen",
    "opt_paren_args : none",
    "opt_paren_args : paren_args",
    "opt_call_args : none",
    "opt_call_args : call_args",
    "opt_call_args : args ','",
    "opt_call_args : args ',' assocs ','",
    "opt_call_args : assocs ','",
    "call_args : command",
    "call_args : args opt_block_arg",
    "call_args : assocs opt_block_arg",
    "call_args : args ',' assocs opt_block_arg",
    "call_args : block_arg",
    "$$7 :",
    "command_args : $$7 call_args",
    "block_arg : tAMPER arg_value",
    "opt_block_arg : ',' block_arg",
    "opt_block_arg : none_block_pass",
    "args : arg_value",
    "args : tSTAR arg_value",
    "args : args ',' arg_value",
    "args : args ',' tSTAR arg_value",
    "mrhs_arg : mrhs",
    "mrhs_arg : arg_value",
    "mrhs : args ',' arg_value",
    "mrhs : args ',' tSTAR arg_value",
    "mrhs : tSTAR arg_value",
    "primary : literal",
    "primary : strings",
    "primary : xstring",
    "primary : regexp",
    "primary : words",
    "primary : qwords",
    "primary : symbols",
    "primary : qsymbols",
    "primary : var_ref",
    "primary : backref",
    "primary : tFID",
    "primary : kBEGIN bodystmt kEND",
    "$$8 :",
    "primary : tLPAREN_ARG $$8 rparen",
    "$$9 :",
    "primary : tLPAREN_ARG expr $$9 rparen",
    "primary : tLPAREN compstmt tRPAREN",
    "primary : primary_value tCOLON2 tCONSTANT",
    "primary : tCOLON3 tCONSTANT",
    "primary : tLBRACK aref_args tRBRACK",
    "primary : tLBRACE assoc_list tRCURLY",
    "primary : kRETURN",
    "primary : kYIELD tLPAREN2 call_args rparen",
    "primary : kYIELD tLPAREN2 rparen",
    "primary : kYIELD",
    "primary : kDEFINED opt_nl tLPAREN2 expr rparen",
    "primary : kNOT tLPAREN2 expr rparen",
    "primary : kNOT tLPAREN2 rparen",
    "primary : fcall brace_block",
    "primary : method_call",
    "primary : method_call brace_block",
    "primary : tLAMBDA lambda",
    "primary : kIF expr_value then compstmt if_tail kEND",
    "primary : kUNLESS expr_value then compstmt opt_else kEND",
    "$$10 :",
    "$$11 :",
    "primary : kWHILE $$10 expr_value do $$11 compstmt kEND",
    "$$12 :",
    "$$13 :",
    "primary : kUNTIL $$12 expr_value do $$13 compstmt kEND",
    "primary : kCASE expr_value opt_terms case_body kEND",
    "primary : kCASE opt_terms case_body kEND",
    "$$14 :",
    "$$15 :",
    "primary : kFOR for_var kIN $$14 expr_value do $$15 compstmt kEND",
    "$$16 :",
    "primary : kCLASS cpath superclass $$16 bodystmt kEND",
    "$$17 :",
    "$$18 :",
    "primary : kCLASS tLSHFT expr $$17 term $$18 bodystmt kEND",
    "$$19 :",
    "primary : kMODULE cpath $$19 bodystmt kEND",
    "$$20 :",
    "primary : kDEF fname $$20 f_arglist bodystmt kEND",
    "$$21 :",
    "$$22 :",
    "primary : kDEF singleton dot_or_colon $$21 fname $$22 f_arglist bodystmt kEND",
    "primary : kBREAK",
    "primary : kNEXT",
    "primary : kREDO",
    "primary : kRETRY",
    "primary : signal",
    "signal : kSIGNAL signal_expr",
    "$$23 :",
    "signal_expr : tLBRACE_ARG $$23 compstmt tRCURLY",
    "primary_value : primary",
    "then : term",
    "then : kTHEN",
    "then : term kTHEN",
    "do : term",
    "do : kDO_COND",
    "if_tail : opt_else",
    "if_tail : kELSIF expr_value then compstmt if_tail",
    "opt_else : none",
    "opt_else : kELSE compstmt",
    "for_var : lhs",
    "for_var : mlhs",
    "f_marg : f_norm_arg",
    "f_marg : tLPAREN f_margs rparen",
    "f_marg_list : f_marg",
    "f_marg_list : f_marg_list ',' f_marg",
    "f_margs : f_marg_list",
    "f_margs : f_marg_list ',' tSTAR f_norm_arg",
    "f_margs : f_marg_list ',' tSTAR f_norm_arg ',' f_marg_list",
    "f_margs : f_marg_list ',' tSTAR",
    "f_margs : f_marg_list ',' tSTAR ',' f_marg_list",
    "f_margs : tSTAR f_norm_arg",
    "f_margs : tSTAR f_norm_arg ',' f_marg_list",
    "f_margs : tSTAR",
    "f_margs : tSTAR ',' f_marg_list",
    "block_args_tail : f_block_kwarg ',' f_kwrest opt_f_block_arg",
    "block_args_tail : f_block_kwarg opt_f_block_arg",
    "block_args_tail : f_kwrest opt_f_block_arg",
    "block_args_tail : f_block_arg",
    "opt_block_args_tail : ',' block_args_tail",
    "opt_block_args_tail :",
    "block_param : f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail",
    "block_param : f_arg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_arg ','",
    "block_param : f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_arg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_block_optarg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_arg opt_block_args_tail",
    "block_param : f_rest_arg opt_block_args_tail",
    "block_param : f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : block_args_tail",
    "opt_block_param : none",
    "opt_block_param : block_param_def",
    "block_param_def : tPIPE opt_bv_decl tPIPE",
    "block_param_def : tOROP",
    "block_param_def : tPIPE block_param opt_bv_decl tPIPE",
    "opt_bv_decl : opt_nl",
    "opt_bv_decl : opt_nl ';' bv_decls opt_nl",
    "bv_decls : bvar",
    "bv_decls : bv_decls ',' bvar",
    "bvar : tIDENTIFIER",
    "bvar : f_bad_arg",
    "$$24 :",
    "lambda : $$24 f_larglist lambda_body",
    "f_larglist : tLPAREN2 f_args opt_bv_decl tRPAREN",
    "f_larglist : f_args",
    "lambda_body : tLAMBEG compstmt tRCURLY",
    "lambda_body : kDO_LAMBDA compstmt kEND",
    "$$25 :",
    "do_block : kDO_BLOCK $$25 opt_block_param compstmt kEND",
    "block_call : command do_block",
    "block_call : block_call dot_or_colon operation2 opt_paren_args",
    "block_call : block_call dot_or_colon operation2 opt_paren_args brace_block",
    "block_call : block_call dot_or_colon operation2 command_args do_block",
    "method_call : fcall paren_args",
    "method_call : primary_value tDOT operation2 opt_paren_args",
    "method_call : primary_value tCOLON2 operation2 paren_args",
    "method_call : primary_value tCOLON2 operation3",
    "method_call : primary_value tDOT paren_args",
    "method_call : primary_value tCOLON2 paren_args",
    "method_call : kSUPER paren_args",
    "method_call : kSUPER",
    "method_call : primary_value '[' opt_call_args rbracket",
    "$$26 :",
    "brace_block : tLCURLY $$26 opt_block_param compstmt tRCURLY",
    "$$27 :",
    "brace_block : kDO $$27 opt_block_param compstmt kEND",
    "case_body : kWHEN args then compstmt cases",
    "cases : opt_else",
    "cases : case_body",
    "opt_rescue : kRESCUE exc_list exc_var then compstmt opt_rescue",
    "opt_rescue :",
    "exc_list : arg_value",
    "exc_list : mrhs",
    "exc_list : none",
    "exc_var : tASSOC lhs",
    "exc_var : none",
    "opt_ensure : kENSURE compstmt",
    "opt_ensure : none",
    "literal : numeric",
    "literal : symbol",
    "literal : dsym",
    "strings : string",
    "string : tCHAR",
    "string : string1",
    "string : string string1",
    "string1 : tSTRING_BEG string_contents tSTRING_END",
    "xstring : tXSTRING_BEG xstring_contents tSTRING_END",
    "regexp : tREGEXP_BEG regexp_contents tREGEXP_END",
    "words : tWORDS_BEG ' ' tSTRING_END",
    "words : tWORDS_BEG word_list tSTRING_END",
    "word_list :",
    "word_list : word_list word ' '",
    "word : string_content",
    "word : word string_content",
    "symbols : tSYMBOLS_BEG ' ' tSTRING_END",
    "symbols : tSYMBOLS_BEG symbol_list tSTRING_END",
    "symbol_list :",
    "symbol_list : symbol_list word ' '",
    "qwords : tQWORDS_BEG ' ' tSTRING_END",
    "qwords : tQWORDS_BEG qword_list tSTRING_END",
    "qsymbols : tQSYMBOLS_BEG ' ' tSTRING_END",
    "qsymbols : tQSYMBOLS_BEG qsym_list tSTRING_END",
    "qword_list :",
    "qword_list : qword_list tSTRING_CONTENT ' '",
    "qsym_list :",
    "qsym_list : qsym_list tSTRING_CONTENT ' '",
    "string_contents :",
    "string_contents : string_contents string_content",
    "xstring_contents :",
    "xstring_contents : xstring_contents string_content",
    "regexp_contents :",
    "regexp_contents : regexp_contents string_content",
    "string_content : tSTRING_CONTENT",
    "$$28 :",
    "string_content : tSTRING_DVAR $$28 string_dvar",
    "$$29 :",
    "$$30 :",
    "string_content : tSTRING_DBEG $$29 $$30 compstmt tRCURLY",
    "string_dvar : tGVAR",
    "string_dvar : tIVAR",
    "string_dvar : tCVAR",
    "string_dvar : backref",
    "symbol : tSYMBEG sym",
    "sym : fname",
    "sym : tIVAR",
    "sym : tGVAR",
    "sym : tCVAR",
    "dsym : tSYMBEG xstring_contents tSTRING_END",
    "numeric : simple_numeric",
    "numeric : tUMINUS_NUM simple_numeric",
    "simple_numeric : tINTEGER",
    "simple_numeric : tFLOAT",
    "simple_numeric : tRATIONAL",
    "simple_numeric : tIMAGINARY",
    "var_ref : tIDENTIFIER",
    "var_ref : tIVAR",
    "var_ref : tGVAR",
    "var_ref : tCONSTANT",
    "var_ref : tCVAR",
    "var_ref : kNIL",
    "var_ref : kSELF",
    "var_ref : kTRUE",
    "var_ref : kFALSE",
    "var_ref : k__FILE__",
    "var_ref : k__LINE__",
    "var_ref : k__ENCODING__",
    "var_lhs : tIDENTIFIER",
    "var_lhs : tIVAR",
    "var_lhs : tGVAR",
    "var_lhs : tCONSTANT",
    "var_lhs : tCVAR",
    "var_lhs : kNIL",
    "var_lhs : kSELF",
    "var_lhs : kTRUE",
    "var_lhs : kFALSE",
    "var_lhs : k__FILE__",
    "var_lhs : k__LINE__",
    "var_lhs : k__ENCODING__",
    "backref : tNTH_REF",
    "backref : tBACK_REF",
    "superclass : term",
    "$$31 :",
    "superclass : tLT $$31 expr_value term",
    "superclass : error term",
    "f_arglist : tLPAREN2 f_args rparen",
    "$$32 :",
    "f_arglist : $$32 f_args term",
    "args_tail : f_kwarg ',' f_kwrest opt_f_block_arg",
    "args_tail : f_kwarg opt_f_block_arg",
    "args_tail : f_kwrest opt_f_block_arg",
    "args_tail : f_block_arg",
    "opt_args_tail : ',' args_tail",
    "opt_args_tail :",
    "f_args : f_arg ',' f_optarg ',' f_rest_arg opt_args_tail",
    "f_args : f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_arg ',' f_optarg opt_args_tail",
    "f_args : f_arg ',' f_optarg ',' f_arg opt_args_tail",
    "f_args : f_arg ',' f_rest_arg opt_args_tail",
    "f_args : f_arg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_arg opt_args_tail",
    "f_args : f_optarg ',' f_rest_arg opt_args_tail",
    "f_args : f_optarg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_optarg opt_args_tail",
    "f_args : f_optarg ',' f_arg opt_args_tail",
    "f_args : f_rest_arg opt_args_tail",
    "f_args : f_rest_arg ',' f_arg opt_args_tail",
    "f_args : args_tail",
    "f_args :",
    "f_bad_arg : tCONSTANT",
    "f_bad_arg : tIVAR",
    "f_bad_arg : tGVAR",
    "f_bad_arg : tCVAR",
    "f_norm_arg : f_bad_arg",
    "f_norm_arg : tIDENTIFIER",
    "f_arg_item : f_norm_arg",
    "f_arg_item : tLPAREN f_margs rparen",
    "f_arg : f_arg_item",
    "f_arg : f_arg ',' f_arg_item",
    "f_label : tLABEL",
    "f_kw : f_label arg_value",
    "f_kw : f_label",
    "f_block_kw : f_label primary_value",
    "f_block_kw : f_label",
    "f_block_kwarg : f_block_kw",
    "f_block_kwarg : f_block_kwarg ',' f_block_kw",
    "f_kwarg : f_kw",
    "f_kwarg : f_kwarg ',' f_kw",
    "kwrest_mark : tPOW",
    "kwrest_mark : tDSTAR",
    "f_kwrest : kwrest_mark tIDENTIFIER",
    "f_kwrest : kwrest_mark",
    "f_opt : f_norm_arg '=' arg_value",
    "f_block_opt : tIDENTIFIER '=' primary_value",
    "f_block_optarg : f_block_opt",
    "f_block_optarg : f_block_optarg ',' f_block_opt",
    "f_optarg : f_opt",
    "f_optarg : f_optarg ',' f_opt",
    "restarg_mark : tSTAR2",
    "restarg_mark : tSTAR",
    "f_rest_arg : restarg_mark tIDENTIFIER",
    "f_rest_arg : restarg_mark",
    "blkarg_mark : tAMPER2",
    "blkarg_mark : tAMPER",
    "f_block_arg : blkarg_mark tIDENTIFIER",
    "opt_f_block_arg : ',' f_block_arg",
    "opt_f_block_arg :",
    "singleton : var_ref",
    "$$33 :",
    "singleton : tLPAREN2 $$33 expr rparen",
    "assoc_list : none",
    "assoc_list : assocs trailer",
    "assocs : assoc",
    "assocs : assocs ',' assoc",
    "assoc : arg_value tASSOC arg_value",
    "assoc : tLABEL arg_value",
    "assoc : tSTRING_BEG string_contents tLABEL_END arg_value",
    "assoc : tDSTAR arg_value",
    "operation : tIDENTIFIER",
    "operation : tCONSTANT",
    "operation : tFID",
    "operation2 : tIDENTIFIER",
    "operation2 : tCONSTANT",
    "operation2 : tFID",
    "operation2 : op",
    "operation3 : tIDENTIFIER",
    "operation3 : tFID",
    "operation3 : op",
    "dot_or_colon : tDOT",
    "dot_or_colon : tCOLON2",
    "opt_terms :",
    "opt_terms : terms",
    "opt_nl :",
    "opt_nl : '\\n'",
    "rparen : opt_nl tRPAREN",
    "rbracket : opt_nl tRBRACK",
    "trailer :",
    "trailer : '\\n'",
    "trailer : ','",
    "term : ';'",
    "term : '\\n'",
    "terms : term",
    "terms : terms ';'",
    "none :",
    "none_block_pass :",
    };

  protected org.jruby.parser.YYDebug yydebug;

  /** index-checked interface to {@link #yyNames}.
      @param token single character or <tt>%token</tt> value.
      @return token name or <tt>[illegal]</tt> or <tt>[unknown]</tt>.
    */
  public static String yyName (int token) {
    if (token < 0 || token > yyNames.length) return "[illegal]";
    String name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }


  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected String[] yyExpecting (int state) {
    int token, n, len = 0;
    boolean[] ok = new boolean[yyNames.length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    String result[] = new String[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @param yydebug debug message writer implementing <tt>yyDebug</tt>, or <tt>null</tt>.
      @return result of the last reduction, if any.
    */
  public Object yyparse (RubyLexer yyLex, Object ayydebug)
				throws java.io.IOException {
    this.yydebug = (org.jruby.parser.YYDebug) ayydebug;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of {@link #yyparse}.
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as <tt>$$ = yyDefault($1)</tt>, prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for <tt>$1</tt>, or <tt>null</tt>.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @return result of the last reduction, if any.
    */
  public Object yyparse (RubyLexer yyLex) throws java.io.IOException {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0, yyStates[] = new int[yyMax];	// state stack
    Object yyVal = null, yyVals[] = new Object[yyMax];	// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tokens to shift

    yyLoop: for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.length) {			// dynamically increase
        int[] i = new int[yyStates.length+yyMax];
        System.arraycopy(yyStates, 0, i, 0, yyStates.length);
        yyStates = i;
        Object[] o = new Object[yyVals.length+yyMax];
        System.arraycopy(yyVals, 0, o, 0, yyVals.length);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (yydebug != null) yydebug.push(yyState, yyVal);

      yyDiscarded: for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
//            yyToken = yyLex.advance() ? yyLex.token() : 0;
            yyToken = yyLex.nextToken();
            if (yydebug != null)
              yydebug.lex(yyState, yyToken, yyName(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken) {
            if (yydebug != null)
              yydebug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            continue yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              support.yyerror("syntax error", yyExpecting(yyState), yyNames[yyToken]);
              if (yydebug != null) yydebug.error("syntax error");
  
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += yyErrorCode) >= 0 && yyN < yyTable.length
                    && yyCheck[yyN] == yyErrorCode) {
                  if (yydebug != null)
                    yydebug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  continue yyLoop;
                }
                if (yydebug != null) yydebug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (yydebug != null) yydebug.reject();
              support.yyerror("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (yydebug != null) yydebug.reject();
                support.yyerror("irrecoverable syntax error at end-of-file");
              }
              if (yydebug != null)
                yydebug.discard(yyState, yyToken, yyName(yyToken),
  							yyLex.value());
              yyToken = -1;
              continue yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (yydebug != null)
          yydebug.reduce(yyState, yyStates[yyV-1], yyN, yyRule[yyN], yyLen[yyN]);
        switch (yyN) {
// ACTIONS_BEGIN
case 1:
					// line 310 "RubyParser.y"
  {
                  lexer.setState(LexState.EXPR_BEG);
                  support.initTopLocalVariables();
              }
  break;
case 2:
					// line 313 "RubyParser.y"
  {
  /* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
                  if (((Node)yyVals[0+yyTop]) != null) {
                      /* last expression should not be void */
                      if (((Node)yyVals[0+yyTop]) instanceof BlockNode) {
                          support.checkUselessStatement(((BlockNode)yyVals[0+yyTop]).getLast());
                      } else {
                          support.checkUselessStatement(((Node)yyVals[0+yyTop]));
                      }
                  }
                  support.getResult().setAST(support.addRootNode(((Node)yyVals[0+yyTop])));
              }
  break;
case 3:
					// line 326 "RubyParser.y"
  {
                  if (((Node)yyVals[-1+yyTop]) instanceof BlockNode) {
                      support.checkUselessStatements(((BlockNode)yyVals[-1+yyTop]));
                  }
                  yyVal = ((Node)yyVals[-1+yyTop]);
              }
  break;
case 5:
					// line 334 "RubyParser.y"
  {
                    yyVal = support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop])));
              }
  break;
case 6:
					// line 337 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-2+yyTop]), support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop]))));
              }
  break;
case 7:
					// line 340 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
              }
  break;
case 9:
					// line 345 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("BEGIN in method");
                    }
              }
  break;
case 10:
					// line 349 "RubyParser.y"
  {
                    support.getResult().addBeginNode(new PreExe19Node(((ISourcePosition)yyVals[-4+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop])));
                    yyVal = null;
              }
  break;
case 11:
					// line 354 "RubyParser.y"
  {
                  Node node = ((Node)yyVals[-3+yyTop]);

                  if (((RescueBodyNode)yyVals[-2+yyTop]) != null) {
                      node = new RescueNode(support.getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), ((RescueBodyNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
                  } else if (((Node)yyVals[-1+yyTop]) != null) {
                      support.warn(ID.ELSE_WITHOUT_RESCUE, support.getPosition(((Node)yyVals[-3+yyTop])), "else without rescue is useless");
                      node = support.appendToBlock(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                  }
                  if (((Node)yyVals[0+yyTop]) != null) {
                      if (node == null) node = NilImplicitNode.NIL;
                      node = new EnsureNode(support.getPosition(((Node)yyVals[-3+yyTop])), node, ((Node)yyVals[0+yyTop]));
                  }

                  support.fixpos(node, ((Node)yyVals[-3+yyTop]));
                  yyVal = node;
                }
  break;
case 12:
					// line 372 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) instanceof BlockNode) {
                        support.checkUselessStatements(((BlockNode)yyVals[-1+yyTop]));
                    }
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 14:
					// line 380 "RubyParser.y"
  {
                    yyVal = support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop])));
                }
  break;
case 15:
					// line 383 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-2+yyTop]), support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop]))));
                }
  break;
case 16:
					// line 386 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 17:
					// line 390 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 18:
					// line 394 "RubyParser.y"
  {
                   support.yyerror("BEGIN is permitted only at toplevel");
                }
  break;
case 19:
					// line 396 "RubyParser.y"
  {
                    yyVal = new BeginNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-3+yyTop]));
                }
  break;
case 20:
					// line 400 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 21:
					// line 402 "RubyParser.y"
  {
                    yyVal = support.newAlias(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 22:
					// line 405 "RubyParser.y"
  {
                    yyVal = new VAliasNode(((ISourcePosition)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 23:
					// line 408 "RubyParser.y"
  {
                    yyVal = new VAliasNode(((ISourcePosition)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]), "$" + ((BackRefNode)yyVals[0+yyTop]).getType());
                }
  break;
case 24:
					// line 411 "RubyParser.y"
  {
                    support.yyerror("can't make alias for the number variables");
                }
  break;
case 25:
					// line 414 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 26:
					// line 417 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), null);
                    support.fixpos(((Node)yyVal), ((Node)yyVals[0+yyTop]));
                }
  break;
case 27:
					// line 421 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), null, ((Node)yyVals[-2+yyTop]));
                    support.fixpos(((Node)yyVal), ((Node)yyVals[0+yyTop]));
                }
  break;
case 28:
					// line 425 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) != null && ((Node)yyVals[-2+yyTop]) instanceof BeginNode) {
                        yyVal = new WhileNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((BeginNode)yyVals[-2+yyTop]).getBodyNode(), false);
                    } else {
                        yyVal = new WhileNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), true);
                    }
                }
  break;
case 29:
					// line 432 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) != null && ((Node)yyVals[-2+yyTop]) instanceof BeginNode) {
                        yyVal = new UntilNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((BeginNode)yyVals[-2+yyTop]).getBodyNode(), false);
                    } else {
                        yyVal = new UntilNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), true);
                    }
                }
  break;
case 30:
					// line 439 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    yyVal = new RescueNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), new RescueBodyNode(support.getPosition(((Node)yyVals[-2+yyTop])), null, body, null), null);
                }
  break;
case 31:
					// line 443 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.warn(ID.END_IN_METHOD, ((ISourcePosition)yyVals[-3+yyTop]), "END in method; use at_exit");
                    }
                    yyVal = new PostExeNode(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 33:
					// line 450 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    ((MultipleAsgn19Node)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                    yyVal = ((MultipleAsgn19Node)yyVals[-2+yyTop]);
                }
  break;
case 34:
					// line 455 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    ISourcePosition pos = ((AssignableNode)yyVals[-2+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-1+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-2+yyTop])), asgnOp, ((Node)yyVals[0+yyTop])));
                        ((AssignableNode)yyVals[-2+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-2+yyTop]);
                    }
                }
  break;
case 35:
					// line 472 "RubyParser.y"
  {
  /* FIXME: arg_concat logic missing for opt_call_args*/
                    yyVal = support.new_opElementAsgnNode(((Node)yyVals[-5+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 36:
					// line 476 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 37:
					// line 479 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 38:
					// line 482 "RubyParser.y"
  {
                    support.yyerror("can't make alias for the number variables");
                    yyVal = null;
                }
  break;
case 39:
					// line 487 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 40:
					// line 490 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[-2+yyTop]));
                }
  break;
case 41:
					// line 493 "RubyParser.y"
  {
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 42:
					// line 496 "RubyParser.y"
  {
                    ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                    yyVal = ((MultipleAsgn19Node)yyVals[-2+yyTop]);
                    ((MultipleAsgn19Node)yyVals[-2+yyTop]).setPosition(support.getPosition(((MultipleAsgn19Node)yyVals[-2+yyTop])));
                }
  break;
case 44:
					// line 508 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 45:
					// line 512 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 47:
					// line 519 "RubyParser.y"
  {
                    yyVal = support.newAndNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 48:
					// line 522 "RubyParser.y"
  {
                    yyVal = support.newOrNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 49:
					// line 525 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 50:
					// line 528 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 52:
					// line 533 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                }
  break;
case 56:
					// line 543 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 57:
					// line 548 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 58:
					// line 550 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 59:
					// line 555 "RubyParser.y"
  {
                    yyVal = support.new_fcall(((String)yyVals[0+yyTop]));
                }
  break;
case 60:
					// line 560 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);
                }
  break;
case 61:
					// line 564 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                    yyVal = ((FCallNode)yyVals[-2+yyTop]);
                }
  break;
case 62:
					// line 568 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 63:
					// line 571 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop])); 
                }
  break;
case 64:
					// line 574 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 65:
					// line 577 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 66:
					// line 580 "RubyParser.y"
  {
                    yyVal = support.new_super(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 67:
					// line 583 "RubyParser.y"
  {
                    yyVal = support.new_yield(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 68:
					// line 586 "RubyParser.y"
  {
                    yyVal = new ReturnNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 69:
					// line 589 "RubyParser.y"
  {
                    yyVal = new BreakNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 70:
					// line 592 "RubyParser.y"
  {
                    yyVal = new NextNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 72:
					// line 598 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 73:
					// line 603 "RubyParser.y"
  {
                    yyVal = ((MultipleAsgn19Node)yyVals[0+yyTop]);
                }
  break;
case 74:
					// line 606 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ISourcePosition)yyVals[-2+yyTop]), support.newArrayNode(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop])), null, null);
                }
  break;
case 75:
					// line 611 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[0+yyTop]).getPosition(), ((ListNode)yyVals[0+yyTop]), null, null);
                }
  break;
case 76:
					// line 614 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]).add(((Node)yyVals[0+yyTop])), null, null);
                }
  break;
case 77:
					// line 617 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-2+yyTop]).getPosition(), ((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), (ListNode) null);
                }
  break;
case 78:
					// line 620 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-4+yyTop]), ((Node)yyVals[-2+yyTop]), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 79:
					// line 623 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), new StarNode(lexer.getPosition()), null);
                }
  break;
case 80:
					// line 626 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 81:
					// line 629 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((Node)yyVals[0+yyTop]).getPosition(), null, ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 82:
					// line 632 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((Node)yyVals[-2+yyTop]).getPosition(), null, ((Node)yyVals[-2+yyTop]), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 83:
					// line 635 "RubyParser.y"
  {
                      yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), null);
                }
  break;
case 84:
					// line 638 "RubyParser.y"
  {
                      yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 86:
					// line 643 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 87:
					// line 648 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 88:
					// line 651 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
                }
  break;
case 89:
					// line 656 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 90:
					// line 659 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 91:
					// line 663 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 92:
					// line 666 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 93:
					// line 669 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 94:
					// line 672 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 95:
					// line 677 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 96:
					// line 680 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 97:
					// line 684 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 98:
					// line 688 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 99:
					// line 692 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 100:
					// line 696 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 101:
					// line 700 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 102:
					// line 704 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 103:
					// line 708 "RubyParser.y"
  {
                    yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 104:
					// line 711 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 105:
					// line 714 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 106:
					// line 717 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 107:
					// line 720 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = support.getPosition(((Node)yyVals[-2+yyTop]));

                    yyVal = new ConstDeclNode(position, null, support.new_colon2(position, ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 108:
					// line 729 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = lexer.getPosition();

                    yyVal = new ConstDeclNode(position, null, support.new_colon3(position, ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 109:
					// line 738 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
                }
  break;
case 110:
					// line 742 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 111:
					// line 745 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 112:
					// line 748 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 113:
					// line 751 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 114:
					// line 756 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 115:
					// line 759 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 116:
					// line 763 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 117:
					// line 767 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 118:
					// line 771 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 119:
					// line 775 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 120:
					// line 779 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 121:
					// line 783 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 122:
					// line 787 "RubyParser.y"
  {
                    yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 123:
					// line 790 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 124:
					// line 793 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 125:
					// line 796 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 126:
					// line 799 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = support.getPosition(((Node)yyVals[-2+yyTop]));

                    yyVal = new ConstDeclNode(position, null, support.new_colon2(position, ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 127:
					// line 808 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = lexer.getPosition();

                    yyVal = new ConstDeclNode(position, null, support.new_colon3(position, ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 128:
					// line 817 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
                }
  break;
case 129:
					// line 821 "RubyParser.y"
  {
                    support.yyerror("class/module name must be CONSTANT");
                }
  break;
case 131:
					// line 826 "RubyParser.y"
  {
                    yyVal = support.new_colon3(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 132:
					// line 829 "RubyParser.y"
  {
                    yyVal = support.new_colon2(lexer.getPosition(), null, ((String)yyVals[0+yyTop]));
                }
  break;
case 133:
					// line 832 "RubyParser.y"
  {
                    yyVal = support.new_colon2(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 137:
					// line 838 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_ENDFN);
                   yyVal = ((String)yyVals[0+yyTop]);
               }
  break;
case 138:
					// line 842 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_ENDFN);
                   yyVal = ((String)yyVals[0+yyTop]);
               }
  break;
case 139:
					// line 848 "RubyParser.y"
  {
                    yyVal = new LiteralNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 140:
					// line 851 "RubyParser.y"
  {
                    yyVal = new LiteralNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 141:
					// line 856 "RubyParser.y"
  {
                    yyVal = ((LiteralNode)yyVals[0+yyTop]);
                }
  break;
case 142:
					// line 859 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 143:
					// line 863 "RubyParser.y"
  {
                    yyVal = support.newUndef(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 144:
					// line 866 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 145:
					// line 868 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-3+yyTop]), support.newUndef(((Node)yyVals[-3+yyTop]).getPosition(), ((Node)yyVals[0+yyTop])));
                }
  break;
case 176:
					// line 880 "RubyParser.y"
  {
                    yyVal = "__LINE__";
                }
  break;
case 177:
					// line 883 "RubyParser.y"
  {
                    yyVal = "__FILE__";
                }
  break;
case 178:
					// line 886 "RubyParser.y"
  {
                    yyVal = "__ENCODING__";
                }
  break;
case 179:
					// line 889 "RubyParser.y"
  {
                    yyVal = "BEGIN";
                }
  break;
case 180:
					// line 892 "RubyParser.y"
  {
                    yyVal = "END";
                }
  break;
case 181:
					// line 895 "RubyParser.y"
  {
                    yyVal = "alias";
                }
  break;
case 182:
					// line 898 "RubyParser.y"
  {
                    yyVal = "and";
                }
  break;
case 183:
					// line 901 "RubyParser.y"
  {
                    yyVal = "begin";
                }
  break;
case 184:
					// line 904 "RubyParser.y"
  {
                    yyVal = "break";
                }
  break;
case 185:
					// line 907 "RubyParser.y"
  {
                    yyVal = "case";
                }
  break;
case 186:
					// line 910 "RubyParser.y"
  {
                    yyVal = "class";
                }
  break;
case 187:
					// line 913 "RubyParser.y"
  {
                    yyVal = "def";
                }
  break;
case 188:
					// line 916 "RubyParser.y"
  {
                    yyVal = "defined?";
                }
  break;
case 189:
					// line 919 "RubyParser.y"
  {
                    yyVal = "do";
                }
  break;
case 190:
					// line 922 "RubyParser.y"
  {
                    yyVal = "else";
                }
  break;
case 191:
					// line 925 "RubyParser.y"
  {
                    yyVal = "elsif";
                }
  break;
case 192:
					// line 928 "RubyParser.y"
  {
                    yyVal = "end";
                }
  break;
case 193:
					// line 931 "RubyParser.y"
  {
                    yyVal = "ensure";
                }
  break;
case 194:
					// line 934 "RubyParser.y"
  {
                    yyVal = "false";
                }
  break;
case 195:
					// line 937 "RubyParser.y"
  {
                    yyVal = "for";
                }
  break;
case 196:
					// line 940 "RubyParser.y"
  {
                    yyVal = "in";
                }
  break;
case 197:
					// line 943 "RubyParser.y"
  {
                    yyVal = "module";
                }
  break;
case 198:
					// line 946 "RubyParser.y"
  {
                    yyVal = "next";
                }
  break;
case 199:
					// line 949 "RubyParser.y"
  {
                    yyVal = "nil";
                }
  break;
case 200:
					// line 952 "RubyParser.y"
  {
                    yyVal = "not";
                }
  break;
case 201:
					// line 955 "RubyParser.y"
  {
                    yyVal = "or";
                }
  break;
case 202:
					// line 958 "RubyParser.y"
  {
                    yyVal = "redo";
                }
  break;
case 203:
					// line 961 "RubyParser.y"
  {
                    yyVal = "rescue";
                }
  break;
case 204:
					// line 964 "RubyParser.y"
  {
                    yyVal = "retry";
                }
  break;
case 205:
					// line 967 "RubyParser.y"
  {
                    yyVal = "return";
                }
  break;
case 206:
					// line 970 "RubyParser.y"
  {
                    yyVal = "self";
                }
  break;
case 207:
					// line 973 "RubyParser.y"
  {
                    yyVal = "super";
                }
  break;
case 208:
					// line 976 "RubyParser.y"
  {
                    yyVal = "then";
                }
  break;
case 209:
					// line 979 "RubyParser.y"
  {
                    yyVal = "true";
                }
  break;
case 210:
					// line 982 "RubyParser.y"
  {
                    yyVal = "undef";
                }
  break;
case 211:
					// line 985 "RubyParser.y"
  {
                    yyVal = "when";
                }
  break;
case 212:
					// line 988 "RubyParser.y"
  {
                    yyVal = "yield";
                }
  break;
case 213:
					// line 991 "RubyParser.y"
  {
                    yyVal = "if";
                }
  break;
case 214:
					// line 994 "RubyParser.y"
  {
                    yyVal = "unless";
                }
  break;
case 215:
					// line 997 "RubyParser.y"
  {
                    yyVal = "signal";
                }
  break;
case 216:
					// line 1000 "RubyParser.y"
  {
                    yyVal = "while";
                }
  break;
case 217:
					// line 1003 "RubyParser.y"
  {
                    yyVal = "until";
                }
  break;
case 218:
					// line 1006 "RubyParser.y"
  {
                    yyVal = "rescue";
                }
  break;
case 219:
					// line 1010 "RubyParser.y"
  {
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    /* FIXME: Consider fixing node_assign itself rather than single case*/
                    ((Node)yyVal).setPosition(support.getPosition(((Node)yyVals[-2+yyTop])));
                }
  break;
case 220:
					// line 1015 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-4+yyTop]));
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    yyVal = support.node_assign(((Node)yyVals[-4+yyTop]), new RescueNode(position, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(position, null, body, null), null));
                }
  break;
case 221:
					// line 1020 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    ISourcePosition pos = ((AssignableNode)yyVals[-2+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-1+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-2+yyTop])), asgnOp, ((Node)yyVals[0+yyTop])));
                        ((AssignableNode)yyVals[-2+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-2+yyTop]);
                    }
                }
  break;
case 222:
					// line 1037 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    ISourcePosition pos = support.getPosition(((Node)yyVals[0+yyTop]));
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    Node rescue = new RescueNode(pos, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(support.getPosition(((Node)yyVals[-2+yyTop])), null, body, null), null);

                    pos = ((AssignableNode)yyVals[-4+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-3+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(rescue);
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-4+yyTop])), ((AssignableNode)yyVals[-4+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(rescue);
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-4+yyTop])), ((AssignableNode)yyVals[-4+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-4+yyTop])), asgnOp, rescue));
                        ((AssignableNode)yyVals[-4+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-4+yyTop]);
                    }
                }
  break;
case 223:
					// line 1057 "RubyParser.y"
  {
  /* FIXME: arg_concat missing for opt_call_args*/
                    yyVal = support.new_opElementAsgnNode(((Node)yyVals[-5+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 224:
					// line 1061 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 225:
					// line 1064 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 226:
					// line 1067 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 227:
					// line 1070 "RubyParser.y"
  {
                    support.yyerror("constant re-assignment");
                }
  break;
case 228:
					// line 1073 "RubyParser.y"
  {
                    support.yyerror("constant re-assignment");
                }
  break;
case 229:
					// line 1076 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[-2+yyTop]));
                }
  break;
case 230:
					// line 1079 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    support.checkExpression(((Node)yyVals[0+yyTop]));
    
                    boolean isLiteral = ((Node)yyVals[-2+yyTop]) instanceof FixnumNode && ((Node)yyVals[0+yyTop]) instanceof FixnumNode;
                    yyVal = new DotNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), false, isLiteral);
                }
  break;
case 231:
					// line 1086 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    boolean isLiteral = ((Node)yyVals[-2+yyTop]) instanceof FixnumNode && ((Node)yyVals[0+yyTop]) instanceof FixnumNode;
                    yyVal = new DotNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), true, isLiteral);
                }
  break;
case 232:
					// line 1093 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "+", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 233:
					// line 1096 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "-", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 234:
					// line 1099 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "*", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 235:
					// line 1102 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "/", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 236:
					// line 1105 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "%", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 237:
					// line 1108 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 238:
					// line 1111 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getOperatorCallNode(((NumericNode)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]), lexer.getPosition()), "-@");
                }
  break;
case 239:
					// line 1114 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "+@");
                }
  break;
case 240:
					// line 1117 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "-@");
                }
  break;
case 241:
					// line 1120 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "|", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 242:
					// line 1123 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "^", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 243:
					// line 1126 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "&", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 244:
					// line 1129 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=>", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 245:
					// line 1132 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 246:
					// line 1135 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 247:
					// line 1138 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 248:
					// line 1141 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 249:
					// line 1144 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "==", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 250:
					// line 1147 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "===", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 251:
					// line 1150 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "!=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 252:
					// line 1153 "RubyParser.y"
  {
                    yyVal = support.getMatchNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                  /* ENEBO
                        $$ = match_op($1, $3);
                        if (nd_type($1) == NODE_LIT && TYPE($1->nd_lit) == T_REGEXP) {
                            $$ = reg_named_capture_assign($1->nd_lit, $$);
                        }
                  */
                }
  break;
case 253:
					// line 1162 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "!~", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 254:
					// line 1165 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 255:
					// line 1168 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "~");
                }
  break;
case 256:
					// line 1171 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<<", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 257:
					// line 1174 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">>", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 258:
					// line 1177 "RubyParser.y"
  {
                    yyVal = support.newAndNode(((Node)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 259:
					// line 1180 "RubyParser.y"
  {
                    yyVal = support.newOrNode(((Node)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 260:
					// line 1183 "RubyParser.y"
  {
                    yyVal = support.new_defined(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 261:
					// line 1186 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-5+yyTop])), support.getConditionNode(((Node)yyVals[-5+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 262:
					// line 1189 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 263:
					// line 1193 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = ((Node)yyVals[0+yyTop]) != null ? ((Node)yyVals[0+yyTop]) : NilImplicitNode.NIL;
                }
  break;
case 265:
					// line 1199 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 266:
					// line 1202 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 267:
					// line 1205 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 268:
					// line 1209 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    if (yyVal != null) ((Node)yyVal).setPosition(((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 273:
					// line 1218 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 274:
					// line 1221 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 275:
					// line 1224 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 276:
					// line 1230 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 277:
					// line 1233 "RubyParser.y"
  {
                    yyVal = support.arg_blk_pass(((Node)yyVals[-1+yyTop]), ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 278:
					// line 1236 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                    yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 279:
					// line 1240 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                    yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 280:
					// line 1244 "RubyParser.y"
  {
                }
  break;
case 281:
					// line 1247 "RubyParser.y"
  {
                    yyVal = Long.valueOf(lexer.getCmdArgumentState().begin());
                }
  break;
case 282:
					// line 1249 "RubyParser.y"
  {
                    lexer.getCmdArgumentState().reset(((Long)yyVals[-1+yyTop]).longValue());
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 283:
					// line 1254 "RubyParser.y"
  {
                    yyVal = new BlockPassNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 284:
					// line 1258 "RubyParser.y"
  {
                    yyVal = ((BlockPassNode)yyVals[0+yyTop]);
                }
  break;
case 286:
					// line 1264 "RubyParser.y"
  { /* ArrayNode*/
                    ISourcePosition pos = ((Node)yyVals[0+yyTop]) == null ? lexer.getPosition() : ((Node)yyVals[0+yyTop]).getPosition();
                    yyVal = support.newArrayNode(pos, ((Node)yyVals[0+yyTop]));
                }
  break;
case 287:
					// line 1268 "RubyParser.y"
  { /* SplatNode*/
                    yyVal = support.newSplatNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 288:
					// line 1271 "RubyParser.y"
  { /* ArgsCatNode, SplatNode, ArrayNode*/
                    Node node = support.splat_array(((Node)yyVals[-2+yyTop]));

                    if (node != null) {
                        yyVal = support.list_append(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_append(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 289:
					// line 1280 "RubyParser.y"
  { /* ArgsCatNode, SplatNode, ArrayNode*/
                    Node node = null;

                    /* FIXME: lose syntactical elements here (and others like this)*/
                    if (((Node)yyVals[0+yyTop]) instanceof ArrayNode &&
                        (node = support.splat_array(((Node)yyVals[-3+yyTop]))) != null) {
                        yyVal = support.list_concat(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_concat(support.getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 290:
					// line 1292 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 291:
					// line 1295 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 292:
					// line 1300 "RubyParser.y"
  {
                    Node node = support.splat_array(((Node)yyVals[-2+yyTop]));

                    if (node != null) {
                        yyVal = support.list_append(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_append(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 293:
					// line 1309 "RubyParser.y"
  {
                    Node node = null;

                    if (((Node)yyVals[0+yyTop]) instanceof ArrayNode &&
                        (node = support.splat_array(((Node)yyVals[-3+yyTop]))) != null) {
                        yyVal = support.list_concat(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_concat(((Node)yyVals[-3+yyTop]).getPosition(), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 294:
					// line 1319 "RubyParser.y"
  {
                     yyVal = support.newSplatNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 301:
					// line 1329 "RubyParser.y"
  { 
                     yyVal = ((ListNode)yyVals[0+yyTop]); /* FIXME: Why complaining without $$ = $1;*/
                }
  break;
case 302:
					// line 1332 "RubyParser.y"
  {
                     yyVal = ((ListNode)yyVals[0+yyTop]); /* FIXME: Why complaining without $$ = $1;*/
                }
  break;
case 305:
					// line 1337 "RubyParser.y"
  {
                    yyVal = support.new_fcall(((String)yyVals[0+yyTop]));
                }
  break;
case 306:
					// line 1340 "RubyParser.y"
  {
                    yyVal = new BeginNode(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]));
                }
  break;
case 307:
					// line 1343 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_ENDARG);
                }
  break;
case 308:
					// line 1345 "RubyParser.y"
  {
                    yyVal = null; /*FIXME: Should be implicit nil?*/
                }
  break;
case 309:
					// line 1348 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_ENDARG); 
                }
  break;
case 310:
					// line 1350 "RubyParser.y"
  {
                    if (Options.PARSER_WARN_GROUPED_EXPRESSIONS.load()) {
                      support.warning(ID.GROUPED_EXPRESSION, ((ISourcePosition)yyVals[-3+yyTop]), "(...) interpreted as grouped expression");
                    }
                    yyVal = ((Node)yyVals[-2+yyTop]);
                }
  break;
case 311:
					// line 1356 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) != null) {
                        /* compstmt position includes both parens around it*/
                        ((ISourcePositionHolder) ((Node)yyVals[-1+yyTop])).setPosition(((ISourcePosition)yyVals[-2+yyTop]));
                        yyVal = ((Node)yyVals[-1+yyTop]);
                    } else {
                        yyVal = new NilNode(((ISourcePosition)yyVals[-2+yyTop]));
                    }
                }
  break;
case 312:
					// line 1365 "RubyParser.y"
  {
                    yyVal = support.new_colon2(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 313:
					// line 1368 "RubyParser.y"
  {
                    yyVal = support.new_colon3(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 314:
					// line 1371 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-1+yyTop]));
                    if (((Node)yyVals[-1+yyTop]) == null) {
                        yyVal = new ZArrayNode(position); /* zero length array */
                    } else {
                        yyVal = ((Node)yyVals[-1+yyTop]);
                    }
                }
  break;
case 315:
					// line 1379 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-1+yyTop]);
                }
  break;
case 316:
					// line 1382 "RubyParser.y"
  {
                    yyVal = new ReturnNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 317:
					// line 1385 "RubyParser.y"
  {
                    yyVal = support.new_yield(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 318:
					// line 1388 "RubyParser.y"
  {
                    yyVal = new ZYieldNode(((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 319:
					// line 1391 "RubyParser.y"
  {
                    yyVal = new ZYieldNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 320:
					// line 1394 "RubyParser.y"
  {
                    yyVal = support.new_defined(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 321:
					// line 1397 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[-1+yyTop])), "!");
                }
  break;
case 322:
					// line 1400 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(NilImplicitNode.NIL, "!");
                }
  break;
case 323:
					// line 1403 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), null, ((IterNode)yyVals[0+yyTop]));
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);                    
                }
  break;
case 325:
					// line 1408 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) != null && 
                          ((BlockAcceptingNode)yyVals[-1+yyTop]).getIterNode() instanceof BlockPassNode) {
                        throw new SyntaxException(PID.BLOCK_ARG_AND_BLOCK_GIVEN, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "Both block arg and actual block given.");
                    }
                    yyVal = ((BlockAcceptingNode)yyVals[-1+yyTop]).setIterNode(((IterNode)yyVals[0+yyTop]));
                    ((Node)yyVal).setPosition(((Node)yyVals[-1+yyTop]).getPosition());
                }
  break;
case 326:
					// line 1416 "RubyParser.y"
  {
                    yyVal = ((LambdaNode)yyVals[0+yyTop]);
                }
  break;
case 327:
					// line 1419 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-5+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 328:
					// line 1422 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-5+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-2+yyTop]));
                }
  break;
case 329:
					// line 1425 "RubyParser.y"
  {
                    lexer.getConditionState().begin();
                }
  break;
case 330:
					// line 1427 "RubyParser.y"
  {
                    lexer.getConditionState().end();
                }
  break;
case 331:
					// line 1429 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);
                    yyVal = new WhileNode(((ISourcePosition)yyVals[-6+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), body);
                }
  break;
case 332:
					// line 1433 "RubyParser.y"
  {
                  lexer.getConditionState().begin();
                }
  break;
case 333:
					// line 1435 "RubyParser.y"
  {
                  lexer.getConditionState().end();
                }
  break;
case 334:
					// line 1437 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);
                    yyVal = new UntilNode(((ISourcePosition)yyVals[-6+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), body);
                }
  break;
case 335:
					// line 1441 "RubyParser.y"
  {
                    yyVal = support.newCaseNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 336:
					// line 1444 "RubyParser.y"
  {
                    yyVal = support.newCaseNode(((ISourcePosition)yyVals[-3+yyTop]), null, ((Node)yyVals[-1+yyTop]));
                }
  break;
case 337:
					// line 1447 "RubyParser.y"
  {
                    lexer.getConditionState().begin();
                }
  break;
case 338:
					// line 1449 "RubyParser.y"
  {
                    lexer.getConditionState().end();
                }
  break;
case 339:
					// line 1451 "RubyParser.y"
  {
                      /* ENEBO: Lots of optz in 1.9 parser here*/
                    yyVal = new ForNode(((ISourcePosition)yyVals[-8+yyTop]), ((Node)yyVals[-7+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-4+yyTop]), support.getCurrentScope());
                }
  break;
case 340:
					// line 1455 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("class definition in method body");
                    }
                    support.pushLocalScope();
                }
  break;
case 341:
					// line 1460 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new ClassNode(((ISourcePosition)yyVals[-5+yyTop]), ((Colon3Node)yyVals[-4+yyTop]), support.getCurrentScope(), body, ((Node)yyVals[-3+yyTop]));
                    support.popCurrentScope();
                }
  break;
case 342:
					// line 1466 "RubyParser.y"
  {
                    yyVal = Boolean.valueOf(support.isInDef());
                    support.setInDef(false);
                }
  break;
case 343:
					// line 1469 "RubyParser.y"
  {
                    yyVal = Integer.valueOf(support.getInSingle());
                    support.setInSingle(0);
                    support.pushLocalScope();
                }
  break;
case 344:
					// line 1473 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new SClassNode(((ISourcePosition)yyVals[-7+yyTop]), ((Node)yyVals[-5+yyTop]), support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInDef(((Boolean)yyVals[-4+yyTop]).booleanValue());
                    support.setInSingle(((Integer)yyVals[-2+yyTop]).intValue());
                }
  break;
case 345:
					// line 1481 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) { 
                        support.yyerror("module definition in method body");
                    }
                    support.pushLocalScope();
                }
  break;
case 346:
					// line 1486 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new ModuleNode(((ISourcePosition)yyVals[-4+yyTop]), ((Colon3Node)yyVals[-3+yyTop]), support.getCurrentScope(), body);
                    support.popCurrentScope();
                }
  break;
case 347:
					// line 1492 "RubyParser.y"
  {
                    support.setInDef(true);
                    support.pushLocalScope();
                }
  break;
case 348:
					// line 1495 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]);
                    if (body == null) body = NilImplicitNode.NIL;

                    yyVal = new DefnNode(((ISourcePosition)yyVals[-5+yyTop]), new ArgumentNode(((ISourcePosition)yyVals[-5+yyTop]), ((String)yyVals[-4+yyTop])), (ArgsNode) yyVals[-2+yyTop], support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInDef(false);
                }
  break;
case 349:
					// line 1503 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 350:
					// line 1505 "RubyParser.y"
  {
                    support.setInSingle(support.getInSingle() + 1);
                    support.pushLocalScope();
                    lexer.setState(LexState.EXPR_ENDFN); /* force for args */
                }
  break;
case 351:
					// line 1509 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]);
                    if (body == null) body = NilImplicitNode.NIL;

                    yyVal = new DefsNode(((ISourcePosition)yyVals[-8+yyTop]), ((Node)yyVals[-7+yyTop]), new ArgumentNode(((ISourcePosition)yyVals[-8+yyTop]), ((String)yyVals[-4+yyTop])), (ArgsNode) yyVals[-2+yyTop], support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInSingle(support.getInSingle() - 1);
                }
  break;
case 352:
					// line 1517 "RubyParser.y"
  {
                    yyVal = new BreakNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 353:
					// line 1520 "RubyParser.y"
  {
                    yyVal = new NextNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 354:
					// line 1523 "RubyParser.y"
  {
                    yyVal = new RedoNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 355:
					// line 1526 "RubyParser.y"
  {
                    yyVal = new RetryNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 357:
					// line 1532 "RubyParser.y"
  {
                    yyVal = support.signal_assign(((ISourcePosition)yyVals[-1+yyTop]),((ISourcePosition)yyVals[-1+yyTop]));
                }
  break;
case 358:
					// line 1536 "RubyParser.y"
  {
                    support.pushSignalScope();
                }
  break;
case 359:
					// line 1538 "RubyParser.y"
  {
                    yyVal = new SigNode(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-2+yyTop]), support.getCurrentSignalScope());
                    support.popCurrentSignalScope();
                }
  break;
case 360:
					// line 1543 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = ((Node)yyVals[0+yyTop]);
                    if (yyVal == null) yyVal = NilImplicitNode.NIL;
                }
  break;
case 367:
					// line 1557 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-4+yyTop]), support.getConditionNode(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 369:
					// line 1562 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 371:
					// line 1567 "RubyParser.y"
  {
                }
  break;
case 372:
					// line 1570 "RubyParser.y"
  {
                     yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 373:
					// line 1573 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 374:
					// line 1578 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 375:
					// line 1581 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 376:
					// line 1585 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[0+yyTop]).getPosition(), ((ListNode)yyVals[0+yyTop]), null, null);
                }
  break;
case 377:
					// line 1588 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null), null);
                }
  break;
case 378:
					// line 1591 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), null), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 379:
					// line 1594 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-2+yyTop]).getPosition(), ((ListNode)yyVals[-2+yyTop]), new StarNode(lexer.getPosition()), null);
                }
  break;
case 380:
					// line 1597 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-4+yyTop]), new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 381:
					// line 1600 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null), null);
                }
  break;
case 382:
					// line 1603 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), null), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 383:
					// line 1606 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), null);
                }
  break;
case 384:
					// line 1609 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(support.getPosition(((ListNode)yyVals[0+yyTop])), null, null, ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 385:
					// line 1613 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 386:
					// line 1616 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 387:
					// line 1619 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 388:
					// line 1622 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((BlockArgNode)yyVals[0+yyTop]).getPosition(), null, null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 389:
					// line 1626 "RubyParser.y"
  {
                    yyVal = ((ArgsTailHolder)yyVals[0+yyTop]);
                }
  break;
case 390:
					// line 1629 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, null, null);
                }
  break;
case 391:
					// line 1634 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 392:
					// line 1637 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-7+yyTop]).getPosition(), ((ListNode)yyVals[-7+yyTop]), ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 393:
					// line 1640 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 394:
					// line 1643 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 395:
					// line 1646 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 396:
					// line 1649 "RubyParser.y"
  {
                    RestArgNode rest = new UnnamedRestArgNode(((ListNode)yyVals[-1+yyTop]).getPosition(), null, support.getCurrentScope().addVariable("*"));
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, rest, null, (ArgsTailHolder) null);
                }
  break;
case 397:
					// line 1653 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 398:
					// line 1656 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 399:
					// line 1659 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-3+yyTop])), null, ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 400:
					// line 1662 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-5+yyTop])), null, ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 401:
					// line 1665 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-1+yyTop])), null, ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 402:
					// line 1668 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 403:
					// line 1671 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-1+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 404:
					// line 1674 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-3+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 405:
					// line 1677 "RubyParser.y"
  {
                    yyVal = support.new_args(((ArgsTailHolder)yyVals[0+yyTop]).getPosition(), null, null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 406:
					// line 1681 "RubyParser.y"
  {
    /* was $$ = null;*/
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 407:
					// line 1685 "RubyParser.y"
  {
                    lexer.commandStart = true;
                    yyVal = ((ArgsNode)yyVals[0+yyTop]);
                }
  break;
case 408:
					// line 1690 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 409:
					// line 1693 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 410:
					// line 1696 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-2+yyTop]);
                }
  break;
case 411:
					// line 1701 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 412:
					// line 1704 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 413:
					// line 1709 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 414:
					// line 1712 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 415:
					// line 1716 "RubyParser.y"
  {
                    support.new_bv(((String)yyVals[0+yyTop]));
                }
  break;
case 416:
					// line 1719 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 417:
					// line 1723 "RubyParser.y"
  {
                    support.pushBlockScope();
                    yyVal = lexer.getLeftParenBegin();
                    lexer.setLeftParenBegin(lexer.incrementParenNest());
                }
  break;
case 418:
					// line 1727 "RubyParser.y"
  {
                    yyVal = new LambdaNode(((ArgsNode)yyVals[-1+yyTop]).getPosition(), ((ArgsNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                    lexer.setLeftParenBegin(((Integer)yyVals[-2+yyTop]));
                }
  break;
case 419:
					// line 1733 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-2+yyTop]);
                }
  break;
case 420:
					// line 1736 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[0+yyTop]);
                }
  break;
case 421:
					// line 1740 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 422:
					// line 1743 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 423:
					// line 1747 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 424:
					// line 1749 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 425:
					// line 1758 "RubyParser.y"
  {
                    /* Workaround for JRUBY-2326 (MRI does not enter this production for some reason)*/
                    if (((Node)yyVals[-1+yyTop]) instanceof YieldNode) {
                        throw new SyntaxException(PID.BLOCK_GIVEN_TO_YIELD, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "block given to yield");
                    }
                    if (((Node)yyVals[-1+yyTop]) instanceof BlockAcceptingNode && ((BlockAcceptingNode)yyVals[-1+yyTop]).getIterNode() instanceof BlockPassNode) {
                        throw new SyntaxException(PID.BLOCK_ARG_AND_BLOCK_GIVEN, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "Both block arg and actual block given.");
                    }
                    if (((Node)yyVals[-1+yyTop]) instanceof NonLocalControlFlowNode) {
                        ((BlockAcceptingNode) ((NonLocalControlFlowNode)yyVals[-1+yyTop]).getValueNode()).setIterNode(((IterNode)yyVals[0+yyTop]));
                    } else {
                        ((BlockAcceptingNode)yyVals[-1+yyTop]).setIterNode(((IterNode)yyVals[0+yyTop]));
                    }
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    ((Node)yyVal).setPosition(((Node)yyVals[-1+yyTop]).getPosition());
                }
  break;
case 426:
					// line 1774 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 427:
					// line 1777 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 428:
					// line 1780 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 429:
					// line 1785 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);
                }
  break;
case 430:
					// line 1789 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 431:
					// line 1792 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 432:
					// line 1795 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]), null, null);
                }
  break;
case 433:
					// line 1798 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), "call", ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 434:
					// line 1801 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), "call", ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 435:
					// line 1804 "RubyParser.y"
  {
                    yyVal = support.new_super(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 436:
					// line 1807 "RubyParser.y"
  {
                    yyVal = new ZSuperNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 437:
					// line 1810 "RubyParser.y"
  {
                    if (((Node)yyVals[-3+yyTop]) instanceof SelfNode) {
                        yyVal = support.new_fcall("[]");
                        support.frobnicate_fcall_args(((FCallNode)yyVal), ((Node)yyVals[-1+yyTop]), null);
                    } else {
                        yyVal = support.new_call(((Node)yyVals[-3+yyTop]), "[]", ((Node)yyVals[-1+yyTop]), null);
                    }
                }
  break;
case 438:
					// line 1819 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 439:
					// line 1821 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 440:
					// line 1825 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 441:
					// line 1827 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 442:
					// line 1832 "RubyParser.y"
  {
                    yyVal = support.newWhenNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 445:
					// line 1838 "RubyParser.y"
  {
                    Node node;
                    if (((Node)yyVals[-3+yyTop]) != null) {
                        node = support.appendToBlock(support.node_assign(((Node)yyVals[-3+yyTop]), new GlobalVarNode(((ISourcePosition)yyVals[-5+yyTop]), "$!")), ((Node)yyVals[-1+yyTop]));
                        if (((Node)yyVals[-1+yyTop]) != null) {
                            node.setPosition(((ISourcePosition)yyVals[-5+yyTop]));
                        }
                    } else {
                        node = ((Node)yyVals[-1+yyTop]);
                    }
                    Node body = node == null ? NilImplicitNode.NIL : node;
                    yyVal = new RescueBodyNode(((ISourcePosition)yyVals[-5+yyTop]), ((Node)yyVals[-4+yyTop]), body, ((RescueBodyNode)yyVals[0+yyTop]));
                }
  break;
case 446:
					// line 1851 "RubyParser.y"
  { 
                    yyVal = null; 
                }
  break;
case 447:
					// line 1855 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 448:
					// line 1858 "RubyParser.y"
  {
                    yyVal = support.splat_array(((Node)yyVals[0+yyTop]));
                    if (yyVal == null) yyVal = ((Node)yyVals[0+yyTop]); /* ArgsCat or ArgsPush*/
                }
  break;
case 450:
					// line 1864 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 452:
					// line 1869 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 454:
					// line 1874 "RubyParser.y"
  {
                    yyVal = ((NumericNode)yyVals[0+yyTop]);
                }
  break;
case 455:
					// line 1877 "RubyParser.y"
  {
                    yyVal = new SymbolNode(lexer.getPosition(), new ByteList(((String)yyVals[0+yyTop]).getBytes(), lexer.getEncoding()));
                }
  break;
case 457:
					// line 1882 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]) instanceof EvStrNode ? new DStrNode(((Node)yyVals[0+yyTop]).getPosition(), lexer.getEncoding()).add(((Node)yyVals[0+yyTop])) : ((Node)yyVals[0+yyTop]);
                    /*
                    NODE *node = $1;
                    if (!node) {
                        node = NEW_STR(STR_NEW0());
                    } else {
                        node = evstr2dstr(node);
                    }
                    $$ = node;
                    */
                }
  break;
case 458:
					// line 1896 "RubyParser.y"
  {
                    yyVal = ((StrNode)yyVals[0+yyTop]);
                }
  break;
case 459:
					// line 1899 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 460:
					// line 1902 "RubyParser.y"
  {
                    yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 461:
					// line 1906 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 462:
					// line 1910 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-1+yyTop]));

                    if (((Node)yyVals[-1+yyTop]) == null) {
                        yyVal = new XStrNode(position, null);
                    } else if (((Node)yyVals[-1+yyTop]) instanceof StrNode) {
                        yyVal = new XStrNode(position, (ByteList) ((StrNode)yyVals[-1+yyTop]).getValue().clone());
                    } else if (((Node)yyVals[-1+yyTop]) instanceof DStrNode) {
                        yyVal = new DXStrNode(position, ((DStrNode)yyVals[-1+yyTop]));

                        ((Node)yyVal).setPosition(position);
                    } else {
                        yyVal = new DXStrNode(position).add(((Node)yyVals[-1+yyTop]));
                    }
                }
  break;
case 463:
					// line 1926 "RubyParser.y"
  {
                    yyVal = support.newRegexpNode(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), (RegexpNode) ((RegexpNode)yyVals[0+yyTop]));
                }
  break;
case 464:
					// line 1930 "RubyParser.y"
  {
                    yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 465:
					// line 1933 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 466:
					// line 1937 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 467:
					// line 1940 "RubyParser.y"
  {
                     yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DStrNode(((ListNode)yyVals[-2+yyTop]).getPosition(), lexer.getEncoding()).add(((Node)yyVals[-1+yyTop])) : ((Node)yyVals[-1+yyTop]));
                }
  break;
case 468:
					// line 1944 "RubyParser.y"
  {
                     yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 469:
					// line 1947 "RubyParser.y"
  {
                     yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 470:
					// line 1951 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 471:
					// line 1954 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 472:
					// line 1958 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 473:
					// line 1961 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DSymbolNode(((ListNode)yyVals[-2+yyTop]).getPosition()).add(((Node)yyVals[-1+yyTop])) : support.asSymbol(((ListNode)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop])));
                }
  break;
case 474:
					// line 1965 "RubyParser.y"
  {
                     yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 475:
					// line 1968 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 476:
					// line 1972 "RubyParser.y"
  {
                    yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 477:
					// line 1975 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 478:
					// line 1980 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 479:
					// line 1983 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
                }
  break;
case 480:
					// line 1987 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 481:
					// line 1990 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(support.asSymbol(((ListNode)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop])));
                }
  break;
case 482:
					// line 1994 "RubyParser.y"
  {
                    ByteList aChar = ByteList.create("");
                    aChar.setEncoding(lexer.getEncoding());
                    yyVal = lexer.createStrNode(lexer.getPosition(), aChar, 0);
                }
  break;
case 483:
					// line 1999 "RubyParser.y"
  {
                    yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 484:
					// line 2003 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 485:
					// line 2006 "RubyParser.y"
  {
                    yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 486:
					// line 2010 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 487:
					// line 2013 "RubyParser.y"
  {
    /* FIXME: mri is different here.*/
                    yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 488:
					// line 2018 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 489:
					// line 2021 "RubyParser.y"
  {
                    yyVal = lexer.getStrTerm();
                    lexer.setStrTerm(null);
                    lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 490:
					// line 2025 "RubyParser.y"
  {
                    lexer.setStrTerm(((StrTerm)yyVals[-1+yyTop]));
                    yyVal = new EvStrNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 491:
					// line 2029 "RubyParser.y"
  {
                   yyVal = lexer.getStrTerm();
                   lexer.setStrTerm(null);
                   lexer.getConditionState().stop();
                   lexer.getCmdArgumentState().stop();
                }
  break;
case 492:
					// line 2034 "RubyParser.y"
  {
                   yyVal = lexer.getState();
                   lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 493:
					// line 2037 "RubyParser.y"
  {
                   lexer.getConditionState().restart();
                   lexer.getCmdArgumentState().restart();
                   lexer.setStrTerm(((StrTerm)yyVals[-3+yyTop]));
                   lexer.setState(((LexState)yyVals[-2+yyTop]));

                   yyVal = support.newEvStrNode(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 494:
					// line 2046 "RubyParser.y"
  {
                     yyVal = new GlobalVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 495:
					// line 2049 "RubyParser.y"
  {
                     yyVal = new InstVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 496:
					// line 2052 "RubyParser.y"
  {
                     yyVal = new ClassVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 498:
					// line 2058 "RubyParser.y"
  {
                     lexer.setState(LexState.EXPR_END);
                     yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 503:
					// line 2066 "RubyParser.y"
  {
                     lexer.setState(LexState.EXPR_END);

                     /* DStrNode: :"some text #{some expression}"*/
                     /* StrNode: :"some text"*/
                     /* EvStrNode :"#{some expression}"*/
                     /* Ruby 1.9 allows empty strings as symbols*/
                     if (((Node)yyVals[-1+yyTop]) == null) {
                         yyVal = new SymbolNode(lexer.getPosition(), new ByteList(new byte[0], lexer.getEncoding()));
                     } else if (((Node)yyVals[-1+yyTop]) instanceof DStrNode) {
                         yyVal = new DSymbolNode(((Node)yyVals[-1+yyTop]).getPosition(), ((DStrNode)yyVals[-1+yyTop]));
                     } else if (((Node)yyVals[-1+yyTop]) instanceof StrNode) {
                         yyVal = new SymbolNode(((Node)yyVals[-1+yyTop]).getPosition(), ((StrNode)yyVals[-1+yyTop]).getValue());
                     } else {
                         yyVal = new DSymbolNode(((Node)yyVals[-1+yyTop]).getPosition());
                         ((DSymbolNode)yyVal).add(((Node)yyVals[-1+yyTop]));
                     }
                }
  break;
case 504:
					// line 2085 "RubyParser.y"
  {
                    yyVal = ((NumericNode)yyVals[0+yyTop]);  
                }
  break;
case 505:
					// line 2088 "RubyParser.y"
  {
                     yyVal = support.negateNumeric(((NumericNode)yyVals[0+yyTop]));
                }
  break;
case 506:
					// line 2092 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 507:
					// line 2095 "RubyParser.y"
  {
                     yyVal = ((FloatNode)yyVals[0+yyTop]);
                }
  break;
case 508:
					// line 2098 "RubyParser.y"
  {
                     yyVal = ((RationalNode)yyVals[0+yyTop]);
                }
  break;
case 509:
					// line 2101 "RubyParser.y"
  {
                     yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 510:
					// line 2106 "RubyParser.y"
  {
                    yyVal = support.declareIdentifier(((String)yyVals[0+yyTop]));
                }
  break;
case 511:
					// line 2109 "RubyParser.y"
  {
                    yyVal = new InstVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 512:
					// line 2112 "RubyParser.y"
  {
                    yyVal = new GlobalVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 513:
					// line 2115 "RubyParser.y"
  {
                    yyVal = new ConstNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 514:
					// line 2118 "RubyParser.y"
  {
                    yyVal = new ClassVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 515:
					// line 2121 "RubyParser.y"
  { 
                    yyVal = new NilNode(lexer.getPosition());
                }
  break;
case 516:
					// line 2124 "RubyParser.y"
  {
                    yyVal = new SelfNode(lexer.getPosition());
                }
  break;
case 517:
					// line 2127 "RubyParser.y"
  { 
                    yyVal = new TrueNode(lexer.getPosition());
                }
  break;
case 518:
					// line 2130 "RubyParser.y"
  {
                    yyVal = new FalseNode(lexer.getPosition());
                }
  break;
case 519:
					// line 2133 "RubyParser.y"
  {
                    yyVal = new FileNode(lexer.getPosition(), new ByteList(lexer.getPosition().getFile().getBytes(),
                    support.getConfiguration().getRuntime().getEncodingService().getLocaleEncoding()));
                }
  break;
case 520:
					// line 2137 "RubyParser.y"
  {
                    yyVal = new FixnumNode(lexer.getPosition(), lexer.tokline.getLine()+1);
                }
  break;
case 521:
					// line 2140 "RubyParser.y"
  {
                    yyVal = new EncodingNode(lexer.getPosition(), lexer.getEncoding());
                }
  break;
case 522:
					// line 2145 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 523:
					// line 2148 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 524:
					// line 2151 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 525:
					// line 2154 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 526:
					// line 2159 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 527:
					// line 2162 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 528:
					// line 2166 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 529:
					// line 2170 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 530:
					// line 2174 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 531:
					// line 2178 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 532:
					// line 2182 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 533:
					// line 2186 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 534:
					// line 2192 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 535:
					// line 2195 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 536:
					// line 2199 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 537:
					// line 2202 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 538:
					// line 2204 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 539:
					// line 2207 "RubyParser.y"
  {
                   yyVal = null;
                }
  break;
case 540:
					// line 2213 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-1+yyTop]);
                    lexer.setState(LexState.EXPR_BEG);
                    lexer.commandStart = true;
                }
  break;
case 541:
					// line 2218 "RubyParser.y"
  {
                   yyVal = lexer.inKwarg;
                   lexer.inKwarg = true;
                }
  break;
case 542:
					// line 2221 "RubyParser.y"
  {
                   lexer.inKwarg = ((Boolean)yyVals[-2+yyTop]);
                    yyVal = ((ArgsNode)yyVals[-1+yyTop]);
                    lexer.setState(LexState.EXPR_BEG);
                    lexer.commandStart = true;
                }
  break;
case 543:
					// line 2229 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 544:
					// line 2232 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 545:
					// line 2235 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 546:
					// line 2238 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((BlockArgNode)yyVals[0+yyTop]).getPosition(), null, null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 547:
					// line 2242 "RubyParser.y"
  {
                    yyVal = ((ArgsTailHolder)yyVals[0+yyTop]);
                }
  break;
case 548:
					// line 2245 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, null, null);
                }
  break;
case 549:
					// line 2250 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 550:
					// line 2253 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-7+yyTop]).getPosition(), ((ListNode)yyVals[-7+yyTop]), ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 551:
					// line 2256 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 552:
					// line 2259 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 553:
					// line 2262 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 554:
					// line 2265 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 555:
					// line 2268 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 556:
					// line 2271 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 557:
					// line 2274 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), null, ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 558:
					// line 2277 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), null, ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 559:
					// line 2280 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 560:
					// line 2283 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-1+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 561:
					// line 2286 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-3+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 562:
					// line 2289 "RubyParser.y"
  {
                    yyVal = support.new_args(((ArgsTailHolder)yyVals[0+yyTop]).getPosition(), null, null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 563:
					// line 2292 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 564:
					// line 2296 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a constant");
                }
  break;
case 565:
					// line 2299 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be an instance variable");
                }
  break;
case 566:
					// line 2302 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a global variable");
                }
  break;
case 567:
					// line 2305 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a class variable");
                }
  break;
case 569:
					// line 2311 "RubyParser.y"
  {
                    yyVal = support.formal_argument(((String)yyVals[0+yyTop]));
                }
  break;
case 570:
					// line 2315 "RubyParser.y"
  {
                    yyVal = support.arg_var(((String)yyVals[0+yyTop]));
                }
  break;
case 571:
					// line 2318 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    /*            {
            ID tid = internal_id();
            arg_var(tid);
            if (dyna_in_block()) {
                $2->nd_value = NEW_DVAR(tid);
            }
            else {
                $2->nd_value = NEW_LVAR(tid);
            }
            $$ = NEW_ARGS_AUX(tid, 1);
            $$->nd_next = $2;*/
                }
  break;
case 572:
					// line 2334 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 573:
					// line 2337 "RubyParser.y"
  {
                    ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                    yyVal = ((ListNode)yyVals[-2+yyTop]);
                }
  break;
case 574:
					// line 2342 "RubyParser.y"
  {
                    support.arg_var(support.formal_argument(((String)yyVals[0+yyTop])));
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 575:
					// line 2347 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(((Node)yyVals[0+yyTop]).getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 576:
					// line 2350 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(lexer.getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), new RequiredKeywordArgumentValueNode()));
                }
  break;
case 577:
					// line 2354 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 578:
					// line 2357 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(lexer.getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), new RequiredKeywordArgumentValueNode()));
                }
  break;
case 579:
					// line 2362 "RubyParser.y"
  {
                    yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 580:
					// line 2365 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 581:
					// line 2369 "RubyParser.y"
  {
                    yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 582:
					// line 2372 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 583:
					// line 2376 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 584:
					// line 2379 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 585:
					// line 2383 "RubyParser.y"
  {
                    support.shadowing_lvar(((String)yyVals[0+yyTop]));
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 586:
					// line 2387 "RubyParser.y"
  {
                    yyVal = support.internalId();
                }
  break;
case 587:
					// line 2391 "RubyParser.y"
  {
                    support.arg_var(((String)yyVals[-2+yyTop]));
                    yyVal = new OptArgNode(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 588:
					// line 2396 "RubyParser.y"
  {
                    support.arg_var(support.formal_argument(((String)yyVals[-2+yyTop])));
                    yyVal = new OptArgNode(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 589:
					// line 2401 "RubyParser.y"
  {
                    yyVal = new BlockNode(((Node)yyVals[0+yyTop]).getPosition()).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 590:
					// line 2404 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 591:
					// line 2408 "RubyParser.y"
  {
                    yyVal = new BlockNode(((Node)yyVals[0+yyTop]).getPosition()).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 592:
					// line 2411 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 595:
					// line 2418 "RubyParser.y"
  {
                    if (!support.is_local_id(((String)yyVals[0+yyTop]))) {
                        support.yyerror("rest argument must be local variable");
                    }
                    
                    yyVal = new RestArgNode(support.arg_var(support.shadowing_lvar(((String)yyVals[0+yyTop]))));
                }
  break;
case 596:
					// line 2425 "RubyParser.y"
  {
                    yyVal = new UnnamedRestArgNode(lexer.getPosition(), "", support.getCurrentScope().addVariable("*"));
                }
  break;
case 599:
					// line 2433 "RubyParser.y"
  {
                    if (!support.is_local_id(((String)yyVals[0+yyTop]))) {
                        support.yyerror("block argument must be local variable");
                    }
                    
                    yyVal = new BlockArgNode(support.arg_var(support.shadowing_lvar(((String)yyVals[0+yyTop]))));
                }
  break;
case 600:
					// line 2441 "RubyParser.y"
  {
                    yyVal = ((BlockArgNode)yyVals[0+yyTop]);
                }
  break;
case 601:
					// line 2444 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 602:
					// line 2448 "RubyParser.y"
  {
                    if (!(((Node)yyVals[0+yyTop]) instanceof SelfNode)) {
                        support.checkExpression(((Node)yyVals[0+yyTop]));
                    }
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 603:
					// line 2454 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 604:
					// line 2456 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) == null) {
                        support.yyerror("can't define single method for ().");
                    } else if (((Node)yyVals[-1+yyTop]) instanceof ILiteralNode) {
                        support.yyerror("can't define single method for literals.");
                    }
                    support.checkExpression(((Node)yyVals[-1+yyTop]));
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 605:
					// line 2467 "RubyParser.y"
  {
                    yyVal = new HashNode(lexer.getPosition());
                }
  break;
case 606:
					// line 2470 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-1+yyTop]);
                }
  break;
case 607:
					// line 2475 "RubyParser.y"
  {
                    yyVal = new HashNode(lexer.getPosition(), ((KeyValuePair)yyVals[0+yyTop]));
                }
  break;
case 608:
					// line 2478 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-2+yyTop]).add(((KeyValuePair)yyVals[0+yyTop]));
                }
  break;
case 609:
					// line 2483 "RubyParser.y"
  {
                    yyVal = new KeyValuePair<Node,Node>(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 610:
					// line 2486 "RubyParser.y"
  {
                    SymbolNode label = new SymbolNode(support.getPosition(((Node)yyVals[0+yyTop])), new ByteList(((String)yyVals[-1+yyTop]).getBytes(), lexer.getEncoding()));
                    yyVal = new KeyValuePair<Node,Node>(label, ((Node)yyVals[0+yyTop]));
                }
  break;
case 611:
					// line 2490 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) instanceof StrNode) {
                        DStrNode dnode = new DStrNode(support.getPosition(((Node)yyVals[-2+yyTop])), lexer.getEncoding());
                        dnode.add(((Node)yyVals[-2+yyTop]));
                        yyVal = new KeyValuePair<Node,Node>(new DSymbolNode(support.getPosition(((Node)yyVals[-2+yyTop])), dnode), ((Node)yyVals[0+yyTop]));
                    } else if (((Node)yyVals[-2+yyTop]) instanceof DStrNode) {
                        yyVal = new KeyValuePair<Node,Node>(new DSymbolNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((DStrNode)yyVals[-2+yyTop])), ((Node)yyVals[0+yyTop]));
                    } else {
                        support.compile_error("Uknown type for assoc in strings: " + ((Node)yyVals[-2+yyTop]));
                    }

                }
  break;
case 612:
					// line 2503 "RubyParser.y"
  {
                    yyVal = new KeyValuePair<Node,Node>(null, ((Node)yyVals[0+yyTop]));
                }
  break;
case 629:
					// line 2513 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 630:
					// line 2516 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 638:
					// line 2527 "RubyParser.y"
  {
                      yyVal = null;
                }
  break;
case 639:
					// line 2531 "RubyParser.y"
  {  
                  yyVal = null;
                }
  break;
					// line 9722 "-"
// ACTIONS_END
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (yydebug != null) yydebug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.nextToken();
//            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
               yydebug.lex(yyState, yyToken,yyName(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (yydebug != null) yydebug.accept(yyVal);
            return yyVal;
          }
          continue yyLoop;
        }
        if ((yyN = yyGindex[yyM]) != 0 && (yyN += yyState) >= 0
            && yyN < yyTable.length && yyCheck[yyN] == yyState)
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (yydebug != null) yydebug.shift(yyStates[yyTop], yyState);
        continue yyLoop;
      }
    }
  }

// ACTION_BODIES
					// line 2536 "RubyParser.y"

    /** The parse method use an lexer stream and parse it to an AST node 
     * structure
     */
    public RubyParserResult parse(ParserConfiguration configuration, LexerSource source) throws IOException {
        support.reset();
        support.setConfiguration(configuration);
        support.setResult(new RubyParserResult());
        
        lexer.reset();
        lexer.setSource(source);
        lexer.setEncoding(configuration.getDefaultEncoding());

        yyparse(lexer, configuration.isDebug() ? new YYDebug() : null);
        
        return support.getResult();
    }
}
					// line 9774 "-"
