// created by jay 1.1.0 (c) 2002-2006 ats@cs.rit.edu
// skeleton Java 1.0 (c) 2002 ats@cs.rit.edu

					// line 2 "RubyParser.y"
/***** BEGIN LICENSE BLOCK *****
 * Version: EPL 1.0/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Common Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.eclipse.org/legal/cpl-v10.html
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * Copyright (C) 2008-2009 Thomas E Enebo <enebo@acm.org>
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the EPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the EPL, the GPL or the LGPL.
 ***** END LICENSE BLOCK *****/
package org.jruby.parser;

import java.io.IOException;

import org.jruby.ast.ArgsNode;
import org.jruby.ast.ArgumentNode;
import org.jruby.ast.ArrayNode;
import org.jruby.ast.AssignableNode;
import org.jruby.ast.BackRefNode;
import org.jruby.ast.BeginNode;
import org.jruby.ast.BlockAcceptingNode;
import org.jruby.ast.BlockArgNode;
import org.jruby.ast.BlockNode;
import org.jruby.ast.BlockPassNode;
import org.jruby.ast.BreakNode;
import org.jruby.ast.CallNode;
import org.jruby.ast.ClassNode;
import org.jruby.ast.ClassVarNode;
import org.jruby.ast.ClassVarAsgnNode;
import org.jruby.ast.Colon3Node;
import org.jruby.ast.ConstNode;
import org.jruby.ast.ConstDeclNode;
import org.jruby.ast.DStrNode;
import org.jruby.ast.DSymbolNode;
import org.jruby.ast.DXStrNode;
import org.jruby.ast.DefnNode;
import org.jruby.ast.DefsNode;
import org.jruby.ast.DotNode;
import org.jruby.ast.EncodingNode;
import org.jruby.ast.EnsureNode;
import org.jruby.ast.EvStrNode;
import org.jruby.ast.FalseNode;
import org.jruby.ast.FileNode;
import org.jruby.ast.FCallNode;
import org.jruby.ast.FixnumNode;
import org.jruby.ast.FloatNode;
import org.jruby.ast.ForNode;
import org.jruby.ast.GlobalAsgnNode;
import org.jruby.ast.GlobalVarNode;
import org.jruby.ast.HashNode;
import org.jruby.ast.IfNode;
import org.jruby.ast.InstAsgnNode;
import org.jruby.ast.InstVarNode;
import org.jruby.ast.IterNode;
import org.jruby.ast.LambdaNode;
import org.jruby.ast.ListNode;
import org.jruby.ast.LiteralNode;
import org.jruby.ast.ModuleNode;
import org.jruby.ast.MultipleAsgn19Node;
import org.jruby.ast.NextNode;
import org.jruby.ast.NilImplicitNode;
import org.jruby.ast.NilNode;
import org.jruby.ast.Node;
import org.jruby.ast.NonLocalControlFlowNode;
import org.jruby.ast.NumericNode;
import org.jruby.ast.OpAsgnAndNode;
import org.jruby.ast.OpAsgnNode;
import org.jruby.ast.OpAsgnOrNode;
import org.jruby.ast.OptArgNode;
import org.jruby.ast.PostExeNode;
import org.jruby.ast.PreExe19Node;
import org.jruby.ast.RationalNode;
import org.jruby.ast.RedoNode;
import org.jruby.ast.RegexpNode;
import org.jruby.ast.RequiredKeywordArgumentValueNode;
import org.jruby.ast.RescueBodyNode;
import org.jruby.ast.RescueNode;
import org.jruby.ast.RestArgNode;
import org.jruby.ast.RetryNode;
import org.jruby.ast.ReturnNode;
import org.jruby.ast.SClassNode;
import org.jruby.ast.SelfNode;
import org.jruby.ast.StarNode;
import org.jruby.ast.StrNode;
import org.jruby.ast.SymbolNode;
import org.jruby.ast.TrueNode;
import org.jruby.ast.UnnamedRestArgNode;
import org.jruby.ast.UntilNode;
import org.jruby.ast.VAliasNode;
import org.jruby.ast.WhileNode;
import org.jruby.ast.XStrNode;
import org.jruby.ast.YieldNode;
import org.jruby.ast.ZArrayNode;
import org.jruby.ast.ZSuperNode;
import org.jruby.ast.ZYieldNode;
import org.jruby.ast.types.ILiteralNode;
import org.jruby.common.IRubyWarnings;
import org.jruby.common.IRubyWarnings.ID;
import org.jruby.lexer.yacc.ISourcePosition;
import org.jruby.lexer.yacc.ISourcePositionHolder;
import org.jruby.lexer.yacc.LexerSource;
import org.jruby.lexer.yacc.RubyLexer;
import org.jruby.lexer.yacc.RubyLexer.LexState;
import org.jruby.lexer.yacc.StrTerm;
import org.jruby.lexer.yacc.SyntaxException;
import org.jruby.lexer.yacc.SyntaxException.PID;
import org.jruby.util.ByteList;
import org.jruby.util.KeyValuePair;
import org.jruby.util.cli.Options;

public class RubyParser {
    protected ParserSupport support;
    protected RubyLexer lexer;

    public RubyParser() {
        this(new ParserSupport());
    }

    public RubyParser(ParserSupport support) {
        this.support = support;
        lexer = new RubyLexer();
        lexer.setParserSupport(support);
        support.setLexer(lexer);
    }

    public void setWarnings(IRubyWarnings warnings) {
        support.setWarnings(warnings);
        lexer.setWarnings(warnings);
    }
					// line 152 "-"
  // %token constants
  public static final int kCLASS = 257;
  public static final int kMODULE = 258;
  public static final int kDEF = 259;
  public static final int kUNDEF = 260;
  public static final int kBEGIN = 261;
  public static final int kRESCUE = 262;
  public static final int kENSURE = 263;
  public static final int kEND = 264;
  public static final int kIF = 265;
  public static final int kUNLESS = 266;
  public static final int kTHEN = 267;
  public static final int kELSIF = 268;
  public static final int kELSE = 269;
  public static final int kCASE = 270;
  public static final int kWHEN = 271;
  public static final int kWHILE = 272;
  public static final int kUNTIL = 273;
  public static final int kFOR = 274;
  public static final int kBREAK = 275;
  public static final int kNEXT = 276;
  public static final int kREDO = 277;
  public static final int kRETRY = 278;
  public static final int kIN = 279;
  public static final int kDO = 280;
  public static final int kDO_COND = 281;
  public static final int kDO_BLOCK = 282;
  public static final int kRETURN = 283;
  public static final int kYIELD = 284;
  public static final int kSUPER = 285;
  public static final int kSELF = 286;
  public static final int kNIL = 287;
  public static final int kTRUE = 288;
  public static final int kFALSE = 289;
  public static final int kAND = 290;
  public static final int kOR = 291;
  public static final int kNOT = 292;
  public static final int kIF_MOD = 293;
  public static final int kUNLESS_MOD = 294;
  public static final int kWHILE_MOD = 295;
  public static final int kUNTIL_MOD = 296;
  public static final int kRESCUE_MOD = 297;
  public static final int kALIAS = 298;
  public static final int kDEFINED = 299;
  public static final int klBEGIN = 300;
  public static final int klEND = 301;
  public static final int k__LINE__ = 302;
  public static final int k__FILE__ = 303;
  public static final int k__ENCODING__ = 304;
  public static final int kDO_LAMBDA = 305;
  public static final int tIDENTIFIER = 306;
  public static final int tFID = 307;
  public static final int tGVAR = 308;
  public static final int tIVAR = 309;
  public static final int tCONSTANT = 310;
  public static final int tCVAR = 311;
  public static final int tLABEL = 312;
  public static final int tCHAR = 313;
  public static final int tUPLUS = 314;
  public static final int tUMINUS = 315;
  public static final int tUMINUS_NUM = 316;
  public static final int tPOW = 317;
  public static final int tCMP = 318;
  public static final int tEQ = 319;
  public static final int tEQQ = 320;
  public static final int tNEQ = 321;
  public static final int tGEQ = 322;
  public static final int tLEQ = 323;
  public static final int tANDOP = 324;
  public static final int tOROP = 325;
  public static final int tMATCH = 326;
  public static final int tNMATCH = 327;
  public static final int tDOT = 328;
  public static final int tDOT2 = 329;
  public static final int tDOT3 = 330;
  public static final int tAREF = 331;
  public static final int tASET = 332;
  public static final int tLSHFT = 333;
  public static final int tRSHFT = 334;
  public static final int tCOLON2 = 335;
  public static final int tCOLON3 = 336;
  public static final int tOP_ASGN = 337;
  public static final int tASSOC = 338;
  public static final int tLPAREN = 339;
  public static final int tLPAREN2 = 340;
  public static final int tRPAREN = 341;
  public static final int tLPAREN_ARG = 342;
  public static final int tLBRACK = 343;
  public static final int tRBRACK = 344;
  public static final int tLBRACE = 345;
  public static final int tLBRACE_ARG = 346;
  public static final int tSTAR = 347;
  public static final int tSTAR2 = 348;
  public static final int tAMPER = 349;
  public static final int tAMPER2 = 350;
  public static final int tTILDE = 351;
  public static final int tPERCENT = 352;
  public static final int tDIVIDE = 353;
  public static final int tPLUS = 354;
  public static final int tMINUS = 355;
  public static final int tLT = 356;
  public static final int tGT = 357;
  public static final int tPIPE = 358;
  public static final int tBANG = 359;
  public static final int tCARET = 360;
  public static final int tLCURLY = 361;
  public static final int tRCURLY = 362;
  public static final int tBACK_REF2 = 363;
  public static final int tSYMBEG = 364;
  public static final int tSTRING_BEG = 365;
  public static final int tXSTRING_BEG = 366;
  public static final int tREGEXP_BEG = 367;
  public static final int tWORDS_BEG = 368;
  public static final int tQWORDS_BEG = 369;
  public static final int tSTRING_DBEG = 370;
  public static final int tSTRING_DVAR = 371;
  public static final int tSTRING_END = 372;
  public static final int tLAMBDA = 373;
  public static final int tLAMBEG = 374;
  public static final int tNTH_REF = 375;
  public static final int tBACK_REF = 376;
  public static final int tSTRING_CONTENT = 377;
  public static final int tINTEGER = 378;
  public static final int tIMAGINARY = 379;
  public static final int tFLOAT = 380;
  public static final int tRATIONAL = 381;
  public static final int tREGEXP_END = 382;
  public static final int tSYMBOLS_BEG = 383;
  public static final int tQSYMBOLS_BEG = 384;
  public static final int tDSTAR = 385;
  public static final int tSTRING_DEND = 386;
  public static final int tLABEL_END = 387;
  public static final int tLOWEST = 388;
  public static final int yyErrorCode = 256;

  /** number of final state.
    */
  protected static final int yyFinal = 1;

  /** parser tables.
      Order is mandated by <i>jay</i>.
    */
  protected static final short[] yyLhs = {
//yyLhs 635
    -1,   140,     0,   133,   134,   134,   134,   134,   135,   143,
   135,    37,    36,    38,    38,    38,    38,    44,   144,    44,
   145,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    31,    31,    40,    40,    40,    40,
    40,    40,    45,    32,    32,    59,    59,   147,   110,   139,
    43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
    43,   111,   111,   122,   122,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,    71,    71,   100,   100,   101,
   101,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,     6,
     6,    30,    30,    30,     7,     7,     7,     7,     7,   115,
   115,   116,   116,    61,   148,    61,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    73,    76,    76,    76,    76,    53,    57,    57,
   125,   125,   125,   125,   125,    51,    51,    51,    51,    51,
   150,    55,   104,   103,   103,    79,    79,    79,    79,    35,
    35,    70,    70,    70,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,   151,    42,   152,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,    42,   154,   156,
    42,   157,   158,    42,    42,    42,   159,   160,    42,   161,
    42,   163,   164,    42,   165,    42,   166,    42,   167,   168,
    42,    42,    42,    42,    42,    46,   153,   153,   153,   155,
   155,    49,    49,    47,    47,   124,   124,   126,   126,    84,
    84,   127,   127,   127,   127,   127,   127,   127,   127,   127,
    91,    91,    91,    91,    90,    90,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    68,    68,    67,    67,    67,   119,   119,   118,   118,
   128,   128,   169,   121,    65,    65,   120,   120,   170,   109,
    58,    58,    58,    58,    22,    22,    22,    22,    22,    22,
    22,    22,    22,   171,   108,   172,   108,    74,    48,    48,
   113,   113,    75,    75,    75,    50,    50,    52,    52,    28,
    28,    28,    15,    16,    16,    16,    17,    18,    19,    25,
    25,    81,    81,    27,    27,    87,    87,    85,    85,    26,
    26,    88,    88,    80,    80,    86,    86,    20,    20,    21,
    21,    24,    24,    23,   173,    23,   174,   175,    23,    62,
    62,    62,    62,     2,     1,     1,     1,     1,    29,    33,
    33,    34,    34,    34,    34,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,    63,
    63,    54,   176,    54,    54,    69,   177,    69,    92,    92,
    92,    92,    89,    89,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    64,    64,    64,    64,    64,   132,
   132,   132,   132,     9,     9,   117,   117,    82,    82,   138,
    93,    93,    94,    94,    95,    95,    96,    96,   136,   136,
   137,   137,    60,   123,   102,   102,    83,    83,    11,    11,
    13,    13,    12,    12,   107,   106,   106,    14,   178,    14,
    97,    97,    98,    98,    99,    99,    99,    99,     3,     3,
     3,     4,     4,     4,     4,     5,     5,     5,    10,    10,
   141,   141,   146,   146,   129,   130,   149,   149,   149,   162,
   162,   142,   142,    78,   105,
    }, yyLen = {
//yyLen 635
     2,     0,     2,     2,     1,     1,     3,     2,     1,     0,
     5,     4,     2,     1,     1,     3,     2,     1,     0,     5,
     0,     4,     3,     3,     3,     2,     3,     3,     3,     3,
     3,     4,     1,     3,     3,     6,     5,     5,     5,     5,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     2,     1,     1,     1,     1,     1,     4,     0,     5,     1,
     2,     3,     4,     5,     4,     5,     2,     2,     2,     2,
     2,     1,     3,     1,     3,     1,     2,     3,     5,     2,
     4,     2,     4,     1,     3,     1,     3,     2,     3,     1,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     4,     3,     3,     3,     3,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     4,     3,     3,     3,     3,     2,     1,     1,
     1,     2,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     5,
     3,     5,     6,     5,     5,     5,     5,     4,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     4,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     2,     3,     3,     3,     3,     3,
     6,     1,     1,     1,     2,     4,     2,     3,     1,     1,
     1,     1,     2,     4,     2,     1,     2,     2,     4,     1,
     0,     2,     2,     2,     1,     1,     2,     3,     4,     1,
     1,     3,     4,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     0,     3,     0,     4,
     3,     3,     2,     3,     3,     1,     4,     3,     1,     5,
     4,     3,     2,     1,     2,     2,     6,     6,     0,     0,
     7,     0,     0,     7,     5,     4,     0,     0,     9,     0,
     6,     0,     0,     8,     0,     5,     0,     6,     0,     0,
     9,     1,     1,     1,     1,     1,     1,     1,     2,     1,
     1,     1,     5,     1,     2,     1,     1,     1,     3,     1,
     3,     1,     4,     6,     3,     5,     2,     4,     1,     3,
     4,     2,     2,     1,     2,     0,     6,     8,     4,     6,
     4,     2,     6,     2,     4,     6,     2,     4,     2,     4,
     1,     1,     1,     3,     1,     4,     1,     4,     1,     3,
     1,     1,     0,     3,     4,     1,     3,     3,     0,     5,
     2,     4,     5,     5,     2,     4,     4,     3,     3,     3,
     2,     1,     4,     0,     5,     0,     5,     5,     1,     1,
     6,     0,     1,     1,     1,     2,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     2,     3,     3,     3,     3,
     3,     0,     3,     1,     2,     3,     3,     0,     3,     3,
     3,     3,     3,     0,     3,     0,     3,     0,     2,     0,
     2,     0,     2,     1,     0,     3,     0,     0,     5,     1,
     1,     1,     1,     2,     1,     1,     1,     1,     3,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     4,     2,     3,     0,     3,     4,     2,
     2,     1,     2,     0,     6,     8,     4,     6,     4,     6,
     2,     4,     6,     2,     4,     2,     4,     1,     0,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     3,     1,
     2,     1,     2,     1,     1,     3,     1,     3,     1,     1,
     2,     1,     3,     3,     1,     3,     1,     3,     1,     1,
     2,     1,     1,     1,     2,     2,     0,     1,     0,     4,
     1,     2,     1,     3,     3,     2,     4,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     1,     0,     1,     2,     2,     0,     1,     1,     1,
     1,     1,     2,     0,     0,
    }, yyDefRed = {
//yyDefRed 1087
     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   328,   331,     0,     0,     0,   353,   354,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     9,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   453,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   477,   479,   481,     0,     0,   412,   529,
   530,   501,   504,   502,   503,     0,     0,   450,    59,   295,
     0,   454,   296,   297,     0,   298,   299,   294,   451,    32,
    46,   449,   499,     0,     0,     0,     0,     0,     0,   302,
     0,    54,     0,     0,    85,     0,     4,   300,   301,     0,
     0,    71,     0,     2,     0,     5,     0,     7,   351,   352,
   315,     0,     0,   511,   510,   512,   513,     0,     0,   515,
   514,   516,     0,   507,   506,     0,   509,     0,     0,     0,
     0,   132,     0,   355,     0,   303,     0,   344,   186,   197,
   187,   210,   183,   203,   193,   192,   208,   191,   190,   185,
   211,   195,   184,   198,   202,   204,   196,   189,   205,   212,
   207,     0,     0,     0,     0,   182,   201,   200,   213,   214,
   215,   216,   217,   181,   188,   179,   180,     0,     0,     0,
     0,   136,     0,   171,   172,   168,   149,   150,   151,   158,
   155,   157,   152,   153,   173,   174,   159,   160,   598,   165,
   164,   148,   170,   167,   166,   162,   163,   156,   154,   146,
   169,   147,   175,   161,   346,   137,     0,   597,   138,   206,
   199,   209,   194,   176,   177,   178,   134,   135,   140,   139,
   142,     0,   141,   143,     0,     0,     0,     0,     0,     0,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   629,   630,     0,     0,     0,   631,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   365,   366,     0,     0,     0,
     0,     0,   477,     0,     0,   275,    69,     0,     0,     0,
   602,   279,    70,    68,     0,    67,     0,     0,   430,    66,
     0,   623,     0,     0,    20,     0,     0,     0,   238,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   263,     0,     0,     0,   600,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   254,    50,   253,   496,   495,   497,
   493,   494,     0,     0,     0,     0,     0,     0,     0,     0,
   325,     0,     0,     0,     0,     0,   455,   435,   433,   324,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   418,   420,     0,     0,     0,   618,   619,
     0,     0,    87,     0,     0,     0,     0,     0,     0,     3,
     0,   424,     0,   322,     0,   500,     0,   129,     0,   131,
     0,   532,   339,   531,     0,     0,     0,     0,     0,     0,
   348,   144,     0,     0,     0,     0,   305,    12,     0,     0,
   357,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   632,     0,     0,     0,     0,     0,     0,
   336,   605,   286,   282,     0,   607,     0,     0,   276,   284,
     0,   277,     0,   317,     0,   281,   271,   270,     0,     0,
     0,     0,   321,    49,    22,    24,    23,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   310,     0,     0,
   307,   313,     0,   627,   264,     0,   266,   314,   601,     0,
    89,     0,     0,     0,     0,     0,   486,   484,   498,   483,
   480,   456,   478,   457,   458,   482,   459,   460,   463,     0,
   469,   470,     0,   564,   561,   560,   559,   562,   569,   578,
     0,     0,   589,   588,   593,   592,   579,     0,     0,     0,
     0,   586,   415,     0,     0,     0,   557,   576,     0,   541,
   567,   563,     0,     0,     0,   465,   466,     0,   471,   472,
     0,     0,     0,    26,    27,    28,    29,    30,    47,    48,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   613,     0,
     0,   614,   428,     0,     0,     0,     0,   427,     0,   429,
     0,   611,   612,     0,    40,     0,     0,    45,    44,     0,
    41,   285,     0,     0,     0,     0,     0,    88,    33,    42,
   289,     0,    34,     0,     6,    57,    61,     0,   534,     0,
     0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   443,     0,     0,   444,     0,
     0,   363,    15,     0,   358,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   335,   360,   329,   359,   332,     0,
     0,     0,     0,     0,     0,     0,   604,     0,     0,     0,
   283,   603,   316,   624,     0,     0,   267,   320,    21,     0,
     0,    31,     0,     0,     0,   309,     0,     0,     0,     0,
     0,     0,     0,     0,   487,     0,   462,   464,   474,     0,
     0,   367,     0,   369,     0,     0,     0,   590,   594,     0,
   555,     0,     0,   413,     0,   550,     0,   553,     0,   539,
   580,     0,   540,   570,   468,   476,   404,     0,   402,     0,
   401,     0,     0,     0,     0,     0,   269,     0,   425,   268,
     0,     0,   426,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    86,     0,     0,     0,     0,   342,     0,     0,
   432,   345,   599,     0,     0,     0,   349,   145,     0,     0,
     0,   446,   364,     0,    11,   448,     0,   361,     0,     0,
     0,     0,     0,     0,     0,   334,     0,     0,     0,     0,
     0,     0,   606,   288,   278,     0,   319,    10,   265,    90,
     0,     0,   489,   490,   491,   485,   492,     0,     0,     0,
     0,   566,     0,     0,   582,   565,     0,   542,     0,     0,
     0,     0,   568,     0,   587,     0,   577,   595,     0,     0,
     0,     0,     0,   400,   574,     0,     0,   383,     0,   584,
     0,     0,     0,     0,     0,     0,    36,     0,    37,     0,
    63,    39,     0,    38,     0,    65,     0,   625,   423,   422,
     0,     0,     0,     0,     0,     0,     0,   533,   340,   535,
   347,   537,     0,    19,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   445,
     0,   447,     0,   326,     0,   327,   287,     0,     0,     0,
   337,     0,     0,   368,     0,     0,     0,   370,   414,     0,
     0,   556,   417,   416,     0,   548,     0,   546,     0,   551,
   554,   538,     0,     0,   398,     0,     0,   393,     0,   381,
     0,   396,   403,   382,     0,     0,     0,     0,   436,   434,
     0,   419,    35,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   438,   437,   439,   330,   333,     0,
   488,     0,     0,     0,     0,   410,     0,   408,   411,     0,
     0,     0,     0,     0,     0,   384,   405,     0,     0,   575,
     0,     0,     0,   585,   312,     0,    58,   343,     0,     0,
     0,     0,     0,     0,   440,     0,     0,     0,     0,     0,
   407,   549,     0,   544,   547,   552,     0,   399,     0,   390,
     0,   388,   380,     0,   394,   397,     0,     0,   350,     0,
   362,   338,     0,   409,     0,     0,     0,     0,     0,   545,
   392,     0,   386,   389,   395,     0,   387,
    }, yyDgoto = {
//yyDgoto 179
     1,   360,    67,    68,   674,   637,   131,   229,   631,   865,
   420,   568,   569,   570,   216,    69,    70,    71,    72,    73,
   363,   362,    74,   540,   365,    75,    76,   549,    77,    78,
   132,    79,    80,    81,    82,   659,   236,   237,   238,   239,
    84,    85,    86,    87,   240,   256,   319,   827,  1005,   828,
   820,   496,   824,   639,   442,   305,    89,   788,    90,    91,
   571,   231,   855,   258,   572,   573,   881,   778,   779,   680,
   650,    93,    94,   297,   472,   687,   329,   259,   241,   498,
   369,   367,   574,   575,   752,   373,   375,    97,    98,   760,
   974,  1025,   867,   577,   884,   885,   578,   335,   499,   300,
    99,   531,   886,   488,   301,   489,   769,   579,   433,   414,
   666,   100,   101,   455,   260,   232,   233,   580,  1016,   862,
   763,   370,   326,   889,   287,   500,   753,   754,  1017,   493,
   794,   218,   581,   103,   104,   105,   582,   583,   584,   136,
     2,   265,   266,   316,   453,   507,   494,   806,   683,   524,
   306,   328,   519,   461,   268,   706,   838,   269,   839,   714,
  1009,   670,   462,   667,   916,   447,   449,   682,   922,   371,
   626,   592,   591,   745,   744,   851,   669,   681,   448,
    }, yySindex = {
//yySindex 1087
     0,     0, 18193, 19482, 21146, 21530, 17631, 17967, 18322, 20634,
 20634,  7942,     0,     0, 21274, 18579, 18579,     0,     0, 18579,
  -167,  -151,     0,     0,     0,     0,    79, 17855,   203,     0,
  -100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0, 20762, 20762,  1293,   -25, 18451, 20634, 18966, 19353,  5102,
 20762, 20890, 17743,     0,     0,     0,   244,   268,     0,     0,
     0,     0,     0,     0,     0,   289,   298,     0,     0,     0,
   -32,     0,     0,     0,  -103,     0,     0,     0,     0,     0,
     0,     0,     0,  1574,   292, 17527,     0,    68,    -3,     0,
  -114,     0,    30,   308,     0,   321,     0,     0,     0, 21402,
   366,     0,   105,     0,   187,     0,  -108,     0,     0,     0,
     0,  -167,  -151,     0,     0,     0,     0,   162,   203,     0,
     0,     0,     0,     0,     0,     0,     0,  1293, 20634,   305,
 18322,     0,    70,     0,     1,     0,  -108,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   473,     0,     0, 19610, 18322,   341,   348,   187,  1574,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   304,   292,   700,     7,   296,   511,
   306,   700,     0,     0,   187,   364,   596,     0, 20634, 20634,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   357,   624,     0,     0,     0,   391, 20762, 20762,
 20762, 20762,     0, 20762, 17527,     0,     0,   338,   637,   639,
     0,     0,     0,     0,  6535,     0, 18579, 18579,     0,     0,
  8070,     0, 20634,   -80,     0, 19738,   329, 18322,     0,   714,
   375,   378,   365, 18451,   380,     0,   203,   292,   203,   372,
     0,   191,   227,   338,     0,   367,   227,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   420,
 21658,   734,     0,   690,     0,     0,     0,     0,     0,     0,
     0,     0,   -16,   676,   808,   416,   360,   825,   363,  -179,
     0,  2507,   368,  1014,   371,   224,     0,     0,     0,     0,
 20634, 20634, 20634, 20634, 19610, 20634, 20634, 20762, 20762, 20762,
 20762, 20762, 20762, 20762, 20762, 20762, 20762, 20762, 20762, 20762,
 20762, 20762, 20762, 20762, 20762, 20762, 20762, 20762, 20762, 20762,
 20762, 20762, 20762,     0,     0,  2991,  3075, 18579,     0,     0,
  5613, 20890,     0, 19866, 18451, 17330,   695, 19866, 20890,     0,
  4622,     0,   392,     0,   415,     0,   292,     0,     0,     0,
   187,     0,     0,     0,  3486,  3576, 18579, 18322, 20634,   421,
     0,     0,  1574,   399, 19994,   499,     0,     0, 17458,   365,
     0, 18322,   504,  3993,  4077, 18579, 20762, 20762, 20762, 18322,
   364, 20122,   509,     0,   189,   189,     0,  5485,  5558, 18579,
     0,     0,     0,     0,   404,     0, 20762, 18708,     0,     0,
 19095,     0,   203,     0,   437,     0,     0,     0,   739,   740,
   203,    93,     0,     0,     0,     0,     0, 17967, 20634, 17527,
 18193,   426,  3993,  4077, 20762, 20762,   203,     0,     0,   203,
     0,     0, 19224,     0,     0, 19353,     0,     0,     0,     0,
     0,   745, 21993, 22048, 18579, 21658,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
     0,     0,   758,     0,     0,     0,     0,     0,     0,     0,
  1302,  2554,     0,     0,     0,     0,     0,   738,   494,   497,
   769,     0,     0,  -101,   774,   776,     0,     0,   778,     0,
     0,     0,   524,   788, 20762,     0,     0,   160,     0,     0,
   804,   -60,   -60,     0,     0,     0,     0,     0,     0,     0,
   375,  3145,  3145,  3145,  3145,  2451,  2451,  4155,  3654,  3145,
  3145,  2652,  2652,  1438,  1438,   375,  1900,   375,   375,   -49,
   -49,  2451,  2451,  1983,  1983,  4490,   -60,   500,     0,   502,
  -151,     0,     0,   503,     0,   506,  -151,     0,     0,     0,
   203,     0,     0,  -151,     0, 17527, 20762,     0,     0,  6046,
     0,     0,   783,   814,   203, 21658,   815,     0,     0,     0,
     0,     0,     0,  6630,     0,     0,     0,   187,     0, 20634,
 18322,  -151,     0,     0,  -151,     0,   203,   605,    93,  2554,
 18322,  2554, 18079, 17967, 18193,     0,     0,   539,     0, 18322,
   618,     0,     0,   323,     0,   547,   557,   560,   565,   203,
  6046,   499,   643,   693,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   203, 20634, 20762,     0, 20762,   338,   639,
     0,     0,     0,     0, 18708, 19095,     0,     0,     0,    93,
   541,     0,   375, 17527,     0,     0,   227, 21658,     0,     0,
     0,     0,   203,   745,     0,   910,     0,     0,     0,  1302,
  1053,     0,   864,     0,   203,   203, 20762,     0,     0,  3165,
     0, 18322, 18322,     0,  2554,     0,  2554,     0,   -94,     0,
     0,   358,     0,     0,     0,     0,     0,  1290,     0, 18322,
     0, 18322,   851, 18322, 20890, 20890,     0,   392,     0,     0,
 20890, 20890,     0,   392,   580,   583,    68,  -103,     0, 20762,
 20890, 20250,     0,   745, 21658, 20762,   -60,     0,   187,   664,
     0,     0,     0,   203,   668,   187,     0,     0,   574, 21786,
   700,     0,     0, 18322,     0,     0, 20634,     0,   682, 20762,
 20762, 20762, 20762,   617,   689,     0, 20378, 18322, 18322, 18322,
     0,   189,     0,     0,     0,   913,     0,     0,     0,     0,
     0, 18322,     0,     0,     0,     0,     0,   203,  1468,   922,
  2170,     0,   629,   916,     0,     0,   937,     0,   729,   632,
   954,   956,     0,   962,     0,   937,     0,     0,   788,   947,
   973,   203,   975,     0,     0,   977,   988,     0,   675,     0,
   788, 21914,   772,   701, 20762,   773,     0, 17527,     0, 17527,
     0,     0, 17527,     0, 17527,     0, 20890,     0,     0,     0,
 17527, 20762,     0,   745, 17527, 18322, 18322,     0,     0,     0,
     0,     0,   421,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   728,   784,     0,     0,
 18322,     0,   700,     0, 20762,     0,     0,    99,   807,   812,
     0, 19095,   708,     0,  1036,  1468,  1206,     0,     0,  1549,
  3165,     0,     0,     0,  3165,     0,  2554,     0,  3165,     0,
     0,     0, 21914,  3165,     0,   742,  2566,     0,   -94,     0,
  2566,     0,     0,     0,     0,     0,   771,   834,     0,     0,
 17527,     0,     0, 17527,     0,   748,   837, 18322,     0, 22103,
 22158, 18579,   341, 18322,     0,     0,     0,     0,     0, 18322,
     0,  1468,  1036,  1468,  1054,     0,   262,     0,     0,   937,
  1070,   937,   937,   834,  1073,     0,     0,  1078,  1081,     0,
   788,  1084,  1073,     0,     0, 22213,     0,     0,   865,     0,
     0,     0,     0,   203,     0,   323,   868,  1036,  1468,  1549,
     0,     0,  3165,     0,     0,     0,  3165,     0,  3165,     0,
  2566,     0,     0,  3165,     0,     0,     0,     0,     0,     0,
     0,     0,  1036,     0,   937,  1073,  1090,  1073,  1073,     0,
     0,  3165,     0,     0,     0,  1073,     0,
    }, yyRindex = {
//yyRindex 1087
     0,     0,   215,     0,     0,     0,     0,     0,   616,     0,
     0,   866,     0,     0,     0, 14578, 14699,     0,     0, 14818,
  4903,  4402, 15058, 15179, 15298, 15419, 21018,     0, 20506,     0,
     0, 15538, 15659, 15778,  5264,  3400, 15899, 16018,  5393, 16139,
     0,     0,     0,     0,     0,   150,    61,   795,   791,   130,
     0,     0,  1083,     0,     0,     0,  1186,   265,     0,     0,
     0,     0,     0,     0,     0,  1365,   282,     0,     0,     0,
 10105,     0,     0,     0, 10237,     0,     0,     0,     0,     0,
     0,     0,     0,    77, 13311, 16835, 10346, 16889,     0,     0,
 16931,     0, 16258,     0,     0,     0,     0,     0,     0,   193,
     0,     0,     0,     0,    75,     0, 18837,     0,     0,     0,
     0, 10454,  8361,     0,     0,     0,     0,     0,   817,     0,
     0,     0,  6886,     0,     0,  7028,     0,     0,     0,     0,
   150,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   930,   985,  1093,  1348,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1413,  1708,  1761,
  1820,     0,  1874,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0, 17239,     0,     0,     0,   219,    47,     0,   501,   642,
     0,     0,  8474,  8601,  8841,  8950,  9058,  9190,  9299,  2269,
  9407,  9539,  2398,  9648,     0, 17219,     0,     0,  9888,     0,
     0,     0,     0,     0,   866,     0,   883,     0,     0,     0,
   723,  1103,  1121,  1139,  1190,  1255,  1335,  1921,  1501,  1503,
  2607,  1515,     0,     0,  1655,     0,     0,     0,     0,     0,
     0,     0,     0,     0, 14434,     0,     0, 16488, 16619, 16619,
     0,     0,     0,     0,   829,     0,     0,    63,     0,     0,
   829,     0,     0,     0,     0,     0,     0,    86,     0,     0,
 10695, 10586, 16379,   150,     0,   166,   829,    90,   829,     0,
     0,   830,   830,     0,     0,     0,   811,  1762,  1971,  2134,
  2155,  2171,  5267,  5452,  1460,  5897,  6398,  1812,  6878,     0,
     0,     0,  7289,   216,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   -93,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    81,     0,     0,
     0,     0,     0,     0,   150,   247,   330,     0,     0,     0,
    78,     0, 16656,     0,     0,     0,   190,     0,  7415,     0,
     0,     0,     0,     0,     0,     0,    81,   616,     0,   796,
     0,     0,   946,     0,   603,   462,     0,     0,  1740,  9997,
     0,   718,  7544,     0,     0,    81,     0,     0,     0,   585,
     0,     0,     0,     0,     0,     0,  1789,     0,     0,    81,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   829,     0,     0,     0,     0,     0,   124,   124,
   829,   829,     0,     0,     0,     0,     0,     0,     0, 13499,
    86,     0,     0,     0,     0,     0,   829,     0,    40,   829,
     0,     0,   832,     0,     0,   -69,     0,     0,     0,  7418,
     0,   331,     0,     0,    81,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   172,     0,     0,     0,     0,     0,    58,    60,     0,
    76,     0,     0,     0,    76,    76,     0,     0,   106,     0,
     0,     0,    64,   106,    80,     0,     0,     0,     0,     0,
     0,  7673,  7813,     0,     0,     0,     0,     0,     0,     0,
 10803, 12640, 12727, 12816, 12913, 12185, 12303, 13000, 13273, 13090,
 13186, 13363, 13403, 11619, 11728, 10935, 11848, 11044, 11152, 11393,
 11511, 12426, 12543, 11968, 12077,  1126,  7673,  5765,     0,  5894,
  4774,     0,     0,  6266,  3772,  6395, 18837,     0,  3901,     0,
   854,     0,     0,  6756,     0, 13584,     0,     0,     0, 17258,
     0,     0,     0,     0,   829,     0,   352,     0,     0,     0,
     0,   797,     0,  2077,     0,     0,     0,     0,     0,     0,
   616,  9756,  7157,  7286,     0,     0,   854,     0,   829,    95,
   616,   223,     0,     0,    86,     0,   327,   736,     0,   721,
   935,     0,     0,   935,     0,  2770,  2899,  3271,  4273,   854,
 14492,   935,     0,     0,     0,     0,     0,     0,     0,  3108,
  3609,  4110,   586,   854,     0,     0,     0,     0, 16530, 16619,
     0,     0,     0,     0,   209,   210,     0,     0,     0,   829,
     0,     0, 11270, 13669,   120,     0,   830,     0,  1932,  1961,
  2097,   299,   854,   483,     0,     0,     0,     0,     0,     0,
   165,     0,   177,     0,   829,    23,     0,     0,     0,     0,
     0,   102,    86,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    22,     0,   102,
     0,    86,     0,   102,     0,     0,     0, 16743,     0,     0,
     0,     0,     0, 16780, 14939,     0, 16969,  8724, 17019,     0,
     0,     0,     0,   592,     0,     0,  7813,     0,     0,     0,
     0,     0,     0,   829,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   102,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  8233,     0,     0,     0,   597,   102,   102,
  2112,     0,     0,     0,     0,   124,     0,     0,     0,     0,
   555,    86,     0,     0,     0,     0,     0,   829,     0,   192,
     0,     0,     0,   -51,     0,     0,    76,     0,     0,     0,
    76,    76,     0,    76,     0,    76,     0,     0,   106,   115,
   146,    22,   146,     0,     0,   157,   146,     0,     0,     0,
   157,   127,     0,     0,     0,     0,     0, 13754,     0, 13839,
     0,     0, 13924,     0, 14009,     0,     0,     0,     0,     0,
 14094,     0, 17056,   607, 14179,    86,   616,     0,     0,     0,
     0,     0,   796,     0,   688,   828,   888,   982,  1356,  1440,
  1490,  1008,  1610,  1705,  1131,  2027,     0,     0,  2117,     0,
   616,     0,     0,     0,     0,     0,     0,   935,     0,     0,
     0,   214,     0,     0,   197,     0,   198,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   158,     0,     0,     0,
     0,     0,     0,     0,   981,   991,     0,   136,     0,     0,
 14264,     0,     0, 14349, 17137,     0,     0,   616,  2135,     0,
     0,    81,    47,   718,     0,     0,     0,     0,     0,   102,
     0,     0,   220,     0,   230,     0,   -27,     0,     0,    76,
    76,    76,    76,   152,   146,     0,     0,   146,   146,     0,
   157,   146,   146,     0,     0,     0,     0,     0,     0,  1618,
  1930,  2113,   694,   854,     0,   935,     0,   233,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1215,  1161,     0,  1317,
     0,     0,   235,     0,    76,   146,   146,   146,   146,     0,
     0,     0,     0,     0,     0,   146,     0,
    }, yyGindex = {
//yyGindex 179
     0,     0,     4,     0,  -401,     0,   -57,     2,    -4,   496,
   987,     0,     0,  -116,     0,     0,     0,  1134,     0,     0,
   914,  1153,     0,   890,     0,     0,     0,   853,     0,    34,
  1219,  -394,   -34,     0,   109,     0,  1113,  -429,     0,    36,
   806,  1520,     8,    11,   770,    -5,   139,  -435,     0,   184,
     0,    94,     0,    15,     0,   -11,  1225,   589,     0,     0,
  -672,     0,     0,   843,  -395,     0,     0,     0,  -382,   311,
   -82,   -71,    -9,  1573,  -446,     0,     0,   112,    -2,   273,
     0,     0,  6025,   471,  -761,     0,     0,     0,     0,  -522,
  1906,   467,  -322,   480,   278,     0,     0,     0,    18,  -465,
     0,  -476,   275,  -252,  -423,     0,  -551,  7694,   -73,   468,
  -164,  1252,   -10,   270,   966,     0,   -23,  -581,     0,  -659,
     0,     0,  -190,  -810,     0,  -396,  -728,   527,   243,   310,
  -620,     0,  -790,  -404,     0,    39,     0,  1864,  1863,   703,
     0,    59,    24,     0,     0,     0,   -19,     0,     0,  -281,
     0,     0,     0,  -245,     0,  -431,     0,     0,     0,     0,
     0,     0,    74,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    };
  protected static final short[] yyTable = {
//yyTable 22599
    96,   379,   215,   215,   314,   261,   264,   312,   214,   315,
   309,   228,   133,   133,   630,   636,   469,   355,   677,   643,
   690,   640,   133,   215,   702,   721,   295,   295,   426,   647,
   295,   228,   772,   299,   299,   325,   308,   299,    83,    83,
   353,   230,   107,   671,   708,   330,   334,   491,   215,   576,
   676,   526,   765,   767,   361,   528,   810,   133,   746,   743,
   721,   230,   630,   636,   720,   332,   336,   720,   565,   699,
   591,   306,   439,   633,   581,   620,   671,     8,   621,   833,
   263,   622,   622,   713,    86,   267,   543,     8,   417,   311,
   571,   633,   446,   840,   874,   432,   633,   954,   465,   434,
   308,    72,   565,   311,   591,   558,   730,   133,   581,   296,
   302,   671,   633,   303,    95,    95,   596,   565,   888,   591,
    95,   431,   850,   581,   571,   564,   285,   308,   430,   262,
    74,   671,   957,   516,   634,   543,     8,   573,   742,   571,
    83,    88,    88,   134,   134,   633,   572,    88,   257,   257,
   257,   431,   321,   283,   257,   257,   385,    95,   257,   564,
   633,   633,   583,   429,    86,   596,   755,   596,   391,  1018,
  1033,   573,   377,   304,   564,   378,    73,   377,   267,   803,
   572,    72,   558,   872,    88,   257,   573,   371,   351,   307,
   257,    83,   774,   551,  1012,   572,   583,   263,   552,   263,
   341,   523,   376,    75,   761,   385,   443,   379,   374,   633,
   781,   583,   558,   311,   418,   633,   596,   391,   558,   272,
   274,   419,   975,   559,   273,   633,    81,    71,   504,   633,
   377,   558,   307,   558,   654,   522,   435,   523,   351,   576,
   372,   809,    95,   375,   783,   373,   262,   491,   262,   341,
  1033,   814,  1047,   378,    75,   564,   565,    79,   378,  1018,
   721,   317,   458,   474,   475,   776,   834,   257,   387,    88,
   452,   525,   311,   762,   633,   628,   366,    81,   633,   530,
   818,   558,   558,   957,   813,   322,   815,  1072,   298,   298,
   406,   566,   298,   628,   874,   505,   506,   457,   777,   402,
   368,   720,   720,   404,   405,   497,  1049,   406,    79,   107,
   441,   441,   267,   325,   622,   295,   441,   295,   295,    72,
   331,   372,   299,   470,   299,   415,   440,   971,   913,   444,
   374,   622,   416,    53,   979,   463,   445,   442,   267,   983,
    76,    84,   464,   107,   961,   660,    95,    95,   965,   967,
   413,   969,   422,   970,   536,   537,   538,   576,   133,   576,
   107,   539,    77,   565,   622,   591,   633,   421,   689,   581,
   471,   285,   685,    88,    88,   593,   594,   595,   596,   872,
   622,   543,   423,   385,   386,   571,   442,   644,   675,   648,
   311,    76,    84,   658,   662,   872,   536,   537,   492,   565,
   495,   591,   306,   539,   633,   581,   647,   257,   257,    83,
   950,   596,   638,    77,   325,   497,   656,   543,   591,   310,
   597,   571,   581,  1069,   915,   633,   441,   427,   295,    95,
   632,   308,   565,   133,   591,    95,   558,   620,   581,     8,
   621,   638,   428,   257,   497,   257,   257,   596,   633,   257,
   543,   257,   688,   691,   571,   848,    88,   295,   837,   632,
   638,    74,    88,   497,   530,   634,    83,   844,   634,   664,
   705,    83,    75,   564,   638,   872,   295,   497,   632,  1062,
   596,   633,   633,   633,   728,   573,   721,   996,   633,   351,
   295,   633,   632,    82,   572,    81,    95,  1051,  1053,  1054,
  1055,  1006,   310,   215,   385,   719,   378,    73,    96,   638,
   583,   228,  1004,   558,   668,   596,   391,   451,   371,   257,
   257,   257,   257,    88,   257,   257,    79,   632,   720,   638,
   536,   537,   497,   376,    75,   652,    95,   539,   379,   374,
   736,   230,    95,   133,    82,   295,    83,   632,   707,   707,
   272,   274,  1079,   272,   274,   273,   257,    81,   273,    95,
   257,   377,   257,    88,   351,   103,   257,   257,  1038,    88,
    95,   372,   467,    95,   375,   940,   373,   298,   107,   298,
    18,    95,   385,   386,   530,   257,    88,   257,    79,   780,
   780,   826,   689,   844,   442,   633,   589,    88,   671,   103,
    88,   590,    80,   454,   257,  1043,   782,   633,    88,    76,
    84,   437,   456,   633,   459,   438,   103,    78,   257,   787,
   502,   795,    95,   900,   780,   793,   633,   311,   789,   905,
   107,    77,   796,   466,   311,   471,   518,   473,   520,   612,
   107,   789,   473,   468,   633,   786,   432,   257,   870,    88,
   873,   792,    17,    80,   475,   473,   633,   795,   786,   475,
   817,   880,   633,   133,   808,   442,   849,   476,    78,   789,
   480,    76,    84,   257,   351,   633,   486,   311,   215,   215,
   795,   487,    96,   490,   816,   821,   786,   228,   825,   792,
   510,   691,   387,    77,   795,   514,   653,  1003,   116,   691,
   653,    17,   515,   263,   126,   106,   106,   564,   565,   841,
   263,   106,   106,   106,   106,   479,   521,   230,   106,   106,
    83,   517,   106,   795,   909,   633,   633,   653,   633,   527,
   529,   633,   546,   530,   535,   550,   863,   836,   665,   657,
   585,   807,   845,   588,   703,   133,   633,   116,   106,   106,
   896,   898,   262,   126,   106,   508,   901,   903,   863,   262,
   684,   679,    82,   620,   620,   620,   648,    97,   689,   620,
   620,   694,   620,   704,   536,   537,   541,   633,   723,   511,
   633,   539,    95,   724,   725,   311,   536,   537,   731,   737,
   748,   715,    95,   539,   351,   633,    95,   290,   544,   756,
   757,    95,   722,   758,   780,   465,   536,   290,   257,    88,
   726,   727,   133,   759,   511,   255,   255,   255,   764,    88,
   766,   942,   768,    88,    82,   534,   734,   133,    88,   735,
   770,   106,   771,   106,   103,   432,   775,   784,   115,   785,
   790,   285,   620,   791,   800,    92,    92,   135,   135,   633,
  1020,    92,   327,   257,   633,   536,   290,   284,   801,   804,
  1027,   633,   863,   620,  1031,   126,   633,   567,   633,   811,
   633,    80,   992,    95,    95,  1001,   351,   819,   633,   633,
   633,   823,   917,   432,   829,   633,    78,   115,    92,   921,
   432,    95,   352,    95,   830,    95,   103,   831,   117,   133,
    88,    88,   832,   847,    17,    17,    17,   835,   860,   894,
    17,    17,   652,    17,   311,   707,   432,   906,    88,   510,
    88,   311,    88,   257,   257,   446,   612,   907,   918,   257,
   257,   939,   920,    80,   436,    95,   923,   106,   106,   257,
   206,   633,   352,   351,  1076,   691,   943,   117,    78,    95,
    95,    95,   477,   945,   944,   116,    16,   951,   937,   478,
   460,   126,    88,    95,   802,   257,   955,   460,   102,   102,
   958,   106,   106,    92,   102,   959,    88,    88,    88,   512,
   133,   960,   633,    17,   633,   633,   633,   633,   812,   206,
    88,   505,   118,   962,   963,   199,   638,  1050,   964,   497,
   966,   508,   116,   633,    17,    16,   968,   106,   972,   106,
   106,   102,   295,   106,   632,   106,   511,   973,   110,   976,
   106,   978,   311,   511,   795,   505,   106,    95,    95,   311,
   987,   638,   980,   982,   612,   508,   988,   991,   998,   846,
   505,   118,   512,   691,   199,   257,   536,   537,   541,   513,
   508,   511,    95,   539,    88,    88,   751,   567,   511,   290,
   290,   290,   532,   989,   861,   290,   290,   110,   290,   533,
  1010,  1007,   505,   513,   255,   255,  1008,    92,    92,    88,
  1011,  1034,   508,   106,   106,   106,   106,   106,   106,   106,
   290,   290,   290,   290,   290,   115,   102,   858,  1048,   505,
  1026,  1037,   536,   209,   536,   536,   536,   536,   536,    95,
  1036,  1023,   999,   536,  1052,    95,   501,  1056,   503,  1000,
   106,    95,  1058,   919,   106,  1060,   106,   106,  1063,  1068,
   106,   106,  1071,   106,  1081,   536,    88,   620,   290,   633,
   257,   113,    88,   536,   536,   536,   536,    96,    88,   106,
   106,   106,   209,   633,   621,   117,   510,   622,   324,   290,
    92,   106,   444,   510,   106,    98,    92,   953,   106,  1035,
   622,   311,   106,   626,   626,   567,   628,   567,   536,   537,
   543,   536,   106,    99,   622,   539,   255,   255,   255,   255,
   113,   598,   599,   352,   510,   536,   537,   547,   622,   633,
   102,   102,   539,   450,   376,   311,   484,   364,    16,    16,
    16,   106,   512,   106,    16,    16,   512,    16,   852,   853,
   311,   854,   508,   512,   137,   615,   587,    92,   692,  1070,
   513,   217,   797,   997,   101,   871,   206,   106,   206,   206,
   206,   206,   206,   324,   883,   751,   859,   206,   876,   118,
  1013,  1028,   311,   542,   678,   545,  1029,   548,   511,   615,
   567,   608,   567,   548,   908,   511,   286,    92,   352,   206,
   206,   609,  1044,    92,   615,   110,   857,   206,   206,   206,
   206,   515,     0,   102,     0,    59,    60,    16,   608,   102,
    92,   199,  1073,   199,   199,   199,   199,   199,     0,   100,
   311,    92,   199,     0,    92,     0,   615,     0,    16,   505,
   513,     0,    92,   510,   729,   206,   505,   513,     0,   508,
   510,   608,     0,     0,   199,   199,   508,   122,     0,     0,
     0,   609,   199,   199,   199,   199,   505,     0,     0,   505,
     0,     0,   608,   505,     0,     0,   514,     0,   608,   508,
   102,     0,   609,    92,   751,     0,   751,     0,   194,   553,
     0,   554,   555,   556,   557,     0,   120,     0,     0,   608,
   199,     0,   106,   106,   542,     0,   122,     0,   352,   102,
     0,     0,   115,   106,   536,   537,   586,   106,     0,     0,
   102,   539,   106,     0,     0,     0,   102,     0,   113,   209,
   117,   209,   209,   209,   209,   209,     0,   194,   432,     0,
   209,   609,     0,   102,     0,   120,     0,   106,   118,     0,
     0,   512,     0,   176,   102,     0,   516,   102,   512,     0,
   511,   510,   209,   209,     0,   102,   324,     0,   510,   747,
   209,   209,   209,   209,     0,     0,     0,   515,     0,   512,
   119,   751,  1014,   479,   479,   479,   512,     0,     0,   508,
   479,     0,   567,     0,   106,   106,   508,   513,     0,   120,
    91,   609,   176,     0,   513,   255,   102,   747,   209,     0,
     0,     0,   106,     0,   106,     0,   106,   106,   106,   311,
     0,     0,   609,   106,   106,   615,   311,     0,   352,   119,
   121,   612,     0,   106,    91,     0,     0,   751,     0,   751,
     0,     0,   553,    92,   554,   555,   556,   557,   515,   311,
   255,    91,     0,    92,     0,   515,   106,    92,     0,   106,
     0,   514,    92,     0,   119,   294,   294,   324,     0,   294,
   106,   106,   106,   615,   751,    93,     0,    92,     0,   121,
   615,   505,     0,     0,   106,   611,   461,   461,   461,    95,
     0,   318,   320,   461,     0,     0,     0,   294,   294,     0,
   354,   356,     0,   615,   693,     0,   615,     0,     0,     0,
   352,   516,   701,   514,   122,     0,     0,     0,   856,     0,
   514,     0,   507,     0,   506,     0,   879,   432,   554,   555,
   556,   557,   558,     0,    92,    92,   509,   559,   553,   106,
   554,   555,   556,   557,   121,     0,     0,     0,   106,   106,
   112,   333,    92,   120,    92,     0,    92,     0,   123,   560,
     0,     0,   255,     0,     0,     0,   102,   562,   563,   564,
   565,   749,     0,   106,     0,   432,   102,   352,     0,   750,
   102,     0,   432,     0,   194,   102,   194,   194,   194,   194,
   194,     0,   938,   516,     0,   194,    92,     0,     0,   112,
   516,    61,    62,    63,    64,   566,   513,   123,   432,     0,
    92,    92,    92,   513,   515,     0,     0,   194,   194,     0,
     0,   515,     0,     0,    92,   194,   194,   194,   194,   109,
   106,   507,     0,     0,   106,     0,   106,   119,     0,   611,
     0,     0,   106,     0,     0,   111,     0,     0,   177,   176,
     0,   176,   176,   176,   176,   176,     0,   102,   102,     0,
   176,     0,     0,   194,   135,   467,   467,   467,     0,    91,
   608,   515,   467,     0,     0,   102,   303,   102,   515,   102,
     0,     0,   176,   176,     0,   387,     0,   121,    92,    92,
   176,   176,   176,   176,   111,     0,     0,   177,   514,     0,
     0,   178,    97,     0,   553,   514,   554,   555,   556,   557,
   112,     0,   111,    92,     0,     0,   402,     0,   505,   102,
   404,   405,   406,   407,   114,   505,   506,     0,   176,     0,
   608,    91,   822,   102,   102,   102,    97,   749,   294,   294,
   294,   356,     0,   294,     0,   135,     0,   102,   516,     0,
   178,   608,    94,    97,   294,   516,   294,   294,     0,   507,
   134,   506,     0,   108,     0,   509,   507,     0,   506,     0,
    92,     0,     0,   509,     0,     0,    92,     0,     0,     0,
   509,     0,    92,   511,     0,  1015,    94,   554,   555,   556,
   557,   481,   482,   483,     0,     0,   485,   380,   381,   382,
   383,   384,     0,    94,   868,   869,     0,   112,     0,   134,
   312,   102,   102,     0,   135,   123,     0,     0,     0,     0,
     0,     0,   892,     0,   893,     0,   895,     0,   611,     0,
     0,     0,     0,   508,     0,     0,   102,   600,   601,   602,
   603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
   613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
   623,   624,   625,   135,   128,     0,   941,   294,   507,     0,
   125,   645,   104,   649,     0,   507,   611,   294,   663,     0,
   947,   948,   949,   611,     0,     0,     0,     0,   611,     0,
     0,     0,     0,   102,   952,    91,   294,     0,     0,   102,
     0,   106,   111,     0,   294,   102,   104,     0,     0,   611,
     0,    96,     0,   303,     0,   294,   645,   700,   663,   125,
   303,   294,     0,   104,     0,     0,   651,     0,     0,   294,
   661,     0,   621,   621,   621,   106,   294,   294,   621,   621,
   294,   621,   505,     0,   177,    96,   177,   177,   177,   177,
   177,   612,   106,   611,     0,   177,     0,   686,   995,     0,
     0,     0,    96,   506,   732,   733,   514,   114,     0,     0,
   506,    97,   294,   514,   651,   294,     0,   177,   177,     0,
     0,     0,   612,  1002,   294,   177,   177,   177,   177,   716,
   718,     0,   510,   333,     0,     0,     0,   178,   127,   178,
   178,   178,   178,   178,     0,     0,     0,   220,   178,     0,
     0,   621,     0,     0,     0,     0,   114,   220,     0,   516,
   511,    94,   609,   177,     0,   718,   516,   511,   333,     0,
   178,   178,   621,    97,   294,     0,     0,   105,   178,   178,
   178,   178,     0,     0,     0,     0,  1045,   312,   509,     0,
     0,   220,  1046,   124,   312,     0,   134,   128,   134,   134,
   134,   134,   134,     0,     0,   220,   220,   134,     0,     0,
   508,   105,     0,     0,    98,   127,   178,   508,   505,     0,
     0,     0,   609,    94,     0,   505,   103,   773,   105,   134,
   134,     0,     0,     0,     0,    99,   294,   134,   134,   134,
   134,     0,   124,   609,     0,     0,   128,     0,    98,     0,
   135,   101,   135,   135,   135,   135,   135,     0,   615,     0,
     0,   135,     0,     0,   127,    98,     0,   125,     0,    99,
   110,   608,   508,   432,   615,   134,     0,     0,   303,   508,
   612,   104,   611,   135,   135,   101,    99,   387,     0,   798,
     0,   135,   135,   135,   135,   512,   312,     0,     0,     0,
     0,     0,   101,   400,   401,   294,     0,   294,     0,     0,
   106,   612,     0,     0,   294,   294,   513,     0,   402,   505,
    96,     0,   404,   405,   406,   407,   505,     0,   612,   135,
   611,   608,   515,     0,     0,   612,     0,   611,     0,   505,
   612,     0,   611,   104,     0,     0,   294,     0,     0,   505,
     0,     0,   608,     0,     0,     0,     0,     0,   842,   612,
   843,   612,     0,   611,   114,     0,   612,   718,   333,   510,
   387,   612,   106,     0,   897,   899,   510,     0,     0,     0,
   902,   904,    96,   505,     0,     0,   400,   401,     0,   910,
   700,   294,   612,     0,     0,   914,     0,   505,   505,   864,
   110,   402,   505,   403,     0,   404,   405,   406,   407,   220,
   220,   220,     0,     0,   220,   220,   220,     0,   220,   897,
   899,   902,   904,     0,     0,   509,   294,     0,   220,   220,
   505,     0,   509,     0,     0,     0,     0,   220,   220,     0,
   220,   220,   220,   220,   912,     0,   105,   615,     0,     0,
   124,     0,   220,     0,   128,     0,     0,     0,     0,     0,
     0,   122,   432,   615,     0,     0,     0,     0,   508,     0,
     0,     0,   127,     0,     0,     0,     0,     0,   508,   946,
     0,     0,     0,    98,   990,   220,     0,     0,   220,     0,
     0,   220,     0,   220,     0,   615,   993,     0,     0,     0,
     0,   294,   615,     0,    99,     0,     0,   611,   105,   220,
   432,   615,   508,     0,     0,   303,     0,   432,   615,     0,
   101,   220,   303,   611,     0,     0,   508,   508,   615,   113,
     0,   508,   512,   312,   993,     0,     0,     0,     0,   512,
   312,   294,     0,   432,   615,    98,   553,     0,   554,   555,
   556,   557,     0,   513,   994,     0,     0,     0,     0,   508,
   513,     0,     0,     0,     0,     0,    99,     0,     0,   515,
     0,     0,     0,     0,     0,     0,   515,     0,     0,   749,
     0,     0,   101,     0,     0,     0,     0,   956,     0,     0,
     0,   294,     0,     0,   333,     0,   608,   608,   608,     0,
   608,   505,   505,   505,   608,   608,   505,   505,   505,   608,
   505,   608,   608,   608,   608,   608,   608,   608,     0,   608,
   505,   505,   608,   608,   608,   608,   608,   608,   608,   505,
   505,   608,   505,   505,   505,   505,   505,     0,   608,     0,
     0,   608,   608,   608,   505,   608,   608,   608,   608,   608,
   608,   608,   608,   608,   608,   608,   505,   505,   505,   505,
   505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
     0,     0,   505,   505,   505,   608,   517,   505,   608,   608,
   505,   608,   608,   505,   608,   505,   608,   505,   608,   505,
   608,   505,   505,   505,   505,   505,   505,   505,   608,   505,
   608,   505,   878,   608,   608,   608,   608,   608,   608,     0,
   891,   890,   608,   505,   608,   608,     0,   608,   608,   608,
   608,    94,   608,   608,   608,   609,   609,   609,     0,   609,
   508,   508,   508,   609,   609,   508,   508,   508,   609,   508,
   609,   609,   609,   609,   609,   609,   609,     0,   609,   508,
   508,   609,   609,   609,   609,   609,   609,   609,   508,   508,
   609,   508,   508,   508,   508,   508,     0,   609,   508,     0,
   609,   609,   609,   508,   609,   609,   609,   609,   609,   609,
   609,   609,   609,   609,   609,   508,   508,   508,   508,   508,
   508,   508,   508,   508,   508,   508,   508,   508,   508,     0,
     0,   508,   508,   508,   609,   520,   508,   609,   609,   508,
   609,   609,   508,   609,   508,   609,   508,   609,   508,   609,
   508,   508,   508,   508,   508,   508,   508,   609,   508,   609,
   508,     0,   609,   609,   609,   609,   609,   609,   387,     0,
   611,   609,   508,   609,   609,     0,   609,   609,   609,   609,
   611,   609,   609,   609,   400,   401,     0,     0,   977,     0,
     0,     0,   981,     0,     0,     0,     0,     0,     0,   402,
     0,   403,     0,   404,   405,   406,   407,     0,     0,   410,
     0,   411,     0,   553,   611,   554,   555,   556,   557,   558,
     0,     0,     0,     0,   559,     0,     0,     0,   611,   611,
     0,   123,     0,   611,     0,     0,   891,   890,     0,   891,
   890,   891,  1030,   891,   890,     0,   560,   561,     0,     0,
     0,     0,     0,     0,   562,   563,   564,   565,     0,     0,
   553,   611,   554,   555,   556,   557,   558,     0,     0,     0,
     0,   559,   879,     0,   554,   555,   556,   557,   558,     0,
     0,     0,     0,   559,     0,     0,   113,   609,     0,     0,
     0,     0,   566,   560,     0,     0,     0,     0,     0,   612,
     0,   562,   563,   564,   565,   560,     0,     0,     0,   612,
     0,     0,     0,   562,   563,   564,   565,     0,     0,   891,
   890,   891,   890,   891,   890,     0,   891,   890,     0,     0,
  1057,     0,     0,  1059,  1061,   508,     0,  1064,  1065,   566,
     0,     0,   508,   612,   891,   890,     0,   609,     0,     0,
     0,   566,     0,     0,     0,     0,     0,   612,   612,     0,
   125,     0,   612,     0,     0,     0,     0,     0,   609,   387,
   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     0,  1080,  1082,  1083,  1084,   400,   401,     0,     0,     0,
   612,  1086,     0,     0,     0,     0,     0,     0,     0,     0,
   402,     0,   403,     0,   404,   405,   406,   407,   408,   409,
   410,     0,   411,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   611,   611,   611,
     0,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,     0,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,     0,   611,
     0,     0,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,     0,     0,   611,   611,   611,   611,     0,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,     0,   611,   611,   611,   611,   611,   611,
     0,     0,     0,   611,   611,   611,   611,     0,   611,   611,
   611,   611,   104,   611,   611,   611,   612,   612,   612,     0,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,     0,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,     0,   612,   611,
     0,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     0,     0,   612,   612,   612,   612,     0,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,     0,   612,   612,   612,   612,   612,   612,     0,
     0,   615,   612,   612,   612,   612,     0,   612,   612,   612,
   612,   615,   612,   612,   612,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   627,   628,     0,
     0,   629,     0,     0,     0,   183,   184,     0,   185,   186,
   187,   188,   189,   190,   191,   615,     0,   192,   193,     0,
     0,     0,   194,   195,   196,   197,     0,     0,     0,   615,
   615,   307,   124,     0,   615,     0,     0,     0,   199,   200,
     0,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,     0,     0,   212,     0,     0,     0,     0,     0,
     0,     0,   615,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   213,     0,     0,     0,
     0,   633,   634,     0,     0,   635,     0,   123,   611,   183,
   184,     0,   185,   186,   187,   188,   189,   190,   191,     0,
   304,   192,   193,     0,     0,     0,   194,   195,   196,   197,
   304,     0,     0,     0,     0,   307,     0,     0,     0,     0,
     0,     0,   199,   200,     0,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   611,     0,   212,     0,
     0,     0,     0,   611,   304,     0,     0,     0,   611,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   304,   304,
   213,     0,   387,   304,     0,     0,     0,   392,   393,   611,
     0,   553,     0,   554,   555,   556,   557,   558,   400,   401,
     0,     0,   559,     0,     0,     0,     0,     0,     0,     0,
     0,   304,     0,   402,     0,   403,     0,   404,   405,   406,
   407,   408,   409,   410,   560,   411,     0,     0,     0,     0,
     0,     0,     0,     0,   564,   565,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   611,   611,
   611,     0,   611,   615,   615,   615,   611,   611,   615,   615,
   615,   611,   615,   611,   611,   611,   611,   611,   611,   611,
   566,   615,   615,   615,   611,   611,   611,   611,   611,   611,
   611,   615,   615,   611,   615,   615,   615,   615,   615,     0,
   611,     0,     0,   611,   611,   611,   615,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   615,   615,
   615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
   615,   615,     0,     0,   615,   615,   615,   611,     0,   615,
   611,   611,   615,   611,   611,   615,   611,   615,   611,   615,
   611,   615,   611,   615,   615,   615,   615,   615,   615,   615,
   611,   615,   615,   615,     0,   611,   611,   611,   611,   611,
   611,     0,     0,     0,   611,   615,   611,   611,     0,   611,
   611,   611,   611,   106,   611,   611,   611,   610,   610,   610,
     0,   610,   304,   304,   304,   610,   610,   304,   304,   304,
   610,   304,   610,   610,   610,   610,   610,   610,   610,     0,
   610,   304,   304,   610,   610,   610,   610,   610,   610,   610,
   304,   304,   610,   304,   304,   304,   304,   304,     0,   610,
   612,     0,   610,   610,   610,   304,   610,   610,   610,   610,
   610,   610,   610,   610,   610,   610,   610,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,     0,     0,   304,   304,   304,   610,     0,   304,   610,
   610,   304,   610,   610,   304,   610,   304,   610,   304,   610,
   304,   610,   304,   304,   304,   304,   304,   304,   304,   610,
   304,   610,   304,     0,   610,   610,   610,   610,   610,   610,
     0,     0,   616,   610,   304,   610,   610,     0,   610,   610,
   610,   610,   616,   610,   610,   610,     0,     0,     0,     0,
     0,     0,   641,   628,     0,     0,   642,     0,     0,     0,
   183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     0,     0,   192,   193,     0,     0,   616,   194,   195,   196,
   197,     0,     0,     0,     0,     0,   307,     0,     0,     0,
   616,   616,     0,   199,   200,   616,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,     0,     0,   212,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   616,     0,     0,     0,     0,     0,     0,
     0,   213,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   672,   634,     0,     0,   673,     0,   125,   612,
   183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     0,   617,   192,   193,     0,     0,     0,   194,   195,   196,
   197,   617,     0,     0,     0,     0,   307,     0,     0,     0,
     0,     0,     0,   199,   200,     0,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   612,     0,   212,
     0,     0,     0,     0,   612,   617,     0,     0,     0,   612,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   617,
   617,   213,     0,     0,   617,     0,     0,     0,     0,     0,
   612,   387,   388,   389,   390,   391,   392,   393,   394,     0,
   396,   397,     0,     0,     0,     0,     0,   400,   401,     0,
     0,     0,   617,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   402,     0,   403,     0,   404,   405,   406,   407,
   408,   409,   410,     0,   411,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   613,
   613,   613,     0,   613,   616,   616,   616,   613,   613,   616,
   616,   616,   613,   616,   613,   613,   613,   613,   613,   613,
   613,     0,   616,   616,   616,   613,   613,   613,   613,   613,
   613,   613,   616,   616,   613,   616,   616,   616,   616,   616,
     0,   613,     0,     0,   613,   613,   613,   616,   613,   613,
   613,   613,   613,   613,   613,   613,   613,   613,   613,   616,
   616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
   616,   616,   616,     0,     0,   616,   616,   616,   613,     0,
   616,   613,   613,   616,   613,   613,   616,   613,   616,   613,
   616,   613,   616,   613,   616,   616,   616,   616,   616,   616,
   616,   613,   616,   616,   616,     0,   613,   613,   613,   613,
   613,   613,     0,     0,     0,   613,   616,   613,   613,     0,
   613,   613,   613,   613,   105,   613,   613,   613,   614,   614,
   614,     0,   614,   617,   617,   617,   614,   614,   617,   617,
   617,   614,   617,   614,   614,   614,   614,   614,   614,   614,
     0,   617,   617,   617,   614,   614,   614,   614,   614,   614,
   614,   617,   617,   614,   617,   617,   617,   617,   617,     0,
   614,   615,     0,   614,   614,   614,   617,   614,   614,   614,
   614,   614,   614,   614,   614,   614,   614,   614,   617,   617,
   617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
   617,   617,     0,     0,   617,   617,   617,   614,     0,   617,
   614,   614,   617,   614,   614,   617,   614,   617,   614,   617,
   614,   617,   614,   617,   617,   617,   617,   617,   617,   617,
   614,   617,   617,   617,     0,   614,   614,   614,   614,   614,
   614,     0,     0,   311,   614,   617,   614,   614,     0,   614,
   614,   614,   614,   311,   614,   614,   614,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   695,
   628,     0,     0,   696,     0,     0,     0,   183,   184,     0,
   185,   186,   187,   188,   189,   190,   191,   311,     0,   192,
   193,     0,     0,     0,   194,   195,   196,   197,     0,     0,
     0,   311,   311,   307,   126,     0,   311,     0,     0,     0,
   199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,     0,     0,   212,     0,     0,     0,
     0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   213,     0,
     0,     0,     0,   697,   634,     0,     0,   698,     0,   124,
   615,   183,   184,     0,   185,   186,   187,   188,   189,   190,
   191,     0,   431,   192,   193,     0,     0,     0,   194,   195,
   196,   197,   431,     0,     0,     0,     0,   307,     0,     0,
     0,     0,     0,     0,   199,   200,     0,   201,   202,   203,
   204,   205,   206,   207,   208,   209,   210,   211,   615,     0,
   212,     0,     0,     0,     0,   615,   431,     0,     0,     0,
   611,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   431,   213,     0,     0,   431,     0,     0,     0,     0,
     0,   615,   387,   388,   389,   390,   391,   392,   393,     0,
     0,   396,   397,     0,     0,     0,     0,     0,   400,   401,
     0,     0,     0,   431,     0,     0,     0,     0,     0,     0,
   311,     0,     0,   402,     0,   403,     0,   404,   405,   406,
   407,   408,   409,   410,     0,   411,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   612,   612,   612,     0,   612,   311,   311,   311,   612,   612,
   311,   311,   311,   612,   311,   612,   612,   612,   612,   612,
   612,   612,     0,   412,   311,   311,   612,   612,   612,   612,
   612,   612,   612,   311,   311,   612,   311,   311,   311,   311,
   311,     0,   612,     0,     0,   612,   612,   612,   311,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
   311,   311,   311,   311,     0,     0,   311,   311,   311,   612,
     0,   311,   612,   612,   311,   612,   612,   311,   612,   311,
   612,   311,   612,   311,   612,   311,   311,   311,   311,   311,
   311,   311,   612,   311,     0,   311,     0,   612,   612,   612,
   612,   612,   612,     0,     0,     0,   612,   311,   612,   612,
     0,   612,   612,   612,   612,     0,   612,   612,   612,   280,
   280,   280,     0,   280,   431,   431,   431,   280,   280,   431,
   431,   431,   280,   431,   280,   280,   280,   280,   280,   280,
   280,   473,   431,   431,   431,   280,   280,   280,   280,   280,
   280,   280,   431,   431,   280,   431,   431,   431,   431,   431,
     0,   280,     0,     0,   280,   280,   280,     0,   280,   280,
   280,   280,   280,   280,   280,   280,   280,   280,   280,   431,
   431,   431,   431,   431,   431,   431,   431,   431,   431,   431,
   431,   431,   431,     0,     0,   431,   431,   431,   280,     0,
   431,   280,     0,   431,   280,   280,   431,   280,   431,   280,
   431,   280,   431,   280,   431,   431,   431,   431,   431,   431,
   431,   280,   431,   431,   431,     0,   280,   280,   280,   280,
   280,   280,     0,     0,   633,   280,     0,   280,   280,     0,
   280,   280,   280,   280,   633,   280,   280,   280,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   397,   633,   398,
   399,     0,     0,   400,   401,     0,     0,     0,     0,     0,
     0,     0,     0,   633,     0,     0,     0,   633,   402,     0,
   403,     0,   404,   405,   406,   407,   408,   409,   410,     0,
   411,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   633,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     5,     6,     7,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,    15,    16,    17,
    18,     0,     0,   318,     0,    19,    20,    21,    22,    23,
    24,    25,     0,   318,    26,     0,     0,     0,     0,     0,
    27,    28,    29,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,     0,    40,    41,    42,    43,     0,
     0,     0,     0,     0,     0,     0,     0,   318,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
     0,    45,   318,     0,    46,    47,   318,    48,     0,    49,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,    51,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,   318,    58,     0,    59,    60,     0,
    61,    62,    63,    64,     0,    65,    66,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   280,   280,   280,     0,   280,   633,   633,   633,   280,
   280,   633,   633,   633,   280,   633,   280,   280,   280,   280,
   280,   280,   280,     0,   633,   633,   633,   280,   280,   280,
   280,   280,   280,   280,   633,   633,   280,   633,   633,   633,
   633,   633,     0,   280,     0,     0,   280,   280,   280,     0,
   280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
   280,   633,   633,   633,   633,   633,   633,   633,   633,   633,
   633,   633,   633,   633,   633,     0,     0,   633,   633,   633,
   280,     0,   633,   280,     0,   633,   280,   280,   633,   280,
   633,   280,   633,   280,   633,   280,   633,   633,   633,   633,
   633,   633,   633,   280,   633,   633,   633,     0,   280,   280,
   280,   280,   280,   280,     0,     0,   350,   280,     0,   280,
   280,     0,   280,   280,   280,   280,     0,   280,   280,   280,
   280,   280,   280,     0,   280,   318,   318,   318,   280,   280,
   318,   318,   318,   280,   318,   280,   280,   280,   280,   280,
   280,   280,     0,     0,   318,   318,   280,   280,   280,   280,
   280,   280,   280,   318,   318,   280,   318,   318,   318,   318,
   318,     0,   280,     0,     0,   280,   280,   280,     0,   280,
   280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
   318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
   318,   318,   318,   318,     0,     0,   318,   318,   318,   280,
     0,   318,   280,     0,   318,   280,   280,   318,   280,   318,
   280,   318,   280,   318,   280,   318,   318,   318,   318,   318,
   318,   318,   280,   318,   505,   318,     0,   280,   280,   280,
   280,   280,   280,     0,   505,     0,   280,   100,   280,   280,
     0,   280,   280,   280,   280,     0,   280,   280,   280,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,     0,
     0,   100,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   505,     0,   110,     0,   505,   100,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   505,     0,     0,   514,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,   108,   109,    17,
    18,     0,     0,     0,     0,   110,   111,   112,   337,   338,
   339,   340,     0,   508,   117,     0,     0,     0,     0,     0,
     0,   118,     0,   508,   341,   342,   343,     0,   344,    35,
   345,   346,   347,   348,     0,    40,     0,     0,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    94,   349,     0,
     0,   130,     0,     0,    46,    47,     0,    48,     0,     0,
     0,     0,   508,     0,   113,     0,   508,     0,     0,     0,
     0,     0,   102,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,   508,    65,    66,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   102,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   102,     0,     0,     0,     0,     0,     0,
     0,   608,   608,   608,     0,   608,   505,   505,   505,   608,
   608,     0,   505,   505,   608,   505,   608,   608,   608,   608,
   608,   608,   608,   516,   608,     0,   100,   608,   608,   608,
   608,   608,   608,   608,   505,   505,   608,   505,   505,   505,
   505,   505,     0,   608,     0,     0,   608,   608,   608,     0,
   608,   608,   608,   608,   608,   608,   608,   608,   608,   608,
   608,   505,   505,   505,   505,   505,   505,   505,   505,   505,
   505,   505,   505,   505,   505,   514,     0,   505,   505,   505,
   608,   517,   514,   608,   608,   505,   608,   608,   100,   608,
     0,   608,   505,   608,   505,   608,   505,   505,   505,   505,
   505,   505,   505,   608,   505,   608,   505,     0,   608,   608,
   608,   608,   608,   608,     0,     0,     0,   608,     0,   608,
   608,     0,   608,   608,   608,   608,     0,   608,   608,   608,
   609,   609,   609,     0,   609,   508,   508,   508,   609,   609,
     0,   508,   508,   609,   508,   609,   609,   609,   609,   609,
   609,   609,     0,   609,     0,     0,   609,   609,   609,   609,
   609,   609,   609,   508,   508,   609,   508,   508,   508,   508,
   508,     0,   609,     0,     0,   609,   609,   609,     0,   609,
   609,   609,   609,   609,   609,   609,   609,   609,   609,   609,
   508,   508,   508,   508,   508,   508,   508,   508,   508,   508,
   508,   508,   508,   508,     0,     0,   508,   508,   508,   609,
   520,   102,   609,   609,   508,   609,   609,     0,   609,     0,
   609,   508,   609,   508,   609,   508,   508,   508,   508,   508,
   508,   508,   609,   508,   609,   508,     0,   609,   609,   609,
   609,   609,   609,     0,     0,   611,   609,     0,   609,   609,
     0,   609,   609,   609,   609,   611,   609,   609,   609,     0,
   516,     0,     0,     0,     0,     0,     0,   516,     0,     0,
     0,   709,   628,   102,     0,   710,     0,     0,     0,   183,
   184,     0,   185,   186,   187,   188,   189,   190,   191,   104,
     0,   192,   193,     0,     0,     0,   194,   195,   196,   197,
     0,     0,     0,     0,   611,   307,   123,     0,   611,     0,
     0,     0,   199,   200,     0,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,     0,     0,   212,     0,
     0,     0,     0,     0,     0,     0,   611,     0,     0,     0,
     0,     0,     0,     0,   711,   634,     0,     0,   712,     0,
   213,     0,   183,   184,     0,   185,   186,   187,   188,   189,
   190,   191,     0,     0,   192,   193,     0,     0,     0,   194,
   195,   196,   197,     0,   612,     0,     0,     0,   307,     0,
     0,     0,     0,     0,   612,   199,   200,    93,   201,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,   641,
   628,   212,     0,   642,     0,     0,     0,   183,   184,     0,
   185,   186,   187,   188,   189,   190,   191,     0,   106,   192,
   193,    93,     0,   213,   194,   195,   196,   197,     0,     0,
     0,     0,     0,   612,     0,   125,     0,   612,    93,     0,
   199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,     0,     0,   212,     0,     0,     0,
     0,     0,     0,     0,     0,   612,     0,     0,   507,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   213,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   611,   611,   611,     0,   611,   611,   611,   611,
   611,   611,     0,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,     0,   611,     0,     0,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,     0,   611,     0,     0,   611,   611,   611,
     0,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,     0,     0,   611,   611,
   611,   611,     0,     0,   611,   611,   611,   611,   611,   412,
   611,     0,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   611,   611,   611,   611,   611,     0,   611,
   611,   611,   611,   611,   611,     0,     0,     0,   611,     0,
   611,   611,     0,   611,   611,   611,   611,     0,   611,   611,
   611,   612,   612,   612,     0,   612,   612,   612,   612,   612,
   612,     0,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,     0,   612,     0,    93,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,     0,   612,     0,     0,   612,   612,   612,     0,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   507,     0,   612,   612,   612,
   612,     0,   507,   612,   612,   612,   612,   612,    93,   612,
     0,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   612,   612,   612,   612,   612,     0,   612,   612,
   612,   612,   612,   612,     0,     0,   615,   612,     0,   612,
   612,     0,   612,   612,   612,   612,   615,   612,   612,   612,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   105,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   615,     0,   124,     0,   615,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   799,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   615,     0,     0,
     0,     0,     0,   387,   388,   389,   390,   391,   392,   393,
   394,   395,   396,   397,     0,   398,   399,     0,     0,   400,
   401,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   402,   311,   403,     0,   404,   405,
   406,   407,   408,   409,   410,   311,   411,     0,    92,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   107,
     0,     0,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   311,     0,   126,     0,   311,    92,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   311,     0,     0,   506,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   611,   611,   611,     0,   611,   615,   615,
   615,   611,   611,     0,   615,   615,   611,   615,   611,   611,
   611,   611,   611,   611,   611,   311,   615,     0,     0,   611,
   611,   611,   611,   611,   611,   611,   615,   615,   611,   615,
   615,   615,   615,   615,     0,   611,     0,     0,   611,   611,
   611,     0,   611,   611,   611,   611,   611,   611,   611,   611,
   611,   611,   611,   615,   615,   615,   615,   615,   615,   615,
   615,   615,   615,   615,   615,   615,   615,     0,     0,   615,
   615,   615,   611,     0,     0,   611,   611,   615,   611,   611,
     0,   611,     0,   611,   615,   611,   615,   611,   615,   615,
   615,   615,   615,   615,   615,   611,   615,   615,   615,     0,
   611,   611,   611,   611,   611,   611,     0,     0,     0,   611,
     0,   611,   611,     0,   611,   611,   611,   611,     0,   611,
   611,   611,   612,   612,   612,     0,   612,   311,   311,   311,
   612,   612,     0,   311,   311,   612,   311,   612,   612,   612,
   612,   612,   612,   612,     0,     0,     0,    92,   612,   612,
   612,   612,   612,   612,   612,   311,   311,   612,   311,   311,
   311,   311,   311,   412,   612,     0,     0,   612,   612,   612,
     0,   612,   612,   612,   612,   612,   612,   612,   612,   612,
   612,   612,   311,   311,   311,   311,   311,   311,   311,   311,
   311,   311,   311,   311,   311,   311,   506,     0,   311,   311,
   311,   612,     0,   506,   612,   612,   311,   612,   612,    92,
   612,     0,   612,   311,   612,   311,   612,   311,   311,   311,
   311,   311,   311,   311,   612,   311,   633,   311,     0,   612,
   612,   612,   612,   612,   612,     0,   633,     0,   612,     0,
   612,   612,     0,   612,   612,   612,   612,     0,   612,   612,
   612,     0,     0,     0,   866,     0,     0,     0,     0,     0,
     0,   875,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,   882,     0,     0,    11,     0,    12,    13,    14,
    15,    16,    17,    18,     0,   633,     0,     0,    19,    20,
    21,   242,   243,   244,   245,     0,     0,   117,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   246,   247,   248,
     0,   249,    35,   250,   251,   252,   253,   288,    40,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   254,     0,     0,   130,     0,     0,    46,    47,     0,
    48,     0,   289,     0,   290,     0,    50,     0,    95,     0,
     0,     0,     0,     0,   291,     0,   129,     0,     0,    52,
   292,    54,    55,    56,    57,     0,     0,     0,    58,     0,
    59,    60,     0,    61,    62,    63,    64,     0,    65,    66,
   293,     0,    95,     0,     0,     0,     0,   805,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    95,
     0,     0,     0,     0,     0,   129,     0,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
   399,     0,     0,   400,   401,     0,     0,     0,     0,   509,
     0,     0,     0,     0,     0,     0,     0,   505,   402,     0,
   403,     0,   404,   405,   406,   407,   408,   409,   410,  1019,
   411,  1021,     0,  1022,     0,     0,     0,     0,  1024,     0,
     0,     0,     0,     0,     0,  1032,     0,     0,     0,     0,
     0,     0,     0,   280,   280,   280,     0,   280,   633,   633,
   633,   280,   280,   633,   633,   633,   280,   633,   280,   280,
   280,   280,   280,   280,   280,     0,   633,   633,   130,   280,
   280,   280,   280,   280,   280,   280,   633,   633,   280,   633,
   633,   633,   633,   633,     0,   280,     0,     0,   280,   280,
   280,     0,   280,   280,   280,   280,   280,   280,   280,   280,
   280,   280,   280,     0,     0,     0,     0,  1074,     0,     0,
     0,     0,     0,  1075,   633,  1077,     0,   130,  1078,     0,
     0,   633,   280,     0,     0,   280,     0,   633,   280,   280,
     0,   280,     0,   280,     0,   280,  1085,   280,     0,     0,
     0,     0,     0,     0,     0,   280,     0,   633,   633,   508,
   280,   280,   280,   280,   280,   280,     0,     0,     0,   280,
     0,   280,   280,     0,   280,   280,   280,   280,     0,   280,
   280,   280,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,     0,     0,   129,   129,    95,   129,   129,
   129,   129,   129,   129,   129,     0,   608,   129,     0,   129,
   129,   129,   129,   129,   129,   129,     0,     0,   129,     0,
     0,     0,     0,     0,   129,   129,     0,   129,   129,   129,
   129,     0,   129,   129,   129,   129,   129,   129,     0,   129,
   129,   129,   129,     0,     0,     0,   509,     0,     0,     0,
     0,     0,     0,   509,   505,     0,   129,     0,     0,    95,
     0,   505,   129,     0,     0,   129,   608,     0,   129,   129,
     0,   129,     0,   129,     0,     0,     0,   129,     0,     0,
     0,     0,   129,     0,     0,   129,     0,   608,   615,     0,
   129,   129,   129,   129,   129,   129,     0,     0,     0,   129,
     0,   129,   129,     0,   129,   129,   129,   129,     0,   129,
   129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,     0,   130,   130,   130,   109,
   130,   130,   130,   130,   130,   130,   130,     0,   609,     0,
     0,   130,   130,   130,   130,   130,   130,   130,     0,     0,
   130,     0,     0,     0,     0,     0,   130,   130,     0,   130,
   130,   130,   130,   109,   130,   130,   130,   130,   130,   130,
     0,   130,   130,   130,   130,   130,     0,     0,     0,     0,
   109,     0,     0,     0,     0,     0,   508,     0,     0,     0,
     0,     0,     0,   508,   130,     0,     0,   130,   609,     0,
   130,   130,     0,   130,     0,   130,     0,   311,     0,   130,
   303,     0,     0,     0,   130,     0,     0,   130,     0,   609,
     0,     0,   130,   130,   130,   130,   130,   130,     0,     0,
     0,   130,     0,   130,   130,     0,   130,   130,   130,   130,
     0,   130,   130,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,     0,   130,   129,   129,   108,   129,
   129,   129,   129,   129,   129,   129,     0,   615,     0,     0,
   129,   129,   129,   129,   129,   129,   129,     0,     0,   129,
     0,     0,     0,     0,     0,   129,   129,     0,   129,   129,
   129,   129,   108,   129,   129,   129,   129,   129,   129,     0,
   129,   129,   129,   129,   130,     0,     0,     0,     0,   108,
     0,     0,     0,     0,     0,   615,     0,     0,     0,     0,
     0,     0,   615,   129,     0,     0,   129,   611,     0,   129,
   129,     0,   129,     0,   129,     0,   312,     0,   129,   312,
     0,     0,     0,   129,     0,     0,   129,     0,   615,     0,
     0,   129,   129,   129,   129,   129,   129,     0,     0,     0,
   129,     0,   129,   129,     0,   129,   129,   129,   129,     0,
   129,   129,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,     0,   356,   130,   130,     0,   130,   130,
   130,   130,   130,   130,   130,     0,     0,     0,   109,   130,
   130,   130,   130,   130,   130,   130,     0,     0,   130,     0,
     0,     0,     0,     0,   130,   130,     0,   130,   130,   130,
   130,     0,   130,   130,   130,   130,   130,   130,     0,   130,
   130,   130,   130,   356,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   311,     0,     0,   303,     0,     0,
     0,   311,   130,     0,   303,   130,   612,     0,   130,   130,
   109,   130,     0,   130,     0,     0,     0,   130,     0,     0,
     0,     0,   130,     0,     0,   130,     0,     0,     0,     0,
   130,   130,   130,   130,   130,   130,     0,     0,     0,   130,
     0,   130,   130,     0,   130,   130,   130,   130,     0,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,     0,   633,   130,   130,     0,   130,   130,   130,
   130,   130,   130,   130,     0,     0,     0,   108,   130,   130,
   130,   130,   130,   130,   130,     0,     0,   130,     0,     0,
     0,     0,     0,   130,   130,     0,   130,   130,   130,   130,
     0,   130,   130,   130,   130,   130,   130,     0,   130,   130,
   130,   130,   633,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   312,     0,     0,   312,     0,     0,     0,
   312,   130,     0,   312,   130,     0,     0,   130,   130,   108,
   130,     0,   130,     0,     0,     0,   130,     0,     0,     0,
     0,   130,     0,     0,   130,     0,     0,     0,     0,   130,
   130,   130,   130,   130,   130,     0,     0,     0,   130,     0,
   130,   130,     0,   130,   130,   130,   130,     0,   130,   130,
   356,   356,   356,   356,   356,   356,   356,   356,   356,   356,
   356,     0,   356,   356,   356,   356,   356,   356,   356,   356,
   356,   356,   356,   633,     0,     0,     0,   356,   356,   356,
   356,   356,   356,   356,     0,     0,   356,     0,     0,     0,
     0,     0,   356,   356,     0,   356,   356,   356,   356,     0,
   356,   356,   356,   356,   356,   356,     0,   356,   356,   356,
   356,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   633,     0,     0,     0,     0,     0,     0,     0,
   356,     0,     0,   356,     0,     0,   356,   356,     0,   356,
     0,   356,     0,     0,     0,   356,     0,     0,     0,     0,
     0,     0,     0,   356,     0,     0,     0,     0,   356,   356,
   356,   356,   356,   356,     0,     0,     0,   356,     0,   356,
   356,     0,   356,   356,   356,   356,     0,   356,   356,   633,
   633,   633,   633,   633,   633,     0,     0,   633,   633,   633,
     0,     0,     0,   633,     0,   633,   633,   633,   633,   633,
   633,   633,   263,     0,     0,     0,   633,   633,   633,   633,
   633,   633,   633,     0,     0,   633,     0,     0,     0,     0,
     0,   633,   633,     0,   633,   633,   633,   633,     0,   633,
   633,   633,   633,   633,   633,     0,   633,   633,   633,   633,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   262,     0,     0,     0,     0,     0,     0,     0,   633,
     0,     0,   633,     0,     0,   633,   633,     0,   633,     0,
   633,     0,     0,     0,   633,     0,     0,     0,     0,     0,
     0,     0,   633,     0,     0,     0,     0,   633,   633,   633,
   633,   633,   633,     0,     0,     0,   633,     0,   633,   633,
     0,   633,   633,   633,   633,     0,   633,   633,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   633,
   633,   633,   633,   633,   633,     0,     0,     0,   633,   633,
   311,     0,     0,   633,     0,   633,   633,   633,   633,   633,
   633,   633,     0,     0,     0,     0,   633,   633,   633,   633,
   633,   633,   633,     0,     0,   633,     0,     0,     0,     0,
     0,   633,   633,     0,   633,   633,   633,   633,     0,   633,
   633,   633,   633,   633,   633,     0,   633,   633,   633,   633,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   633,
     0,     0,   633,     0,     0,   633,   633,     0,   633,     0,
   633,     0,     0,     0,   633,     0,     0,     0,     0,     0,
     0,     0,   633,     0,     0,   633,     0,   633,   633,   633,
   633,   633,   633,     0,     0,     0,   633,     0,   633,   633,
     0,   633,   633,   633,   633,     0,   633,   633,     0,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,     0,    19,    20,    21,   242,   243,
   244,   245,     0,   432,    26,     0,     0,     0,     0,     0,
     0,    28,     0,   432,   246,   247,   248,     0,   249,    35,
   250,   251,   252,   253,     0,    40,    41,    42,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   432,   254,     0,
     0,   130,     0,     0,    46,    47,     0,    48,     0,     0,
     0,   432,   432,    50,   122,     0,   432,     0,     0,     0,
     0,    51,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,   432,    65,    66,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,   242,   243,   244,   245,
     0,   431,    26,     0,     0,     0,     0,     0,     0,    28,
     0,   431,   246,   247,   248,     0,   249,    35,   250,   251,
   252,   253,     0,    40,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   431,   254,     0,     0,   130,
     0,     0,    46,    47,     0,    48,     0,     0,     0,   431,
   431,    50,     0,     0,   431,     0,     0,     0,     0,    51,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
     0,     0,     0,    58,     0,    59,    60,     0,    61,    62,
    63,    64,   431,    65,    66,     0,     0,     0,     0,     0,
     0,     0,   877,     0,     0,   877,     0,     0,     0,     0,
     0,   887,     0,     0,   511,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   511,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   432,   432,   432,     0,     0,
   432,   432,   432,     0,   432,     0,     0,     0,     0,     0,
     0,     0,     0,   432,   432,   432,     0,     0,   511,     0,
     0,     0,     0,   432,   432,     0,   432,   432,   432,   432,
   432,     0,   511,   511,     0,   116,     0,   511,   432,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
   432,   432,   432,   432,     0,   511,   432,   432,   432,     0,
     0,   432,     0,     0,   432,     0,     0,   432,     0,   432,
     0,   432,     0,   432,     0,   432,   432,   432,   432,   432,
   432,   432,     0,   432,   432,   432,     0,     0,     0,     0,
     0,   510,     0,     0,     0,     0,     0,   432,     0,     0,
     0,   510,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   431,   431,   431,     0,     0,   431,   431,
   431,     0,   431,     0,     0,     0,     0,     0,     0,     0,
     0,   431,   431,   431,     0,   510,     0,     0,     0,     0,
     0,   431,   431,     0,   431,   431,   431,   431,   431,   510,
   510,     0,   115,     0,   510,     0,   431,   887,     0,     0,
   887,     0,   877,     0,   887,     0,     0,     0,   431,   431,
   431,   431,   431,   431,   431,   431,   431,   431,   431,   431,
   431,   431,   510,     0,   431,   431,   431,     0,     0,   431,
     0,     0,   431,     0,     0,   431,     0,   431,     0,   431,
     0,   431,     0,   431,   431,   431,   431,   431,   431,   431,
     0,   431,   431,   431,   421,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   421,   431,   511,   511,   511,     0,
     0,   511,   511,   511,     0,   511,     0,     0,     0,     0,
   887,     0,   887,     0,   887,   511,   511,   887,     0,     0,
     0,     0,     0,     0,   511,   511,     0,   511,   511,   511,
   511,   511,     0,     0,     0,   887,     0,     0,     0,   511,
     0,     0,     0,   421,     0,     0,     0,     0,     0,     0,
     0,   511,   511,   511,   511,   511,   511,   511,   511,   511,
   511,   511,   511,   511,   511,     0,     0,   511,   511,   511,
     0,   523,   511,     0,     0,   511,     0,     0,   511,     0,
   511,     0,   511,     0,   511,     0,   511,   511,   511,   511,
   511,   511,   511,     0,   511,     0,   511,     0,     0,     0,
     0,   512,     0,     0,     0,     0,     0,     0,   511,     0,
     0,   512,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   510,   510,   510,     0,     0,   510,   510,
   510,     0,   510,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   510,   510,     0,   512,     0,     0,     0,     0,
     0,   510,   510,     0,   510,   510,   510,   510,   510,   512,
   512,     0,   117,     0,   512,     0,   510,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   510,   510,
   510,   510,   510,   510,   510,   510,   510,   510,   510,   510,
   510,   510,   512,     0,   510,   510,   510,     0,   522,   510,
     0,     0,   510,     0,     0,   510,     0,   510,     0,   510,
   513,   510,     0,   510,   510,   510,   510,   510,   510,   510,
   513,   510,     0,   510,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   510,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   421,   421,   421,     0,
     0,   421,   421,   421,   513,   421,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   421,     0,     0,   513,   513,
     0,   118,     0,   513,   421,   421,     0,   421,   421,   421,
   421,   421,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   513,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   421,     0,     0,     0,     0,     0,   515,   421,
     0,     0,     0,     0,     0,   421,     0,     0,   515,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   421,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   515,   512,   512,   512,     0,     0,   512,   512,
   512,     0,   512,     0,     0,     0,   515,   515,     0,   120,
     0,   515,   512,   512,     0,     0,     0,     0,     0,     0,
     0,   512,   512,     0,   512,   512,   512,   512,   512,     0,
     0,     0,     0,     0,     0,     0,   512,     0,     0,   515,
     0,     0,     0,     0,     0,     0,     0,     0,   512,   512,
   512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
   512,   512,     0,     0,   512,   512,   512,     0,   524,   512,
     0,     0,   512,     0,     0,   512,     0,   512,     0,   512,
   514,   512,     0,   512,   512,   512,   512,   512,   512,   512,
   514,   512,     0,   512,     0,     0,     0,     0,     0,     0,
     0,     0,   513,   513,   513,   512,     0,   513,   513,   513,
     0,   513,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   513,   513,     0,   514,     0,     0,     0,     0,     0,
   513,   513,     0,   513,   513,   513,   513,   513,   514,   514,
     0,   119,     0,   514,     0,   513,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   513,   513,   513,
   513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
   513,   514,     0,   513,   513,   513,     0,   525,   513,     0,
     0,   513,     0,     0,   513,     0,   513,     0,   513,   516,
   513,     0,   513,   513,   513,   513,   513,   513,   513,   516,
   513,     0,   513,     0,     0,     0,     0,     0,     0,     0,
   515,   515,   515,     0,   513,   515,   515,   515,     0,   515,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   515,
   515,     0,     0,   516,     0,     0,     0,     0,   515,   515,
     0,   515,   515,   515,   515,   515,     0,   516,   516,     0,
   121,     0,   516,   515,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   515,   515,   515,   515,   515,
   515,   515,   515,   515,   515,   515,   515,   515,   515,     0,
   516,   515,   515,   515,     0,   527,   515,     0,     0,   515,
     0,     0,   515,     0,   515,     0,   515,   507,   515,     0,
   515,   515,   515,   515,   515,   515,   515,   507,   515,     0,
   515,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   515,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   507,   514,   514,   514,     0,     0,   514,   514,   514,
     0,   514,     0,     0,     0,   507,   507,     0,   112,     0,
   507,   514,   514,     0,     0,     0,     0,     0,     0,     0,
   514,   514,     0,   514,   514,   514,   514,   514,     0,     0,
     0,     0,     0,     0,     0,   514,     0,     0,   507,     0,
     0,     0,     0,     0,     0,     0,     0,   514,   514,   514,
   514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
   514,     0,     0,   514,   514,   514,     0,   526,   514,     0,
     0,   514,     0,     0,   514,     0,   514,     0,   514,   506,
   514,     0,   514,   514,   514,   514,   514,   514,   514,   506,
   514,     0,   514,     0,     0,     0,     0,     0,     0,     0,
     0,   516,   516,   516,   514,     0,   516,   516,   516,     0,
   516,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   516,   516,     0,   506,     0,     0,     0,     0,     0,   516,
   516,     0,   516,   516,   516,   516,   516,   506,   506,     0,
   111,     0,   506,     0,   516,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   516,   516,   516,   516,
   516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
   506,     0,   516,   516,   516,     0,   528,   516,     0,     0,
   516,     0,     0,   516,     0,   516,     0,   516,   509,   516,
     0,   516,   516,   516,   516,   516,   516,   516,   509,   516,
     0,   516,     0,     0,     0,     0,     0,     0,     0,   507,
   507,   507,     0,   516,   507,   507,   507,     0,   507,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   507,   507,
     0,     0,   509,     0,     0,     0,     0,   507,   507,     0,
   507,   507,   507,   507,   507,     0,   509,   509,     0,   114,
     0,   509,   507,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   507,   507,   507,   507,   507,   507,
   507,   507,   507,   507,   507,   507,   507,   507,     0,   509,
   507,   507,   507,     0,   519,   507,     0,     0,   507,     0,
     0,   507,     0,   507,     0,   507,   633,   507,     0,   507,
   507,   507,   507,   507,   507,   507,   633,   507,     0,   507,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   507,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   633,   506,   506,   506,     0,     0,   506,   506,   506,     0,
   506,     0,     0,     0,   633,   633,     0,     0,     0,   633,
   506,   506,     0,     0,     0,     0,     0,     0,     0,   506,
   506,     0,   506,   506,   506,   506,   506,     0,     0,     0,
     0,     0,     0,     0,   506,     0,     0,   633,     0,     0,
     0,     0,     0,     0,     0,     0,   506,   506,   506,   506,
   506,   506,   506,   506,   506,   506,   506,   506,   506,   506,
     0,     0,   506,   506,   506,     0,   518,   506,     0,     0,
   506,     0,     0,   506,     0,   506,     0,   506,   303,   506,
     0,   506,   506,   506,   506,   506,   506,   506,   303,   506,
     0,   506,     0,     0,     0,     0,     0,     0,     0,     0,
   509,   509,   509,   506,     0,   509,   509,   509,     0,   509,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   509,
   509,     0,   303,     0,     0,     0,     0,     0,   509,   509,
     0,   509,   509,   509,   509,   509,   303,   303,     0,   128,
     0,   303,     0,   509,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   509,   509,   509,   509,   509,
   509,   509,   509,   509,   509,   509,   509,   509,   509,   303,
     0,   509,   509,   509,     0,   521,   509,     0,     0,   509,
     0,     0,   509,     0,   509,     0,   509,   312,   509,     0,
   509,   509,   509,   509,   509,   509,   509,   312,   509,     0,
   509,     0,     0,     0,     0,     0,     0,     0,   633,   633,
   633,     0,   509,   633,   633,   633,     0,   633,     0,     0,
     0,     0,     0,     0,     0,     0,   633,   633,   633,     0,
     0,   312,     0,     0,     0,     0,   633,   633,     0,   633,
   633,   633,   633,   633,     0,   312,   312,     0,   127,     0,
   312,   633,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   633,   633,   633,   633,   633,   633,   633,
   633,   633,   633,   633,   633,   633,   633,     0,   312,   633,
   633,   633,     0,     0,   633,     0,     0,   633,     0,     0,
   633,     0,   633,     0,   633,   452,   633,     0,   633,   633,
   633,   633,   633,   633,   633,   452,   633,   633,   633,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   633,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   452,
   303,   303,   303,     0,     0,   303,   303,   303,     0,   303,
     0,     0,     0,   452,   452,     0,     0,     0,   452,   303,
   303,     0,     0,     0,     0,     0,     0,     0,   303,   303,
     0,   303,   303,   303,   303,   303,     0,     0,     0,     0,
     0,     0,     0,   303,     0,     0,   452,     0,     0,     0,
     0,     0,     0,     0,     0,   303,   303,   303,   303,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   303,     0,
     0,   303,   303,   303,     0,     0,   303,     0,     0,   303,
     0,     0,   303,     0,   303,     0,   303,   323,   303,     0,
   303,   303,   303,   303,   303,   303,   303,   323,   303,     0,
   303,     0,     0,     0,     0,     0,     0,     0,     0,   312,
   312,   312,   303,     0,   312,   312,   312,     0,   312,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   312,   312,
     0,   323,     0,     0,     0,     0,     0,   312,   312,     0,
   312,   312,   312,   312,   312,   323,   323,     0,     0,     0,
   323,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   312,   312,   312,   312,   312,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   323,     0,
   312,   312,   312,     0,     0,   312,     0,     0,   312,     0,
     0,   312,     0,   312,     0,   312,   261,   312,     0,   312,
   312,   312,   312,   312,   312,   312,   261,   312,     0,   312,
     0,     0,     0,     0,     0,     0,     0,   452,   452,   452,
     0,   312,   452,   452,   452,     0,   452,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   452,   452,     0,     0,
   261,     0,     0,     0,     0,   452,   452,     0,   452,   452,
   452,   452,   452,     0,   261,   261,     0,     0,     0,   261,
   452,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   452,   452,   452,   452,   452,   452,   452,   452,
   452,   452,   452,   452,   452,   452,     0,   355,   452,   452,
   452,     0,     0,   452,     0,     0,   452,     0,     0,   452,
     0,   452,     0,   452,   318,   452,     0,   452,   452,   452,
   452,   452,   452,   452,   318,   452,     0,   452,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   452,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   318,   323,
   323,   323,     0,     0,   323,   323,   323,     0,   323,     0,
     0,     0,   318,   318,     0,     0,     0,   318,   323,   323,
     0,     0,     0,     0,     0,     0,     0,   323,   323,     0,
   323,   323,   323,   323,   323,     0,     0,     0,     0,     0,
     0,     0,   323,     0,     0,   318,     0,     0,     0,     0,
     0,     0,     0,     0,   323,   323,   323,   323,   323,   323,
   323,   323,   323,   323,   323,   323,   323,   323,     0,     0,
   323,   323,   323,     0,     0,   323,     0,     0,   323,     0,
     0,   323,     0,   323,     0,   323,   500,   323,     0,   323,
   323,   323,   323,   323,   323,   323,   500,   323,     0,   323,
     0,     0,     0,     0,     0,     0,     0,     0,   261,   261,
   261,   323,     0,   261,   261,   261,     0,   261,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   261,   261,     0,
   500,     0,     0,     0,     0,     0,   261,   261,     0,   261,
   261,   261,   261,   261,   500,   500,     0,     0,     0,   500,
     0,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   261,   261,   261,   261,   261,   261,   261,
   261,   261,   261,   261,   355,   261,   261,   500,     0,   261,
   261,   355,     0,     0,   261,     0,     0,   261,     0,     0,
   261,     0,   261,     0,   261,   239,   261,     0,   261,   261,
   261,   261,   261,   261,   261,   239,   261,     0,   261,     0,
     0,     0,     0,     0,     0,     0,   318,   318,   318,     0,
   261,   318,   318,   318,     0,   318,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   318,   318,     0,     0,   239,
     0,     0,     0,     0,   318,   318,     0,   318,   318,   318,
   318,   318,     0,   239,   239,     0,     0,     0,   239,   318,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   318,   318,   318,   318,   318,   318,   318,   318,   318,
   318,   318,   318,   318,   318,     0,     0,   318,   318,   318,
     0,     0,   318,     0,     0,   318,     0,     0,   318,     0,
   318,     0,   318,   236,   318,     0,   318,   318,   318,   318,
   318,   318,   318,   236,   318,     0,   318,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   318,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   236,   500,   500,
   500,     0,     0,   500,   500,   500,     0,   500,     0,     0,
     0,   236,   236,     0,     0,     0,   236,   500,   500,     0,
     0,     0,     0,     0,     0,     0,   500,   500,     0,   500,
   500,   500,   500,   500,     0,     0,     0,     0,     0,     0,
     0,   500,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   500,   500,   500,   500,   500,   500,
   500,   500,   500,   500,   500,   500,   500,     0,     0,   500,
   500,   500,     0,     0,   500,     0,     0,   500,     0,     0,
   500,     0,   500,     0,   500,   233,   500,     0,   500,   500,
   500,   500,   500,   500,   500,   233,   500,     0,   500,     0,
     0,     0,     0,     0,     0,     0,     0,   239,   239,   239,
   500,     0,   239,   239,   239,     0,   239,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   239,   239,     0,   233,
     0,     0,     0,     0,     0,   239,   239,     0,   239,   239,
   239,   239,   239,   233,   233,     0,     0,     0,   233,     0,
   239,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,     0,   239,   239,     0,     0,   239,   239,
     0,     0,     0,   239,     0,     0,   239,     0,     0,   239,
     0,   239,     0,   239,   235,   239,     0,   239,   239,   239,
   239,   239,   239,   239,   235,   239,     0,   239,     0,     0,
     0,     0,     0,     0,     0,   236,   236,   236,     0,   239,
   236,   236,   236,     0,   236,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   236,   236,     0,     0,   235,     0,
     0,     0,     0,   236,   236,     0,   236,   236,   236,   236,
   236,     0,   235,   235,     0,     0,     0,   235,   236,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,     0,   236,   236,     0,     0,   236,   236,     0,     0,
     0,   236,     0,     0,   236,     0,     0,   236,     0,   236,
     0,   236,   234,   236,     0,   236,   236,   236,   236,   236,
   236,   236,   234,   236,     0,   236,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   236,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   234,   233,   233,   233,
     0,     0,   233,   233,   233,     0,   233,     0,     0,     0,
   234,   234,     0,     0,     0,   234,   233,   233,     0,     0,
     0,     0,     0,     0,     0,   233,   233,     0,   233,   233,
   233,   233,   233,     0,     0,     0,     0,     0,     0,     0,
   233,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,     0,   233,   233,     0,     0,   233,   233,
   237,     0,     0,   233,     0,     0,   233,     0,     0,   233,
   237,   233,     0,   233,     0,   233,     0,   233,   233,   233,
   233,   233,   233,   233,     0,   233,     0,   233,     0,     0,
     0,     0,     0,     0,     0,     0,   235,   235,   235,   233,
     0,   235,   235,   235,   237,   235,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   235,   235,     0,   237,   237,
     0,     0,     0,   237,   235,   235,     0,   235,   235,   235,
   235,   235,     0,     0,     0,     0,     0,     0,     0,   235,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   235,   235,   235,   235,   235,   235,   235,   235,
   235,   235,     0,   235,   235,     0,     0,   235,   235,     0,
     0,     0,   235,     0,     0,   235,     0,     0,   235,     0,
   235,     0,   235,   231,   235,     0,   235,   235,   235,   235,
   235,   235,   235,   231,   235,     0,   235,     0,     0,     0,
     0,     0,     0,     0,   234,   234,   234,     0,   235,   234,
   234,   234,     0,   234,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   234,   234,     0,     0,   231,     0,     0,
     0,     0,   234,   234,     0,   234,   234,   234,   234,   234,
     0,   231,   231,     0,     0,     0,   231,   234,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
     0,   234,   234,     0,     0,   234,   234,     0,     0,     0,
   234,     0,     0,   234,     0,     0,   234,     0,   234,     0,
   234,     0,   234,     0,   234,   234,   234,   234,   234,   234,
   234,   232,   234,     0,   234,     0,     0,     0,     0,     0,
     0,   232,     0,     0,     0,     0,   234,     0,     0,     0,
     0,     0,   237,   237,   237,     0,     0,   237,   237,   237,
     0,   237,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   237,   237,     0,     0,   232,     0,     0,     0,     0,
   237,   237,     0,   237,   237,   237,   237,   237,     0,   232,
   232,     0,     0,     0,   232,   237,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,     0,   237,
   237,     0,     0,   237,   237,     0,     0,     0,   237,     0,
     0,   237,     0,     0,   237,     0,   237,     0,   237,   255,
   237,     0,   237,   237,   237,   237,   237,   237,   237,   255,
   237,     0,   237,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   237,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   231,   231,   231,     0,     0,
   231,   231,   231,   255,   231,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   231,   231,     0,   255,   255,     0,
     0,     0,   255,   231,   231,     0,   231,   231,   231,   231,
   231,     0,     0,     0,     0,     0,     0,     0,   231,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,     0,   231,   231,     0,     0,   231,   231,   256,     0,
     0,   231,     0,     0,   231,     0,     0,   231,   256,   231,
     0,     0,     0,   231,     0,     0,     0,   231,   231,   231,
   231,   231,     0,   231,     0,   231,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   231,     0,     0,
     0,     0,   256,   232,   232,   232,     0,     0,   232,   232,
   232,     0,   232,     0,     0,     0,   256,   256,     0,     0,
     0,   256,   232,   232,     0,     0,     0,     0,     0,     0,
     0,   232,   232,     0,   232,   232,   232,   232,   232,     0,
     0,     0,     0,     0,     0,     0,   232,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,     0,
   232,   232,     0,     0,   232,   232,     0,     0,   242,   232,
     0,     0,   232,     0,     0,   232,     0,   232,   242,     0,
     0,   232,     0,     0,     0,   232,   232,   232,   232,   232,
     0,   232,     0,   232,     0,     0,     0,     0,     0,     0,
     0,   255,   255,   255,     0,   232,   255,   255,   255,     0,
   255,     0,   242,     0,     0,     0,     0,     0,     0,     0,
   255,   255,     0,     0,     0,     0,   242,   242,     0,   255,
   255,   242,   255,   255,   255,   255,   255,     0,     0,     0,
     0,     0,     0,     0,   255,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,     0,   255,   255,
     0,     0,   255,   255,     0,     0,     0,   255,     0,     0,
   255,     0,     0,   255,     0,   255,     0,     0,   240,   255,
     0,     0,     0,     0,     0,   255,   255,   255,   240,   255,
     0,   255,     0,     0,     0,     0,     0,     0,     0,     0,
   256,   256,   256,   255,     0,   256,   256,   256,     0,   256,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
   256,     0,   240,     0,     0,     0,     0,     0,   256,   256,
     0,   256,   256,   256,   256,   256,   240,   240,     0,     0,
     0,   240,     0,   256,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   256,     0,   256,   256,     0,
     0,   256,   256,     0,     0,     0,   256,     0,     0,   256,
     0,     0,   256,     0,   256,     0,     0,   241,   256,     0,
     0,     0,     0,     0,   256,   256,   256,   241,   256,     0,
   256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   256,     0,     0,     0,     0,     0,     0,     0,
   242,   242,   242,     0,     0,   242,   242,   242,     0,   242,
     0,   241,     0,     0,     0,     0,     0,     0,     0,   242,
   242,     0,     0,     0,     0,   241,   241,     0,   242,   242,
   241,   242,   242,   242,   242,   242,     0,     0,     0,     0,
     0,     0,     0,   242,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,     0,   242,   242,     0,
     0,     0,     0,     0,     0,   245,   242,     0,     0,   242,
     0,     0,   242,     0,   242,   245,     0,     0,   242,     0,
     0,     0,     0,     0,   242,   242,   242,     0,   242,     0,
   242,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   242,     0,     0,     0,     0,     0,     0,   245,
   240,   240,   240,     0,     0,   240,   240,   240,     0,   240,
     0,     0,     0,   245,   245,     0,     0,     0,   245,   240,
   240,     0,     0,     0,     0,     0,     0,     0,   240,   240,
     0,   240,   240,   240,   240,   240,     0,     0,     0,     0,
     0,     0,     0,   240,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,     0,   240,   240,     0,
     0,     0,     0,   247,     0,     0,   240,     0,     0,   240,
     0,     0,   240,   247,   240,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   240,   240,   240,     0,   240,     0,
   240,     0,     0,     0,     0,     0,     0,     0,     0,   241,
   241,   241,   240,     0,   241,   241,   241,   247,   241,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   241,   241,
     0,   247,   247,     0,     0,     0,   247,   241,   241,     0,
   241,   241,   241,   241,   241,     0,     0,     0,     0,     0,
     0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,     0,   241,   241,     0,     0,
     0,     0,     0,     0,     0,   241,     0,     0,   241,     0,
     0,   241,     0,   241,     0,     0,   246,     0,     0,     0,
     0,     0,     0,   241,   241,   241,   246,   241,     0,   241,
     0,     0,     0,     0,     0,     0,     0,   245,   245,   245,
     0,   241,   245,   245,   245,     0,   245,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   245,   245,     0,     0,
   246,     0,     0,     0,     0,   245,   245,     0,   245,   245,
   245,   245,   245,     0,   246,   246,     0,     0,     0,   246,
   245,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,     0,   245,   245,     0,     0,     0,     0,
     0,     0,     0,   245,     0,     0,   245,     0,     0,   245,
     0,   245,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   245,   245,   244,     0,     0,     0,   245,     0,     0,
     0,     0,     0,   244,     0,     0,     0,     0,     0,   245,
     0,     0,     0,     0,     0,   247,   247,   247,     0,     0,
   247,   247,   247,     0,   247,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   247,   247,     0,   244,     0,     0,
     0,     0,     0,   247,   247,     0,   247,   247,   247,   247,
   247,   244,   244,     0,     0,     0,   244,     0,   247,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,     0,   247,   247,     0,     0,     0,     0,     0,     0,
   243,   247,     0,     0,   247,     0,     0,   247,     0,   247,
   243,     0,     0,     0,     0,     0,     0,     0,     0,   247,
   247,     0,     0,     0,     0,   247,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   247,     0,     0,
     0,     0,     0,     0,   243,     0,     0,     0,   246,   246,
   246,     0,     0,   246,   246,   246,     0,   246,   243,   243,
     0,     0,     0,   243,     0,     0,     0,   246,   246,     0,
     0,     0,     0,     0,     0,     0,   246,   246,     0,   246,
   246,   246,   246,   246,     0,     0,     0,   248,     0,     0,
     0,   246,     0,     0,     0,     0,     0,   248,     0,     0,
     0,     0,     0,     0,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,     0,   246,   246,     0,     0,     0,
     0,     0,     0,     0,   246,     0,     0,   246,     0,     0,
   246,   248,   246,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   246,   246,     0,   248,   248,     0,   246,     0,
   248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   246,     0,     0,     0,     0,   244,   244,   244,     0,     0,
   244,   244,   244,     0,   244,     0,   249,     0,     0,     0,
     0,     0,     0,     0,   244,   244,   249,     0,     0,     0,
     0,     0,     0,   244,   244,     0,   244,   244,   244,   244,
   244,     0,     0,     0,     0,     0,     0,     0,   244,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   249,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,     0,   244,   244,   249,   249,     0,     0,     0,   249,
     0,   244,     0,     0,   244,     0,     0,   244,     0,   244,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
   244,     0,   243,   243,   243,   244,     0,   243,   243,   243,
     0,   243,     0,   250,     0,     0,     0,   244,     0,     0,
     0,   243,   243,   250,     0,     0,     0,     0,     0,     0,
   243,   243,     0,   243,   243,   243,   243,   243,     0,     0,
     0,     0,     0,     0,     0,   243,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   250,     0,     0,
     0,     0,     0,     0,   243,   243,     0,     0,     0,   243,
   243,   250,   250,     0,     0,     0,   250,     0,   243,     0,
     0,   243,     0,     0,   243,     0,   243,     0,     0,   248,
   248,   248,     0,     0,   248,   248,   248,     0,   248,     0,
   257,     0,   243,     0,     0,     0,     0,     0,   248,   248,
   257,     0,     0,     0,   243,     0,     0,   248,   248,     0,
   248,   248,   248,   248,   248,     0,     0,     0,     0,     0,
     0,     0,   248,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   257,     0,     0,     0,     0,     0,
     0,   248,   248,     0,     0,     0,   248,   248,   257,   257,
     0,     0,     0,   257,     0,   248,     0,     0,   248,     0,
     0,   248,     0,   248,     0,     0,     0,     0,   249,   249,
   249,     0,     0,   249,   249,   249,     0,   249,     0,   248,
   251,     0,     0,     0,     0,     0,     0,   249,   249,     0,
   251,   248,     0,     0,     0,     0,   249,   249,     0,   249,
   249,   249,   249,   249,     0,     0,     0,     0,     0,     0,
     0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   251,     0,     0,     0,     0,     0,
   249,   249,     0,     0,     0,   249,   249,     0,   251,   251,
     0,     0,     0,   251,   249,     0,     0,   249,     0,     0,
   249,     0,   249,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   250,   250,   250,   249,     0,
   250,   250,   250,     0,   250,     0,   252,     0,     0,     0,
   249,     0,     0,     0,   250,   250,   252,     0,     0,     0,
     0,     0,     0,   250,   250,     0,   250,   250,   250,   250,
   250,     0,     0,     0,     0,     0,     0,     0,   250,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   252,     0,     0,     0,     0,     0,     0,   250,   250,     0,
     0,     0,   250,   250,   252,   252,     0,     0,     0,   252,
     0,   250,     0,     0,   250,     0,     0,   250,     0,   250,
     0,     0,   257,   257,   257,     0,     0,   257,   257,   257,
     0,   257,     0,   258,     0,   250,     0,     0,     0,     0,
     0,   257,   257,   258,     0,     0,     0,   250,     0,     0,
   257,   257,     0,   257,   257,   257,   257,   257,     0,     0,
     0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     0,   258,     0,     0,
     0,    43,     0,     0,   257,   257,     0,     0,     0,   257,
   257,   258,   258,     0,     0,     0,   258,     0,   257,     0,
     0,   257,     0,     0,   257,     0,   257,     0,     0,     0,
     0,     0,   251,   251,   251,     0,     0,   251,   251,   251,
     0,   251,   257,   229,     0,     0,     0,     0,     0,     0,
    43,   251,   251,   229,   257,     0,     0,     0,     0,     0,
   251,   251,     0,   251,   251,   251,   251,   251,     0,     0,
     0,     0,     0,     0,     0,   251,     0,     0,     0,     0,
     0,     0,     0,   230,     0,     0,     0,   229,     0,     0,
     0,     0,     0,   230,   251,   251,     0,     0,     0,   251,
   251,   229,   229,     0,     0,     0,   229,     0,   251,     0,
     0,   251,     0,     0,   251,     0,   251,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   230,   252,   252,
   252,     0,   251,   252,   252,   252,     0,   252,     0,     0,
     0,   230,   230,     0,   251,     0,   230,   252,   252,     0,
     0,     0,     0,     0,     0,     0,   252,   252,     0,   252,
   252,   252,   252,   252,     0,     0,     0,     0,     0,     0,
     0,   252,     0,     0,     0,     0,     0,     0,     0,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
   252,   252,     0,     0,     0,   252,   252,     0,     0,     0,
     0,     0,     0,     0,   252,     0,     0,   252,     0,     0,
   252,     0,   252,     0,     0,   258,   258,   258,     0,     0,
   258,   258,   258,   259,   258,     0,     0,     0,   252,     0,
     0,     0,     0,     0,   258,   258,     0,   259,   259,     0,
   252,     0,     0,   258,   258,     0,   258,   258,   258,   258,
   258,     0,     0,    43,    43,    43,     0,     0,   258,    43,
    43,     0,    43,     0,   228,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   228,     0,     0,     0,   258,     0,
     0,     0,   258,   258,    43,    43,    43,    43,    43,     0,
     0,   258,     0,     0,   258,     0,     0,   258,     0,   258,
     0,     0,     0,     0,     0,   229,   229,   229,   228,     0,
   229,   229,   229,     0,   229,   258,     0,     0,     0,     0,
     0,     0,   228,   228,   229,   229,     0,   258,     0,     0,
     0,     0,    43,   229,   229,     0,   229,   229,   229,   229,
   229,     0,     0,     0,     0,   230,   230,   230,   229,   227,
   230,   230,   230,    43,   230,     0,     0,     0,     0,   227,
     0,     0,     0,     0,   230,   230,     0,     0,     0,     0,
     0,     0,     0,   230,   230,     0,   230,   230,   230,   230,
   230,   229,     0,     0,   229,     0,     0,   229,   230,   229,
     0,     0,     0,   227,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   229,     0,   227,   227,     0,
     0,     0,     0,     0,     0,     0,     0,   229,     0,     0,
     0,   230,     0,     0,   230,     0,     0,   230,     0,   230,
     0,     0,     0,     0,   223,     0,     0,     0,     0,     0,
     0,   259,   259,   259,   223,   230,   259,   259,   259,     0,
   259,     0,     0,     0,     0,     0,     0,   230,     0,     0,
   259,   259,     0,     0,     0,     0,     0,     0,     0,   259,
   259,     0,   259,   259,   259,   259,   259,     0,   223,     0,
     0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
     0,     0,   223,   223,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   259,     0,   224,
   259,     0,     0,   259,     0,   259,   228,   228,   228,   224,
     0,   228,   228,   228,     0,   228,     0,     0,     0,     0,
     0,   259,     0,     0,     0,   228,   228,     0,     0,     0,
     0,     0,     0,   259,   228,   228,     0,   228,   228,   228,
   228,   228,     0,   224,     0,     0,     0,     0,     0,   228,
     0,     0,     0,     0,     0,     0,     0,   224,   224,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   228,     0,   225,   228,     0,     0,   228,     0,
   228,   227,   227,   227,   225,     0,   227,   227,   227,     0,
   227,     0,     0,     0,     0,     0,   228,     0,     0,     0,
   227,   227,     0,     0,     0,     0,     0,     0,   228,   227,
   227,     0,   227,   227,   227,   227,   227,     0,   225,     0,
     0,     0,     0,     0,   227,     0,     0,     0,     0,     0,
     0,     0,   225,   225,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   227,     0,   226,
   227,     0,     0,   227,     0,   227,   223,   223,   223,   226,
     0,   223,   223,   223,     0,   223,     0,     0,     0,     0,
     0,   227,     0,     0,     0,   223,   223,     0,     0,     0,
     0,     0,     0,   227,   223,   223,     0,   223,   223,   223,
   223,   223,     0,   226,     0,     0,     0,     0,     0,   223,
     0,     0,     0,     0,     0,     0,     0,   226,   226,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   223,     0,   219,   223,     0,     0,   223,     0,
   223,   224,   224,   224,   219,     0,   224,   224,   224,     0,
   224,     0,     0,     0,     0,     0,   223,     0,     0,     0,
   224,   224,     0,     0,     0,     0,     0,     0,   223,   224,
   224,     0,   224,   224,   224,   224,   224,     0,   219,     0,
     0,     0,     0,     0,   224,     0,     0,     0,     0,     0,
     0,     0,   219,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   224,     0,   221,
   224,     0,     0,   224,     0,   224,   225,   225,   225,   221,
     0,   225,   225,   225,     0,   225,     0,     0,     0,     0,
     0,   224,     0,     0,     0,   225,   225,     0,     0,     0,
     0,     0,     0,   224,   225,   225,     0,   225,   225,   225,
   225,   225,     0,   221,     0,     0,     0,     0,     0,   225,
     0,     0,     0,     0,     0,     0,     0,   221,   221,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   225,     0,   260,   225,     0,     0,   225,     0,
   225,   226,   226,   226,   260,     0,   226,   226,   226,     0,
   226,     0,     0,     0,     0,     0,   225,     0,     0,     0,
   226,   226,     0,     0,     0,     0,     0,     0,   225,   226,
   226,     0,   226,   226,   226,   226,   226,     0,   260,     0,
     0,     0,     0,     0,   226,     0,     0,     0,     0,     0,
     0,     0,   260,   260,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   226,     0,   222,
   226,     0,     0,   226,     0,   226,   219,   219,   219,   222,
     0,   219,   219,   219,     0,   219,     0,     0,     0,     0,
     0,   226,     0,     0,     0,   219,   219,     0,     0,     0,
     0,     0,     0,   226,   219,   219,     0,   219,   219,   219,
   219,   219,     0,   222,     0,     0,     0,     0,     0,   219,
     0,     0,     0,     0,     0,     0,     0,   222,   222,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   219,     0,   262,   219,     0,     0,   219,     0,
   219,   221,   221,   221,   262,     0,   221,   221,   221,     0,
   221,     0,     0,     0,     0,     0,   219,     0,     0,     0,
   221,   221,     0,     0,     0,     0,     0,     0,   219,   221,
   221,     0,   221,   221,   221,   221,   221,     0,   262,     0,
     0,     0,     0,     0,   221,     0,     0,     0,     0,     0,
     0,     0,   218,   262,     0,     0,     0,     0,     0,     0,
     0,     0,   218,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   221,     0,     0,
   221,     0,     0,   221,     0,   221,   260,   260,   260,     0,
     0,   260,   260,   260,     0,   260,   218,     0,     0,     0,
     0,   221,     0,     0,     0,   260,   260,     0,     0,     0,
   218,   218,     0,   221,   260,   260,     0,   260,   260,   260,
   260,   260,     0,     0,     0,     0,     0,     0,     0,   260,
     0,     0,     0,     0,     0,     0,     0,     0,   351,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   351,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   260,     0,     0,   260,     0,     0,   260,     0,
   260,   222,   222,   222,     0,     0,   222,   222,   222,     0,
   222,     0,   351,     0,     0,     0,   260,     0,     0,     0,
   222,   222,     0,     0,     0,     0,     0,   351,   260,   222,
   222,   351,   222,   222,   222,   222,   222,     0,     0,     0,
     0,     0,     0,     0,   222,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   222,     0,     0,
   222,     0,     0,   222,     0,   222,   262,   262,   262,   352,
     0,   262,   262,   262,     0,   262,     0,     0,     0,   352,
     0,   222,     0,     0,     0,   262,   262,     0,     0,     0,
     0,     0,     0,   222,   262,   262,     0,   262,   262,   262,
   262,   262,     0,     0,     0,     0,     0,     0,     0,   262,
     0,     0,     0,   352,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   218,   218,   218,     0,   352,   218,
   218,   218,   352,   218,     0,     0,     0,     0,     0,     0,
     0,     0,   262,   218,   218,   262,     0,     0,   262,     0,
   262,     0,   218,   218,     0,   218,   218,   218,   218,     0,
   352,     0,     0,     0,     0,     0,   262,   218,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   315,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   315,     0,
   218,     0,     0,   218,     0,     0,   218,     0,   218,     0,
   351,   351,   351,     0,     0,   351,   351,   351,     0,   351,
     0,     0,     0,     0,   218,     0,     0,     0,     0,   351,
   351,     0,   315,     0,     0,     0,   218,     0,   351,   351,
     0,   351,   351,   351,   351,   351,     0,   315,     0,     0,
     0,   315,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   351,   351,   351,   351,   351,
   351,   351,   351,   351,   351,   351,   351,   351,   351,   315,
     0,   351,   351,   351,     0,     0,   351,     0,     0,   351,
     0,     0,   351,     0,   351,     0,   351,     0,   351,     0,
   351,   351,   351,   351,   351,   351,   351,     0,   351,   432,
   351,     0,     0,     0,     0,     0,     0,     0,     0,   432,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   352,   352,   352,     0,     0,   352,   352,   352,     0,
   352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   352,   352,     0,   103,     0,     0,     0,     0,     0,   352,
   352,     0,   352,   352,   352,   352,   352,     0,   432,     0,
   122,     0,   432,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   352,   352,   352,   352,
   352,   352,   352,   352,   352,   352,   352,   352,   352,   352,
   432,     0,   352,   352,   352,     0,     0,   352,     0,     0,
   352,     0,     0,   352,     0,   352,     0,   352,     0,   352,
     0,   352,   352,   352,   352,   352,   352,   352,   511,   352,
     0,   352,     0,     0,     0,     0,     0,     0,   511,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   315,   315,   315,     0,     0,   315,   315,   315,     0,   315,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   315,
   315,     0,    97,     0,     0,     0,     0,     0,   315,   315,
     0,   315,   315,   315,   315,   315,     0,   511,     0,   116,
     0,   511,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   511,
     0,   315,   315,   315,     0,     0,   315,     0,     0,   315,
     0,     0,   315,     0,   315,     0,   315,     0,   315,     0,
   315,   315,   315,   315,   315,   315,   315,     0,   315,   510,
   315,     0,     0,     0,     0,     0,     0,     0,     0,   510,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   432,   432,   432,     0,     0,     0,   432,   432,     0,
   432,     0,     0,     0,     0,     0,     0,     0,     0,   432,
     0,     0,     0,    96,     0,     0,     0,     0,     0,   432,
   432,     0,   432,   432,   432,   432,   432,     0,   510,     0,
   115,     0,   510,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   432,   432,   432,   432,
   432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
   510,     0,   432,   432,   432,     0,     0,     0,     0,     0,
   432,     0,     0,     0,     0,     0,     0,   432,     0,   432,
     0,   432,   432,   432,   432,   432,   432,   432,   512,   432,
   432,   432,     0,     0,     0,     0,     0,     0,   512,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   511,   511,   511,     0,     0,     0,   511,   511,     0,   511,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    98,     0,     0,     0,     0,     0,   511,   511,
     0,   511,   511,   511,   511,   511,     0,   512,     0,   117,
     0,   512,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   511,   511,   511,   511,   511,
   511,   511,   511,   511,   511,   511,   511,   511,   511,   512,
     0,   511,   511,   511,     0,   523,     0,     0,     0,   511,
     0,     0,     0,     0,     0,     0,   511,     0,   511,     0,
   511,   511,   511,   511,   511,   511,   511,     0,   511,   513,
   511,     0,     0,     0,     0,     0,     0,     0,     0,   513,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   510,   510,   510,     0,     0,     0,   510,   510,     0,
   510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    99,     0,     0,     0,     0,     0,   510,
   510,     0,   510,   510,   510,   510,   510,     0,   513,     0,
   118,     0,   513,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   510,   510,   510,   510,
   510,   510,   510,   510,   510,   510,   510,   510,   510,   510,
   513,     0,   510,   510,   510,     0,   522,     0,     0,     0,
   510,     0,     0,     0,     0,     0,     0,   510,     0,   510,
     0,   510,   510,   510,   510,   510,   510,   510,   515,   510,
     0,   510,     0,     0,     0,     0,     0,     0,   515,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   512,   512,   512,     0,     0,     0,   512,   512,     0,   512,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   101,     0,     0,     0,     0,     0,   512,   512,
     0,   512,   512,   512,   512,   512,     0,   515,     0,   120,
     0,   515,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   512,   512,   512,   512,   512,
   512,   512,   512,   512,   512,   512,   512,   512,   512,   515,
     0,   512,   512,   512,     0,   524,     0,     0,     0,   512,
     0,     0,     0,     0,     0,     0,   512,     0,   512,     0,
   512,   512,   512,   512,   512,   512,   512,     0,   512,   514,
   512,     0,     0,     0,     0,     0,     0,     0,     0,   514,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   513,   513,   513,     0,     0,     0,   513,   513,     0,
   513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   100,     0,     0,     0,     0,     0,   513,
   513,     0,   513,   513,   513,   513,   513,     0,   514,     0,
   119,     0,   514,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   513,   513,   513,   513,
   513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
   514,     0,   513,   513,   513,     0,   525,     0,     0,     0,
   513,     0,     0,     0,     0,     0,     0,   513,     0,   513,
     0,   513,   513,   513,   513,   513,   513,   513,   516,   513,
     0,   513,     0,     0,     0,     0,     0,     0,   516,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   515,   515,   515,     0,     0,     0,   515,   515,     0,   515,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,     0,     0,     0,     0,     0,   515,   515,
     0,   515,   515,   515,   515,   515,     0,   516,     0,   121,
     0,   516,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   515,   515,   515,   515,   515,
   515,   515,   515,   515,   515,   515,   515,   515,   515,   516,
     0,   515,   515,   515,     0,   527,     0,     0,     0,   515,
     0,     0,     0,     0,     0,     0,   515,     0,   515,     0,
   515,   515,   515,   515,   515,   515,   515,     0,   515,   507,
   515,     0,     0,     0,     0,     0,     0,     0,     0,   507,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   514,   514,   514,     0,     0,     0,   514,   514,     0,
   514,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    93,     0,     0,     0,     0,     0,   514,
   514,     0,   514,   514,   514,   514,   514,     0,   507,     0,
   112,     0,   507,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   514,   514,   514,   514,
   514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
   507,     0,   514,   514,   514,     0,   526,     0,     0,     0,
   514,     0,     0,     0,     0,     0,     0,   514,     0,   514,
     0,   514,   514,   514,   514,   514,   514,   514,   506,   514,
     0,   514,     0,     0,     0,     0,     0,     0,   506,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   516,   516,   516,     0,     0,     0,   516,   516,     0,   516,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    92,     0,     0,     0,     0,     0,   516,   516,
     0,   516,   516,   516,   516,   516,     0,   506,     0,   111,
     0,   506,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   516,   516,   516,   516,   516,
   516,   516,   516,   516,   516,   516,   516,   516,   516,   506,
     0,   516,   516,   516,     0,   528,     0,     0,     0,   516,
     0,     0,     0,     0,     0,     0,   516,     0,   516,     0,
   516,   516,   516,   516,   516,   516,   516,     0,   516,   509,
   516,     0,     0,     0,     0,     0,     0,     0,     0,   509,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   507,   507,   507,     0,     0,     0,   507,   507,     0,
   507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    95,     0,     0,     0,     0,     0,   507,
   507,     0,   507,   507,   507,   507,   507,     0,   509,     0,
   114,     0,   509,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   507,   507,   507,   507,
   507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
   509,     0,   507,   507,   507,     0,   519,     0,     0,     0,
   507,     0,     0,     0,     0,     0,     0,   507,     0,   507,
     0,   507,   507,   507,   507,   507,   507,   507,   303,   507,
     0,   507,     0,     0,     0,     0,     0,     0,   303,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   506,   506,   506,     0,     0,     0,   506,   506,     0,   506,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,     0,     0,     0,     0,     0,   506,   506,
     0,   506,   506,   506,   506,   506,     0,   303,     0,   128,
     0,   303,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   506,   506,   506,   506,   506,
   506,   506,   506,   506,   506,   506,   506,   506,   506,   303,
     0,   506,   506,   506,     0,   518,     0,     0,     0,   506,
     0,     0,     0,     0,     0,     0,   506,     0,   506,     0,
   506,   506,   506,   506,   506,   506,   506,     0,   506,   312,
   506,     0,     0,     0,     0,     0,     0,     0,     0,   312,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   509,   509,   509,     0,     0,     0,   509,   509,     0,
   509,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,     0,     0,     0,     0,     0,   509,
   509,     0,   509,   509,   509,   509,   509,     0,   312,     0,
   127,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   509,   509,   509,   509,
   509,   509,   509,   509,   509,   509,   509,   509,   509,   509,
   312,     0,   509,   509,   509,     0,   521,     0,     0,     0,
   509,     0,     0,     0,     0,     0,     0,   509,   285,   509,
     0,   509,   509,   509,   509,   509,   509,   509,   285,   509,
     0,   509,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   303,   303,   303,     0,     0,     0,   303,   303,     0,   303,
   287,     0,   285,     0,     0,     0,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,   285,   303,   303,
     0,   303,   303,   303,   303,   303,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   287,   303,   303,   303,   303,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   303,   287,
     0,   303,   303,   303,     0,     0,     0,     0,     0,   303,
     0,     0,     0,     0,     0,     0,   303,     0,   303,     0,
   303,   303,   303,   303,   303,   303,   303,     0,   303,   634,
   303,     0,     0,     0,     0,     0,     0,     0,     0,   634,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   312,   312,   312,     0,     0,     0,   312,   312,     0,
   312,     0,     0,     0,     0,     0,    60,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    60,     0,     0,   312,
   312,     0,   312,   312,   312,   312,   312,     0,   634,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   312,   312,   312,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
     0,     0,   312,   312,   312,    60,     0,     0,     0,     0,
   312,     0,     0,     0,     0,     0,     0,   312,     0,   312,
     0,   312,   312,   312,   312,   312,   312,   312,     0,   312,
     0,   312,     0,    62,     0,     0,     0,     0,     0,     0,
   285,   285,   285,    62,     0,   285,   285,   285,     0,   285,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   285,
   285,     0,     0,     0,     0,     0,     0,     0,   285,   285,
    64,   285,   285,   285,   285,   285,     0,     0,     0,     0,
    64,     0,   287,   287,   287,     0,     0,   287,   287,   287,
     0,   287,    62,     0,     0,     0,     0,     0,     0,     0,
     0,   287,   287,     0,     0,     0,     0,     0,     0,     0,
   287,   287,     0,   287,   287,   287,   287,   287,     0,   285,
     0,     0,   285,     0,   285,    51,     0,     0,     0,    64,
     0,     0,     0,     0,     0,    51,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   287,     0,     0,   287,     0,   287,     0,     0,     0,
     0,   634,   634,   634,     0,     0,   634,   634,   634,    53,
   634,     0,   287,     0,    51,     0,     0,     0,     0,    53,
   634,   634,     0,     0,     0,     0,     0,     0,     0,   634,
   634,     0,   634,   634,   634,   634,   634,     0,    60,    60,
    60,     0,     0,    60,    60,    60,     0,    60,     0,     0,
     0,    55,     0,     0,     0,     0,     0,    60,    60,     0,
     0,    55,     0,     0,     0,     0,    60,    60,    53,    60,
    60,    60,    60,    60,     0,     0,     0,     0,     0,     0,
   634,     0,     0,   634,     0,   634,     0,     0,     0,    56,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
     0,   634,     0,     0,     0,     0,     0,     0,     0,     0,
    55,     0,     0,     0,     0,     0,     0,    60,     0,     0,
    60,     0,     0,     0,     0,    62,    62,    62,     0,     0,
    62,    62,    62,     0,    62,     0,     0,     0,    60,   293,
     0,     0,     0,     0,    62,    62,     0,     0,    56,   293,
     0,     0,     0,    62,    62,     0,    62,    62,    62,    62,
    62,     0,    64,    64,    64,     0,     0,    64,    64,    64,
     0,    64,     0,     0,     0,     0,   291,     0,     0,     0,
     0,    64,    64,   286,     0,     0,   291,     0,     0,     0,
    64,    64,     0,    64,    64,    64,    64,    64,   293,     0,
     0,     0,     0,     0,    62,     0,     0,    62,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    51,    51,    51,
   287,     0,    51,    51,    51,    62,    51,     0,     0,     0,
     0,     0,     0,     0,     0,   291,    51,     0,     0,     0,
     0,    64,     0,     0,    64,    51,    51,     0,    51,    51,
    51,    51,    51,     0,     0,     0,     0,   292,     0,     0,
     0,     0,    64,     0,     0,     0,     0,   292,     0,     0,
     0,    53,    53,    53,     0,     0,    53,    53,    53,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,     0,     0,     0,     0,     0,    51,     0,     0,    53,
    53,   288,    53,    53,    53,    53,    53,     0,     0,     0,
     0,     0,     0,    55,    55,    55,   292,    51,    55,    55,
    55,     0,    55,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,     0,     0,     0,     0,     0,     0,    52,
     0,    55,    55,     0,    55,    55,    55,    55,    55,    52,
    53,    56,    56,    56,     0,     0,    56,    56,    56,    25,
    56,     0,     0,     0,     0,     0,     0,     0,     0,    25,
    56,    53,     0,     0,     0,     0,     0,     0,   218,    56,
    56,     0,    56,    56,    56,    56,    56,     0,   218,     0,
     0,     0,    55,     0,     0,     0,     0,     0,    52,     0,
     0,   293,   293,   293,     0,     0,   293,   293,   293,     0,
   293,     0,     0,    55,     0,     0,     0,     0,    25,     0,
     0,     0,   262,     0,     0,     0,     0,     0,     0,     0,
    56,     0,   293,   293,   293,   293,   293,   218,   291,   291,
   291,     0,     0,   291,   291,   291,     0,   291,     0,     0,
     0,    56,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   291,
   291,   291,   291,   291,     0,     0,     0,   293,     0,     0,
   293,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   655,     0,     0,     0,     0,     0,
     0,   293,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   291,     0,     0,   291,     0,   292,
   292,   292,     0,     0,   292,   292,   292,     0,   292,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   292,   292,   292,   292,   292,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   292,     0,     0,   292,     0,
     0,    52,    52,    52,     0,     0,    52,    52,    52,     0,
    52,     0,     0,     0,     0,     0,     0,     0,     0,   292,
    52,    25,    25,    25,     0,     0,     0,    25,    25,     0,
    25,     0,    52,    52,    52,    52,    52,   473,     0,     0,
   218,   218,   218,     0,     0,     0,   218,   218,     0,   218,
     0,     0,    25,    25,    25,    25,    25,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   218,   218,
     0,   218,   218,   218,   218,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    25,    52,     0,     0,     0,     0,     0,     4,     5,     6,
   412,     8,     0,     0,     0,     9,    10,     0,     0,   218,
    11,    25,    12,    13,    14,   108,   109,    17,    18,     0,
     0,     0,     0,   110,   111,   112,   337,   338,   339,   340,
   218,     0,   117,     0,     0,     0,     0,     0,     0,   118,
     0,     0,   341,   342,   343,     0,   344,    35,   345,   346,
   347,   348,     0,    40,     0,     0,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   349,     0,     0,   130,
     0,     0,    46,    47,     0,    48,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
     0,     0,     0,    58,     0,    59,    60,     0,    61,    62,
    63,    64,     0,    65,    66,     4,     5,     6,     7,   235,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
     0,    19,    20,    21,    22,    23,    24,    25,     0,     0,
    26,     0,     0,     0,     0,     0,    27,    28,     0,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
     0,    40,    41,    42,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    44,     0,     0,    45,     0,     0,
    46,    47,     0,    48,     0,    49,     0,     0,     0,    50,
     0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
     0,     0,    52,    53,    54,    55,    56,    57,     0,     0,
     0,    58,     0,    59,    60,     0,    61,    62,    63,    64,
     0,    65,    66,     0,   387,   388,   389,   390,   391,   392,
   393,   394,   395,   396,   397,     0,   398,   399,     0,     0,
   400,   401,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   402,     0,   403,     0,   404,
   405,   406,   407,   408,   409,   410,     0,   411,   138,   139,
   140,   141,   142,   143,   144,   145,     0,     0,   146,   147,
   148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
   156,   157,     0,     0,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,   179,     0,   180,   181,   123,
   124,   182,   126,     0,     0,   183,   184,     0,   185,   186,
   187,   188,   189,   190,   191,     0,     0,   192,   193,     0,
     0,     0,   194,   195,   196,   197,     0,     0,     0,     0,
     0,   198,     0,     0,     0,     0,     0,     0,   199,   200,
     0,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,     0,     0,   212,     0,     0,     0,     0,     0,
   138,   139,   140,   141,   142,   143,   144,   145,     0,     0,
   146,   147,   148,   149,   150,     0,   213,   151,   152,   153,
   154,   155,   156,   157,     0,     0,   158,   159,   160,   219,
   220,   221,   222,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   223,   224,   225,     0,   226,
   181,   357,   358,   227,   359,     0,     0,   183,   184,     0,
   185,   186,   187,   188,   189,   190,   191,     0,     0,   192,
   193,     0,     0,     0,   194,   195,   196,   197,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,     0,     0,   212,     0,     0,     0,
     0,     0,   138,   139,   140,   141,   142,   143,   144,   145,
     0,     0,   146,   147,   148,   149,   150,     0,   213,   151,
   152,   153,   154,   155,   156,   157,     0,     0,   158,   159,
   160,   219,   220,   221,   222,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   223,   224,   225,
     0,   226,   181,   313,     0,   227,     0,     0,     0,   183,
   184,     0,   185,   186,   187,   188,   189,   190,   191,     0,
     0,   192,   193,     0,     0,     0,   194,   195,   196,   197,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   199,   200,     0,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,     0,     0,   212,    52,
     0,     0,     0,     0,   138,   139,   140,   141,   142,   143,
   144,   145,     0,     0,   146,   147,   148,   149,   150,     0,
   213,   151,   152,   153,   154,   155,   156,   157,     0,     0,
   158,   159,   160,   219,   220,   221,   222,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   223,
   224,   225,     0,   226,   181,     0,     0,   227,     0,     0,
     0,   183,   184,     0,   185,   186,   187,   188,   189,   190,
   191,     0,     0,   192,   193,     0,     0,     0,   194,   195,
   196,   197,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   199,   200,     0,   201,   202,   203,
   204,   205,   206,   207,   208,   209,   210,   211,     0,     0,
   212,    52,     0,     0,     0,     0,   138,   139,   140,   141,
   142,   143,   144,   145,     0,     0,   146,   147,   148,   149,
   150,     0,   213,   151,   152,   153,   154,   155,   156,   157,
     0,     0,   158,   159,   160,   219,   220,   221,   222,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   223,   224,   225,     0,   226,   181,     0,     0,   227,
     0,     0,     0,   183,   184,     0,   185,   186,   187,   188,
   189,   190,   191,     0,     0,   192,   193,     0,     0,     0,
   194,   195,   196,   197,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   199,   200,     0,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     0,     0,   212,     0,     0,     0,     0,     0,     0,     3,
     4,     5,     6,     7,     8,     0,     0,     0,     9,    10,
     0,     0,     0,    11,   213,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,     0,    19,    20,    21,    22,
    23,    24,    25,     0,     0,    26,     0,     0,     0,     0,
     0,    27,    28,    29,    30,    31,    32,    33,     0,    34,
    35,    36,    37,    38,    39,     0,    40,    41,    42,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
     0,     0,    45,     0,     0,    46,    47,     0,    48,     0,
    49,     0,     0,     0,    50,     0,     0,     0,     0,     0,
     0,     0,    51,     0,     0,     0,     0,    52,    53,    54,
    55,    56,    57,     0,     0,     0,    58,     0,    59,    60,
     0,    61,    62,    63,    64,     0,    65,    66,   234,     4,
     5,     6,     7,   235,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,     0,    19,    20,    21,    22,    23,
    24,    25,     0,     0,    26,     0,     0,     0,     0,     0,
    27,    28,     0,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,     0,    40,    41,    42,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
     0,    45,     0,     0,    46,    47,     0,    48,     0,    49,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,    51,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,     0,    65,    66,   234,     4,     5,
     6,     7,   235,     0,     0,     0,     9,    10,     0,     0,
     0,    11,     0,    12,    13,    14,    15,    16,    17,    18,
     0,     0,     0,     0,    19,    20,    21,    22,    23,    24,
    25,     0,     0,    26,     0,     0,     0,     0,     0,    27,
    28,     0,    30,    31,    32,    33,     0,    34,    35,    36,
    37,    38,    39,     0,    40,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    44,     0,     0,
   323,     0,     0,    46,    47,     0,    48,     0,    49,     0,
     0,     0,    50,     0,     0,     0,     0,     0,     0,     0,
    51,     0,     0,     0,     0,    52,    53,    54,    55,    56,
    57,     0,     0,     0,    58,     0,    59,    60,     0,    61,
    62,    63,    64,     0,    65,    66,     4,     5,     6,     0,
     8,     0,     0,     0,     9,    10,     0,     0,     0,    11,
     0,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,     0,    19,    20,    21,   242,   243,   244,   245,     0,
     0,   117,     0,     0,     0,     0,     0,     0,    28,     0,
     0,   246,   247,   248,     0,   249,    35,   250,   251,   252,
   253,   288,    40,    41,    42,    43,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   254,     0,     0,   130,     0,
     0,    46,    47,     0,    48,     0,   289,     0,   290,     0,
    50,     0,     0,     0,     0,     0,     0,     0,   291,     0,
     0,     0,     0,    52,   292,    54,    55,    56,    57,     0,
     0,     0,    58,     0,    59,    60,     0,    61,    62,    63,
    64,     0,    65,    66,   293,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,   108,   109,    17,    18,     0,     0,     0,
     0,   110,   111,   112,   242,   243,   244,   245,     0,     0,
   117,     0,     0,     0,     0,     0,     0,    28,     0,     0,
   246,   247,   248,     0,   249,    35,   250,   251,   252,   253,
   288,    40,    41,    42,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   254,     0,     0,   130,     0,     0,
    46,    47,     0,    48,     0,   717,     0,   290,     0,    50,
     0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,    52,   292,    54,    55,    56,    57,     0,     0,
     0,    58,     0,    59,    60,     0,    61,    62,    63,    64,
     0,    65,    66,   293,   280,   280,   280,     0,   280,     0,
     0,     0,   280,   280,     0,     0,     0,   280,     0,   280,
   280,   280,   280,   280,   280,   280,     0,     0,     0,     0,
   280,   280,   280,   280,   280,   280,   280,     0,     0,   280,
     0,     0,     0,     0,     0,     0,   280,     0,     0,   280,
   280,   280,     0,   280,   280,   280,   280,   280,   280,   280,
   280,   280,   280,   280,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   280,     0,     0,   280,     0,     0,   280,
   280,     0,   280,     0,   280,     0,   280,     0,   280,     0,
     0,     0,     0,     0,     0,     0,   280,     0,     0,     0,
     0,   280,   280,   280,   280,   280,   280,     0,     0,     0,
   280,     0,   280,   280,     0,   280,   280,   280,   280,     0,
   280,   280,   280,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,   108,   109,    17,    18,     0,     0,     0,     0,   110,
   111,   112,   242,   243,   244,   245,     0,     0,   117,     0,
     0,     0,     0,     0,     0,    28,     0,     0,   246,   247,
   248,     0,   249,    35,   250,   251,   252,   253,   288,    40,
    41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   254,     0,     0,   130,     0,     0,    46,    47,
     0,    48,     0,   289,     0,     0,     0,    50,     0,     0,
     0,     0,     0,     0,     0,   291,     0,     0,     0,     0,
    52,   292,    54,    55,    56,    57,     0,     0,     0,    58,
     0,    59,    60,     0,    61,    62,    63,    64,     0,    65,
    66,   293,     4,     5,     6,     0,     8,     0,     0,     0,
     9,    10,     0,     0,     0,    11,     0,    12,    13,    14,
   108,   109,    17,    18,     0,     0,     0,     0,   110,   111,
   112,   242,   243,   244,   245,     0,     0,   117,     0,     0,
     0,     0,     0,     0,    28,     0,     0,   246,   247,   248,
     0,   249,    35,   250,   251,   252,   253,   288,    40,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   254,     0,     0,   130,     0,     0,    46,    47,     0,
    48,     0,     0,     0,   290,     0,    50,     0,     0,     0,
     0,     0,     0,     0,   291,     0,     0,     0,     0,    52,
   292,    54,    55,    56,    57,     0,     0,     0,    58,     0,
    59,    60,     0,    61,    62,    63,    64,     0,    65,    66,
   293,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,   108,
   109,    17,    18,     0,     0,     0,     0,   110,   111,   112,
   242,   243,   244,   245,     0,     0,   117,     0,     0,     0,
     0,     0,     0,    28,     0,     0,   246,   247,   248,     0,
   249,    35,   250,   251,   252,   253,   288,    40,    41,    42,
    43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   254,     0,     0,   130,     0,     0,    46,    47,     0,    48,
     0,   717,     0,     0,     0,    50,     0,     0,     0,     0,
     0,     0,     0,   291,     0,     0,     0,     0,    52,   292,
    54,    55,    56,    57,     0,     0,     0,    58,     0,    59,
    60,     0,    61,    62,    63,    64,     0,    65,    66,   293,
     4,     5,     6,     0,     8,     0,     0,     0,     9,    10,
     0,     0,     0,    11,     0,    12,    13,    14,   108,   109,
    17,    18,     0,     0,     0,     0,   110,   111,   112,   242,
   243,   244,   245,     0,     0,   117,     0,     0,     0,     0,
     0,     0,    28,     0,     0,   246,   247,   248,     0,   249,
    35,   250,   251,   252,   253,   288,    40,    41,    42,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   254,
     0,     0,   130,     0,     0,    46,    47,     0,    48,     0,
     0,     0,     0,     0,    50,     0,     0,     0,     0,     0,
     0,     0,   291,     0,     0,     0,     0,    52,   292,    54,
    55,    56,    57,     0,     0,     0,    58,     0,    59,    60,
     0,    61,    62,    63,    64,     0,    65,    66,   293,     4,
     5,     6,     7,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,     0,    19,    20,    21,    22,    23,
    24,    25,     0,     0,    26,     0,     0,     0,     0,     0,
    27,    28,    29,    30,    31,    32,    33,     0,    34,    35,
    36,    37,    38,    39,     0,    40,    41,    42,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
     0,    45,     0,     0,    46,    47,     0,    48,     0,    49,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,    51,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,     0,    65,    66,     4,     5,     6,
     7,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,    22,    23,    24,    25,
     0,     0,    26,     0,     0,     0,     0,     0,    27,    28,
     0,    30,    31,    32,    33,     0,    34,    35,    36,    37,
    38,    39,     0,    40,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    44,     0,     0,    45,
     0,     0,    46,    47,     0,    48,     0,    49,     0,     0,
     0,    50,     0,     0,     0,     0,     0,     0,     0,    51,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
     0,     0,     0,    58,     0,    59,    60,     0,    61,    62,
    63,    64,     0,    65,    66,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,   108,   109,    17,    18,     0,     0,     0,
     0,   110,   111,   112,   242,   243,   244,   245,     0,     0,
   117,     0,     0,     0,     0,     0,     0,    28,     0,     0,
   246,   247,   248,     0,   249,    35,   250,   251,   252,   253,
     0,    40,    41,    42,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   254,     0,     0,   130,   508,     0,
    46,    47,     0,    48,     0,     0,     0,     0,     0,    50,
     0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,    52,    53,    54,    55,    56,    57,     0,     0,
     0,    58,     0,    59,    60,     0,    61,    62,    63,    64,
     0,    65,    66,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,     0,    19,
    20,    21,   242,   243,   244,   245,     0,     0,   117,     0,
     0,     0,     0,     0,     0,    28,     0,     0,   246,   247,
   248,     0,   249,    35,   250,   251,   252,   253,     0,    40,
    41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   254,     0,     0,   130,     0,     0,    46,    47,
     0,    48,     0,   646,     0,     0,     0,    50,     0,     0,
     0,     0,     0,     0,     0,   291,     0,     0,     0,     0,
    52,    53,    54,    55,    56,    57,     0,     0,     0,    58,
     0,    59,    60,     0,    61,    62,    63,    64,     0,    65,
    66,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,   108,
   109,    17,    18,     0,     0,     0,     0,   110,   111,   112,
   242,   243,   244,   245,     0,     0,   117,     0,     0,     0,
     0,     0,     0,    28,     0,     0,   246,   247,   248,     0,
   249,    35,   250,   251,   252,   253,     0,    40,    41,    42,
    43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   254,     0,     0,   130,     0,     0,    46,    47,     0,    48,
     0,   646,     0,     0,     0,    50,     0,     0,     0,     0,
     0,     0,     0,   291,     0,     0,     0,     0,    52,    53,
    54,    55,    56,    57,     0,     0,     0,    58,     0,    59,
    60,     0,    61,    62,    63,    64,     0,    65,    66,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,   108,   109,    17,
    18,     0,     0,     0,     0,   110,   111,   112,   242,   243,
   244,   245,     0,     0,   117,     0,     0,     0,     0,     0,
     0,    28,     0,     0,   246,   247,   248,     0,   249,    35,
   250,   251,   252,   253,     0,    40,    41,    42,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
     0,   130,     0,     0,    46,    47,     0,    48,     0,   289,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,   291,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,     0,    65,    66,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,   108,   109,    17,    18,     0,
     0,     0,     0,   110,   111,   112,   242,   243,   244,   245,
     0,     0,   117,     0,     0,     0,     0,     0,     0,    28,
     0,     0,   246,   247,   248,     0,   249,    35,   250,   251,
   252,   253,     0,    40,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   254,     0,     0,   130,
     0,     0,    46,    47,     0,    48,     0,   911,     0,     0,
     0,    50,     0,     0,     0,     0,     0,     0,     0,   291,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
     0,     0,     0,    58,     0,    59,    60,     0,    61,    62,
    63,    64,     0,    65,    66,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,   108,   109,    17,    18,     0,     0,     0,
     0,   110,   111,   112,   242,   243,   244,   245,     0,     0,
   117,     0,     0,     0,     0,     0,     0,    28,     0,     0,
   246,   247,   248,     0,   249,    35,   250,   251,   252,   253,
     0,    40,    41,    42,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   254,     0,     0,   130,     0,     0,
    46,    47,     0,    48,     0,   717,     0,     0,     0,    50,
     0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,    52,    53,    54,    55,    56,    57,     0,     0,
     0,    58,     0,    59,    60,     0,    61,    62,    63,    64,
     0,    65,    66,   622,   622,   622,     0,   622,     0,     0,
     0,   622,   622,     0,     0,     0,   622,     0,   622,   622,
   622,   622,   622,   622,   622,     0,     0,     0,     0,   622,
   622,   622,   622,   622,   622,   622,     0,     0,   622,     0,
     0,     0,     0,     0,     0,   622,     0,     0,   622,   622,
   622,     0,   622,   622,   622,   622,   622,   622,     0,   622,
   622,   622,   622,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   622,     0,     0,   622,   622,     0,   622,   622,
     0,   622,     0,     0,     0,     0,     0,   622,     0,     0,
     0,     0,     0,     0,     0,   622,     0,     0,     0,     0,
   622,   622,   622,   622,   622,   622,     0,     0,     0,   622,
     0,   622,   622,     0,   622,   622,   622,   622,     0,   622,
   622,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,     0,    19,    20,    21,
   242,   243,   244,   245,     0,     0,    26,     0,     0,     0,
     0,     0,     0,    28,     0,     0,   246,   247,   248,     0,
   249,    35,   250,   251,   252,   253,     0,    40,    41,    42,
    43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   254,     0,     0,   130,     0,     0,    46,    47,     0,    48,
     0,     0,     0,     0,     0,    50,     0,     0,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,    52,    53,
    54,    55,    56,    57,     0,     0,     0,    58,     0,    59,
    60,     0,    61,    62,    63,    64,     0,    65,    66,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,   108,   109,    17,
    18,     0,     0,     0,     0,   110,   111,   112,   242,   243,
   244,   245,     0,     0,   117,     0,     0,     0,     0,     0,
     0,    28,     0,     0,   246,   247,   248,     0,   249,    35,
   250,   251,   252,   253,     0,    40,    41,    42,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
     0,   130,     0,     0,    46,    47,     0,    48,     0,     0,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,   291,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,     0,    65,    66,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,     0,    19,    20,    21,   242,   243,   244,   245,
     0,     0,   117,     0,     0,     0,     0,     0,     0,    28,
     0,     0,   246,   247,   248,     0,   249,    35,   250,   251,
   252,   253,     0,    40,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   254,     0,     0,   130,
     0,     0,    46,    47,     0,    48,     0,     0,     0,     0,
     0,    50,     0,     0,     0,     0,     0,     0,     0,   291,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
     0,     0,     0,    58,     0,    59,    60,     0,    61,    62,
    63,    64,     0,    65,    66,   622,   622,   622,     0,   622,
     0,     0,     0,   622,   622,     0,     0,     0,   622,     0,
   622,   622,   622,   622,   622,   622,   622,     0,     0,     0,
     0,   622,   622,   622,   622,   622,   622,   622,     0,     0,
   622,     0,     0,     0,     0,     0,     0,   622,     0,     0,
   622,   622,   622,     0,   622,   622,   622,   622,   622,   622,
     0,   622,   622,   622,   622,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   622,     0,     0,   622,     0,     0,
   622,   622,     0,   622,     0,     0,     0,     0,     0,   622,
     0,     0,     0,     0,     0,     0,     0,   622,     0,     0,
     0,     0,   622,   622,   622,   622,   622,   622,     0,     0,
     0,   622,     0,   622,   622,     0,   622,   622,   622,   622,
     0,   622,   622,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,   108,   109,    17,    18,     0,     0,     0,     0,   110,
   111,   112,   113,   114,   115,   116,     0,     0,   117,     0,
     0,     0,     0,     0,     0,   118,     0,     0,   119,   120,
   121,     0,   122,    35,   123,   124,   125,   126,     0,    40,
     0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     0,     0,   129,     0,     0,   130,     0,     0,    46,    47,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,    53,    54,    55,    56,    57,     0,     0,     0,    58,
     0,    59,    60,     0,    61,    62,    63,    64,     0,    65,
    66,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,   108,
   109,    17,    18,     0,     0,     0,     0,   110,   111,   112,
   270,   271,   272,   273,     0,     0,   117,     0,     0,     0,
     0,     0,     0,   118,     0,     0,   274,   275,   276,     0,
   277,    35,   278,   279,   280,   281,     0,    40,     0,     0,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   282,     0,     0,    45,     0,     0,    46,    47,     0,    48,
     0,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    52,    53,
    54,    55,    56,    57,     0,     0,     0,    58,     0,    59,
    60,     0,    61,    62,    63,    64,     0,    65,    66,     4,
     5,     6,     0,     8,     0,     0,     0,     9,    10,     0,
     0,     0,    11,     0,    12,    13,    14,   108,   109,    17,
    18,     0,     0,     0,     0,   110,   111,   112,   337,   338,
   339,   340,     0,     0,   117,     0,     0,     0,     0,     0,
     0,   118,     0,     0,   341,   342,   343,     0,   344,    35,
   345,   346,   347,   348,     0,    40,     0,     0,   127,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   349,     0,
     0,   424,     0,     0,    46,    47,     0,    48,     0,   425,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    52,    53,    54,    55,
    56,    57,     0,     0,     0,    58,     0,    59,    60,     0,
    61,    62,    63,    64,     0,    65,    66,     4,     5,     6,
     0,     8,     0,     0,     0,     9,    10,     0,     0,     0,
    11,     0,    12,    13,    14,   108,   109,    17,    18,     0,
     0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     0,     0,   117,     0,     0,     0,     0,     0,     0,   118,
     0,     0,   119,   120,   121,     0,   122,    35,   123,   124,
   125,   126,     0,    40,     0,     0,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   129,     0,     0,   130,
     0,     0,    46,    47,     0,    48,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
     0,     0,     0,    58,     0,    59,    60,     0,    61,    62,
    63,    64,     0,    65,    66,     4,     5,     6,     0,     8,
     0,     0,     0,     9,    10,     0,     0,     0,    11,     0,
    12,    13,    14,   108,   109,    17,    18,     0,     0,     0,
     0,   110,   111,   112,   337,   338,   339,   340,     0,     0,
   117,     0,     0,     0,     0,     0,     0,   118,     0,     0,
   341,   342,   343,     0,   344,    35,   345,   346,   347,   348,
     0,    40,     0,     0,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   349,     0,     0,   424,     0,     0,
    46,    47,     0,    48,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    52,    53,    54,    55,    56,    57,     0,     0,
     0,    58,     0,    59,    60,     0,    61,    62,    63,    64,
     0,    65,    66,     4,     5,     6,     0,     8,     0,     0,
     0,     9,    10,     0,     0,     0,    11,     0,    12,    13,
    14,   108,   109,    17,    18,     0,     0,     0,     0,   110,
   111,   112,   924,   925,   926,   927,     0,     0,   117,     0,
     0,     0,     0,     0,     0,   118,     0,     0,   928,   929,
   930,     0,   931,    35,   932,   933,   934,   935,     0,    40,
     0,     0,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   936,     0,     0,   130,     0,     0,    46,    47,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,    53,    54,    55,    56,    57,     0,     0,     0,    58,
     0,    59,    60,     0,    61,    62,    63,    64,     0,    65,
    66,     4,     5,     6,     0,     8,     0,     0,     0,     9,
    10,     0,     0,     0,    11,     0,    12,    13,    14,   108,
   109,    17,    18,     0,     0,     0,     0,   110,   111,   112,
   113,   114,   115,   116,     0,     0,   117,     0,     0,     0,
     0,     0,     0,   118,     0,     0,   119,   120,   121,     0,
   984,    35,   123,   124,   985,   126,     0,    40,     0,     0,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   986,     0,     0,   130,     0,     0,    46,    47,     0,    48,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    52,    53,
    54,    55,    56,    57,     0,     0,     0,    58,     0,    59,
    60,     0,    61,    62,    63,    64,     0,    65,    66,   738,
   628,     0,     0,   739,     0,     0,     0,   183,   184,     0,
   185,   186,   187,   188,   189,   190,   191,     0,     0,   192,
   193,     0,     0,     0,   194,   195,   196,   197,     0,     0,
     0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
   199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   740,   634,   212,     0,   741,     0,
     0,     0,   183,   184,     0,   185,   186,   187,   188,   189,
   190,   191,     0,     0,   192,   193,     0,     0,   213,   194,
   195,   196,   197,     0,     0,     0,     0,     0,   307,     0,
     0,     0,     0,     0,     0,   199,   200,     0,   201,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,  1039,
   628,   212,     0,  1040,     0,     0,     0,   183,   184,     0,
   185,   186,   187,   188,   189,   190,   191,     0,     0,   192,
   193,     0,     0,   213,   194,   195,   196,   197,     0,     0,
     0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
   199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,  1041,   634,   212,     0,  1042,     0,
     0,     0,   183,   184,     0,   185,   186,   187,   188,   189,
   190,   191,     0,     0,   192,   193,     0,     0,   213,   194,
   195,   196,   197,     0,     0,     0,     0,     0,   307,     0,
     0,     0,     0,     0,     0,   199,   200,     0,   201,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,  1066,
   634,   212,     0,  1067,     0,     0,     0,   183,   184,     0,
   185,   186,   187,   188,   189,   190,   191,     0,     0,   192,
   193,     0,     0,   213,   194,   195,   196,   197,     0,     0,
     0,     0,     0,   307,     0,     0,     0,     0,     0,     0,
   199,   200,     0,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,     0,     0,   212,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   213,
    };
  protected static final short[] yyCheck = {
//yyCheck 22599
     2,    74,     6,     7,    27,    10,    11,    26,     6,    28,
    21,     7,     4,     5,   415,   416,   261,    51,   447,   420,
   455,   417,    14,    27,   470,   490,    15,    16,    99,   423,
    19,    27,   583,    15,    16,    45,    21,    19,     2,     3,
    49,     7,     3,   444,   475,    47,    48,   299,    52,   371,
   446,   332,   574,   575,    52,   336,   676,    49,    32,   535,
   525,    27,   463,   464,   487,    47,    48,   490,    10,   465,
    10,    10,   129,    10,    10,     0,   477,     0,     0,   699,
    10,    59,    59,   479,    44,    11,    10,    10,    91,    10,
    10,    10,    91,   713,   766,   106,    10,   858,    91,   118,
    10,    61,    44,    10,    44,    10,   510,    99,    44,    15,
    16,   512,    10,    19,     2,     3,    10,    59,   777,    59,
     8,   106,   742,    59,    44,    10,    14,   112,   104,    59,
    10,   532,   860,   323,    10,    59,    59,    10,   534,    59,
    10,     2,     3,     4,     5,    59,    10,     8,     9,    10,
    11,   136,    43,    14,    15,    16,    10,    45,    19,    44,
    10,    59,    10,   104,    44,    59,   561,    10,    10,   959,
   980,    44,   280,   340,    59,    10,    10,   280,   104,   655,
    44,    61,    10,   764,    45,    46,    59,    10,    49,   340,
    51,    61,    32,   372,   955,    59,    44,    10,   377,    10,
    10,    10,    10,    10,   305,    59,   132,    10,    10,    59,
   592,    59,   305,    10,   328,     0,    59,    59,   312,    10,
    10,   335,   881,   317,    10,    10,    10,    61,   308,    10,
    10,    59,   340,    10,   424,    44,   127,    10,    99,   561,
    10,   670,   130,    10,   626,    10,    59,   499,    59,    59,
  1060,   680,  1013,   361,    61,   349,   350,    10,   361,  1049,
   725,   361,   238,   268,   269,   325,   701,   128,   317,   130,
   234,    44,    10,   374,    59,   344,    32,    61,    59,   350,
   684,   374,    59,  1011,   679,   310,   681,  1048,    15,    16,
   341,   385,    19,   362,   966,   375,   376,   238,   358,   348,
    32,   724,   725,   352,   353,   307,    44,   358,    61,    10,
   263,   264,   238,   323,   341,   304,   269,   306,   307,   279,
    47,    32,   304,   264,   306,   328,   256,   878,   804,   328,
    32,   358,   335,   365,   885,   328,   335,    10,   264,   890,
    10,    10,   335,    44,   866,   427,   234,   235,   870,   871,
   282,   873,    44,   875,   370,   371,   372,   679,   350,   681,
    61,   377,    10,   305,   341,   305,   264,   337,   269,   305,
   271,    44,   454,   234,   235,   380,   381,   382,   383,   960,
   358,   305,    61,   290,   291,   305,    59,   421,   445,   423,
    91,    61,    61,   427,   428,   976,   370,   371,   304,   341,
   306,   341,   341,   377,   341,   341,   800,   268,   269,   279,
   841,   305,   416,    61,   424,   417,   425,   341,   358,   340,
   384,   341,   358,  1043,   806,   344,   356,    61,   417,   317,
   415,   341,   374,   425,   374,   323,   341,   362,   374,   362,
   362,   445,   337,   304,   446,   306,   307,   341,   362,   310,
   374,   312,   454,   455,   374,   736,   317,   446,   703,   444,
   464,   341,   323,   465,   535,   341,   430,   719,   344,   430,
   281,   341,   279,   358,   478,  1056,   465,   479,   463,  1030,
   374,   262,   263,   264,   507,   358,   951,   916,   269,   350,
   479,   341,   477,    10,   358,   279,   384,  1019,  1020,  1021,
  1022,   947,   340,   507,   358,   487,   341,   341,   510,   513,
   358,   507,   947,   341,   440,   358,   358,    44,   341,   380,
   381,   382,   383,   384,   385,   386,   279,   512,   951,   533,
   370,   371,   534,   341,   341,   423,   424,   377,   341,   341,
   522,   507,   430,   535,    61,   534,   510,   532,   474,   475,
   341,   341,  1074,   344,   344,   341,   417,   341,   344,   447,
   421,   341,   423,   424,   425,    10,   427,   428,   997,   430,
   458,   341,    61,   461,   341,   820,   341,   304,   279,   306,
   361,   469,   290,   291,   655,   446,   447,   448,   341,   591,
   592,   268,   269,   845,   267,    10,   372,   458,   999,    44,
   461,   377,    10,   262,   465,  1001,   625,    10,   469,   279,
   279,   306,   264,    10,   310,   310,    61,    10,   479,   630,
   310,   640,   510,   787,   626,   636,    10,   328,   630,   793,
    44,   279,   643,   337,   335,   271,   326,   372,   328,   340,
   341,   643,   377,   337,    59,   630,    91,   508,   764,   510,
   766,   636,    10,    61,   372,    59,    59,   676,   643,   377,
   683,   777,    59,   655,   669,   338,   737,   310,    61,   671,
   279,   341,   341,   534,   535,    59,   338,    91,   682,   683,
   699,    44,   684,    44,   682,   687,   671,   683,   690,   674,
   361,   693,   317,   341,   713,   317,   423,   942,    10,   701,
   427,    59,   337,    10,    10,     2,     3,   349,   350,   714,
    10,     8,     9,    10,    11,    91,   344,   683,    15,    16,
   684,   341,    19,   742,   797,   263,   264,   454,    10,   362,
   310,    10,   372,   804,    44,   372,   755,    44,   346,    44,
   372,   667,   724,   372,   471,   737,    10,    59,    45,    46,
   784,   785,    59,    59,    51,   340,   790,   791,   777,    59,
   361,   340,   279,   262,   263,   264,   800,    44,   269,   268,
   269,   267,   271,   264,   370,   371,   372,    59,   341,    91,
    59,   377,   670,    44,    44,    91,   370,   371,   362,    44,
    32,   387,   680,   377,   655,    59,   684,     0,   382,    61,
   306,   689,   492,   306,   806,    91,    10,    10,   669,   670,
   500,   501,   804,    44,    91,     9,    10,    11,    44,   680,
    44,   826,    44,   684,   341,    91,   516,   819,   689,   519,
   306,   128,    44,   130,   279,   280,    32,   337,    10,   337,
   337,    44,   341,   337,    61,     2,     3,     4,     5,   264,
   966,     8,    46,   714,   269,    59,    59,    14,    44,    44,
   976,   264,   881,   362,   980,   279,   269,   371,   271,   264,
   267,   279,   906,   761,   762,    91,   737,   338,   262,   263,
   264,   263,   808,   328,   337,   269,   279,    59,    45,   815,
   335,   779,    49,   781,   337,   783,   341,   337,    10,   891,
   761,   762,   337,   362,   262,   263,   264,   264,    44,    58,
   268,   269,   800,   271,   328,   841,   361,   337,   779,    91,
   781,   335,   783,   784,   785,    91,   340,   344,   264,   790,
   791,   819,   264,   341,   128,   823,   362,   234,   235,   800,
    10,   338,    99,   804,  1060,   947,   264,    59,   341,   837,
   838,   839,   328,   264,   337,   267,    10,    44,   819,   335,
   267,   267,   823,   851,   654,   826,    44,   267,     2,     3,
   341,   268,   269,   130,     8,    59,   837,   838,   839,    91,
   972,    44,   264,   341,   263,   264,   268,   269,   678,    59,
   851,    10,    10,   264,   362,    10,  1000,  1016,    44,  1001,
    44,    10,   279,   267,   362,    59,    44,   304,    61,   306,
   307,    45,  1001,   310,   999,   312,   328,    44,    10,    44,
   317,    44,   328,   335,  1043,    44,   323,   915,   916,   335,
   891,  1035,    44,   358,   340,    44,   264,   264,   310,   729,
    59,    59,   328,  1045,    59,   906,   370,   371,   372,   335,
    59,   328,   940,   377,   915,   916,   560,   561,   335,   262,
   263,   264,   328,   362,   754,   268,   269,    59,   271,   335,
   362,   264,    91,    91,   268,   269,   264,   234,   235,   940,
    44,   310,    91,   380,   381,   382,   383,   384,   385,   386,
   293,   294,   295,   296,   297,   267,   130,    44,    44,    91,
   358,   264,   306,    10,   308,   309,   310,   311,   312,   997,
   362,   972,   328,   317,    44,  1003,   310,    44,   312,   335,
   417,  1009,    44,   813,   421,    44,   423,   424,    44,   264,
   427,   428,   264,   430,    44,   339,   997,   271,   341,   344,
  1001,    10,  1003,   347,   348,   349,   350,    44,  1009,   446,
   447,   448,    59,   362,   271,   267,   328,   340,    45,   362,
   317,   458,   328,   335,   461,    44,   323,   857,   465,   335,
   341,    10,   469,   362,   344,   679,   344,   681,   370,   371,
   372,   385,   479,    44,    58,   377,   380,   381,   382,   383,
    59,   385,   386,   350,    91,   370,   371,   372,   344,   264,
   234,   235,   377,   216,    70,    44,   292,    54,   262,   263,
   264,   508,    91,   510,   268,   269,   328,   271,   308,   309,
    59,   311,    91,   335,     5,    10,   373,   384,   458,  1045,
    91,     6,   643,   922,    44,   764,   306,   534,   308,   309,
   310,   311,   312,   130,   777,   749,   750,   317,   768,   267,
    44,   976,    91,   363,   448,   365,   978,   367,   328,    44,
   764,   280,   766,   373,   796,   335,    14,   424,   425,   339,
   340,   280,  1002,   430,    59,   267,   749,   347,   348,   349,
   350,    91,    -1,   317,    -1,   375,   376,   341,   280,   323,
   447,   306,  1049,   308,   309,   310,   311,   312,    -1,    44,
    10,   458,   317,    -1,   461,    -1,    91,    -1,   362,   328,
   328,    -1,   469,   328,   508,   385,   335,   335,    -1,   328,
   335,   340,    -1,    -1,   339,   340,   335,    10,    -1,    -1,
    -1,   340,   347,   348,   349,   350,   328,    -1,    -1,   358,
    -1,    -1,   361,   335,    -1,    -1,    91,    -1,   340,   358,
   384,    -1,   361,   510,   858,    -1,   860,    -1,    10,   306,
    -1,   308,   309,   310,   311,    -1,    10,    -1,    -1,   361,
   385,    -1,   669,   670,   484,    -1,    59,    -1,   535,    44,
    -1,    -1,   279,   680,   370,   371,   372,   684,    -1,    -1,
   424,   377,   689,    -1,    -1,    -1,   430,    -1,   267,   306,
   279,   308,   309,   310,   311,   312,    -1,    59,    91,    -1,
   317,   280,    -1,   447,    -1,    59,    -1,   714,   279,    -1,
    -1,   328,    -1,    10,   458,    -1,    91,   461,   335,    -1,
   317,   328,   339,   340,    -1,   469,   323,    -1,   335,   549,
   347,   348,   349,   350,    -1,    -1,    -1,    91,    -1,   328,
    10,   955,   956,   370,   371,   372,   335,    -1,    -1,   328,
   377,    -1,   966,    -1,   761,   762,   335,   328,    -1,   279,
    10,   340,    59,    -1,   335,   669,   510,   587,   385,    -1,
    -1,    -1,   779,    -1,   781,    -1,   783,   784,   785,   328,
    -1,    -1,   361,   790,   791,   280,   335,    -1,   655,    59,
    10,   340,    -1,   800,    44,    -1,    -1,  1011,    -1,  1013,
    -1,    -1,   306,   670,   308,   309,   310,   311,   328,   358,
   714,    61,    -1,   680,    -1,   335,   823,   684,    -1,   826,
    -1,    91,   689,    -1,   279,    15,    16,   424,    -1,    19,
   837,   838,   839,   328,  1048,    44,    -1,    44,    -1,    59,
   335,    91,    -1,    -1,   851,   340,   370,   371,   372,    44,
    -1,    41,    42,   377,    -1,    -1,    -1,    47,    48,    -1,
    50,    51,    -1,   358,   461,    -1,   361,    -1,    -1,    -1,
   737,    91,   469,   328,   267,    -1,    -1,    -1,   745,    -1,
   335,    -1,    91,    -1,    91,    -1,   306,   280,   308,   309,
   310,   311,   312,    -1,   761,   762,    91,   317,   306,   906,
   308,   309,   310,   311,   279,    -1,    -1,    -1,   915,   916,
    10,    48,   779,   267,   781,    -1,   783,    -1,    10,   339,
    -1,    -1,   826,    -1,    -1,    -1,   670,   347,   348,   349,
   350,   339,    -1,   940,    -1,   328,   680,   804,    -1,   347,
   684,    -1,   335,    -1,   306,   689,   308,   309,   310,   311,
   312,    -1,   819,   328,    -1,   317,   823,    -1,    -1,    59,
   335,   378,   379,   380,   381,   385,   328,    59,   361,    -1,
   837,   838,   839,   335,   328,    -1,    -1,   339,   340,    -1,
    -1,   335,    -1,    -1,   851,   347,   348,   349,   350,    44,
   997,    91,    -1,    -1,  1001,    -1,  1003,   267,    -1,    91,
    -1,    -1,  1009,    -1,    -1,    10,    -1,    -1,    10,   306,
    -1,   308,   309,   310,   311,   312,    -1,   761,   762,    -1,
   317,    -1,    -1,   385,   891,   370,   371,   372,    -1,   279,
   280,   328,   377,    -1,    -1,   779,    91,   781,   335,   783,
    -1,    -1,   339,   340,    -1,   317,    -1,   267,   915,   916,
   347,   348,   349,   350,    59,    -1,    -1,    59,   328,    -1,
    -1,    10,    10,    -1,   306,   335,   308,   309,   310,   311,
   279,    -1,   279,   940,    -1,    -1,   348,    -1,   328,   823,
   352,   353,   354,   355,   279,   335,    91,    -1,   385,    -1,
   340,   341,   689,   837,   838,   839,    44,   339,   288,   289,
   290,   291,    -1,   293,    -1,   972,    -1,   851,   328,    -1,
    59,   361,    10,    61,   304,   335,   306,   307,    -1,   328,
    10,   328,    -1,    44,    -1,   315,   335,    -1,   335,    -1,
   997,    -1,    -1,   328,    -1,    -1,  1003,    -1,    -1,    -1,
   335,    -1,  1009,    91,    -1,   306,    44,   308,   309,   310,
   311,   288,   289,   290,    -1,    -1,   293,   293,   294,   295,
   296,   297,    -1,    61,   761,   762,    -1,   267,    -1,    59,
    91,   915,   916,    -1,    10,   267,    -1,    -1,    -1,    -1,
    -1,    -1,   779,    -1,   781,    -1,   783,    -1,   280,    -1,
    -1,    -1,    -1,    91,    -1,    -1,   940,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
   400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
   410,   411,   412,    59,   279,    -1,   823,   417,   328,    -1,
    10,   421,    10,   423,    -1,   335,   328,   427,   428,    -1,
   837,   838,   839,   335,    -1,    -1,    -1,    -1,   340,    -1,
    -1,    -1,    -1,   997,   851,    44,   446,    -1,    -1,  1003,
    -1,    10,   267,    -1,   454,  1009,    44,    -1,    -1,   361,
    -1,    10,    -1,   328,    -1,   465,   466,   467,   468,    59,
   335,   471,    -1,    61,    -1,    -1,   423,    -1,    -1,   479,
   427,    -1,   262,   263,   264,    44,   486,   487,   268,   269,
   490,   271,    91,    -1,   306,    44,   308,   309,   310,   311,
   312,    91,    61,    91,    -1,   317,    -1,   454,   915,    -1,
    -1,    -1,    61,   328,   514,   515,   328,    10,    -1,    -1,
   335,   279,   522,   335,   471,   525,    -1,   339,   340,    -1,
    -1,    -1,    91,   940,   534,   347,   348,   349,   350,   486,
   487,    -1,    91,   490,    -1,    -1,    -1,   306,   279,   308,
   309,   310,   311,   312,    -1,    -1,    -1,     0,   317,    -1,
    -1,   341,    -1,    -1,    -1,    -1,    59,    10,    -1,   328,
   328,   279,   280,   385,    -1,   522,   335,   335,   525,    -1,
   339,   340,   362,   341,   584,    -1,    -1,    10,   347,   348,
   349,   350,    -1,    -1,    -1,    -1,  1003,   328,    91,    -1,
    -1,    44,  1009,    10,   335,    -1,   306,    10,   308,   309,
   310,   311,   312,    -1,    -1,    58,    59,   317,    -1,    -1,
   328,    44,    -1,    -1,    10,    10,   385,   335,   328,    -1,
    -1,    -1,   340,   341,    -1,   335,    44,   584,    61,   339,
   340,    -1,    -1,    -1,    -1,    10,   646,   347,   348,   349,
   350,    -1,    59,   361,    -1,    -1,    59,    -1,    44,    -1,
   306,    10,   308,   309,   310,   311,   312,    -1,    91,    -1,
    -1,   317,    -1,    -1,    59,    61,    -1,   267,    -1,    44,
   279,   280,   328,    91,    91,   385,    -1,    -1,    91,   335,
   280,   279,   280,   339,   340,    44,    61,   317,    -1,   646,
    -1,   347,   348,   349,   350,    91,    91,    -1,    -1,    -1,
    -1,    -1,    61,   333,   334,   715,    -1,   717,    -1,    -1,
   279,   280,    -1,    -1,   724,   725,    91,    -1,   348,   328,
   279,    -1,   352,   353,   354,   355,   335,    -1,   328,   385,
   328,   340,    91,    -1,    -1,   335,    -1,   335,    -1,     0,
   340,    -1,   340,   341,    -1,    -1,   756,    -1,    -1,    10,
    -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,   715,   328,
   717,   361,    -1,   361,   267,    -1,   335,   724,   725,   328,
   317,   340,   341,    -1,   784,   785,   335,    -1,    -1,    -1,
   790,   791,   341,    44,    -1,    -1,   333,   334,    -1,   799,
   800,   801,   361,    -1,    -1,   805,    -1,    58,    59,   756,
    61,   348,    63,   350,    -1,   352,   353,   354,   355,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,   829,
   830,   831,   832,    -1,    -1,   328,   836,    -1,   281,   282,
    91,    -1,   335,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   801,    -1,   279,   280,    -1,    -1,
   267,    -1,   305,    -1,   267,    -1,    -1,    -1,    -1,    -1,
    -1,   279,   280,   280,    -1,    -1,    -1,    -1,     0,    -1,
    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    10,   836,
    -1,    -1,    -1,   279,   894,   338,    -1,    -1,   341,    -1,
    -1,   344,    -1,   346,    -1,   328,   906,    -1,    -1,    -1,
    -1,   911,   335,    -1,   279,    -1,    -1,   340,   341,   362,
   328,   328,    44,    -1,    -1,   328,    -1,   335,   335,    -1,
   279,   374,   335,   340,    -1,    -1,    58,    59,   361,    61,
    -1,    63,   328,   328,   944,    -1,    -1,    -1,    -1,   335,
   335,   951,    -1,   361,   361,   341,   306,    -1,   308,   309,
   310,   311,    -1,   328,   911,    -1,    -1,    -1,    -1,    91,
   335,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,   328,
    -1,    -1,    -1,    -1,    -1,    -1,   335,    -1,    -1,   339,
    -1,    -1,   341,    -1,    -1,    -1,    -1,   347,    -1,    -1,
    -1,  1001,    -1,    -1,   951,    -1,   257,   258,   259,    -1,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,    -1,   299,    -1,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,   362,   768,   364,   365,   366,   367,   368,   369,    -1,
   777,   777,   373,   374,   375,   376,    -1,   378,   379,   380,
   381,    44,   383,   384,   385,   257,   258,   259,    -1,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,    -1,   299,    91,    -1,
   302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
    -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
   342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,    -1,   364,   365,   366,   367,   368,   369,   317,    -1,
     0,   373,   374,   375,   376,    -1,   378,   379,   380,   381,
    10,   383,   384,   385,   333,   334,    -1,    -1,   882,    -1,
    -1,    -1,   886,    -1,    -1,    -1,    -1,    -1,    -1,   348,
    -1,   350,    -1,   352,   353,   354,   355,    -1,    -1,   358,
    -1,   360,    -1,   306,    44,   308,   309,   310,   311,   312,
    -1,    -1,    -1,    -1,   317,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,   973,   973,    -1,   976,
   976,   978,   978,   980,   980,    -1,   339,   340,    -1,    -1,
    -1,    -1,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
   306,    91,   308,   309,   310,   311,   312,    -1,    -1,    -1,
    -1,   317,   306,    -1,   308,   309,   310,   311,   312,    -1,
    -1,    -1,    -1,   317,    -1,    -1,   279,   280,    -1,    -1,
    -1,    -1,   385,   339,    -1,    -1,    -1,    -1,    -1,     0,
    -1,   347,   348,   349,   350,   339,    -1,    -1,    -1,    10,
    -1,    -1,    -1,   347,   348,   349,   350,    -1,    -1,  1056,
  1056,  1058,  1058,  1060,  1060,    -1,  1063,  1063,    -1,    -1,
  1024,    -1,    -1,  1027,  1028,   328,    -1,  1031,  1032,   385,
    -1,    -1,   335,    44,  1081,  1081,    -1,   340,    -1,    -1,
    -1,   385,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,   361,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
    -1,  1075,  1076,  1077,  1078,   333,   334,    -1,    -1,    -1,
    91,  1085,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,
    -1,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    -1,   299,
    -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,    -1,    -1,   333,   334,   335,   336,    -1,   338,   339,
   340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,   374,   375,   376,    -1,   378,   379,
   380,   381,    44,   383,   384,   385,   257,   258,   259,    -1,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,    -1,   299,    91,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    -1,    -1,   333,   334,   335,   336,    -1,   338,   339,   340,
   341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,   362,    -1,   364,   365,   366,   367,   368,   369,    -1,
    -1,     0,   373,   374,   375,   376,    -1,   378,   379,   380,
   381,    10,   383,   384,   385,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   306,   307,    -1,
    -1,   310,    -1,    -1,    -1,   314,   315,    -1,   317,   318,
   319,   320,   321,   322,   323,    44,    -1,   326,   327,    -1,
    -1,    -1,   331,   332,   333,   334,    -1,    -1,    -1,    58,
    59,   340,    61,    -1,    63,    -1,    -1,    -1,   347,   348,
    -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,
    -1,   306,   307,    -1,    -1,   310,    -1,   279,   280,   314,
   315,    -1,   317,   318,   319,   320,   321,   322,   323,    -1,
     0,   326,   327,    -1,    -1,    -1,   331,   332,   333,   334,
    10,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,
    -1,    -1,   347,   348,    -1,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   328,    -1,   363,    -1,
    -1,    -1,    -1,   335,    44,    -1,    -1,    -1,   340,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
   385,    -1,   317,    63,    -1,    -1,    -1,   322,   323,   361,
    -1,   306,    -1,   308,   309,   310,   311,   312,   333,   334,
    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,   348,    -1,   350,    -1,   352,   353,   354,
   355,   356,   357,   358,   339,   360,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   349,   350,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   385,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,   338,
   339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
   369,    -1,    -1,    -1,   373,   374,   375,   376,    -1,   378,
   379,   380,   381,    44,   383,   384,   385,   257,   258,   259,
    -1,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,    -1,   299,
    91,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,    -1,    -1,   333,   334,   335,   336,    -1,   338,   339,
   340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,     0,   373,   374,   375,   376,    -1,   378,   379,
   380,   381,    10,   383,   384,   385,    -1,    -1,    -1,    -1,
    -1,    -1,   306,   307,    -1,    -1,   310,    -1,    -1,    -1,
   314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
    -1,    -1,   326,   327,    -1,    -1,    44,   331,   332,   333,
   334,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,
    58,    59,    -1,   347,   348,    63,   350,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,    -1,    -1,   363,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   306,   307,    -1,    -1,   310,    -1,   279,   280,
   314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
    -1,     0,   326,   327,    -1,    -1,    -1,   331,   332,   333,
   334,    10,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,
    -1,    -1,    -1,   347,   348,    -1,   350,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   328,    -1,   363,
    -1,    -1,    -1,    -1,   335,    44,    -1,    -1,    -1,   340,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,   385,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
   361,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
   326,   327,    -1,    -1,    -1,    -1,    -1,   333,   334,    -1,
    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   348,    -1,   350,    -1,   352,   353,   354,   355,
   356,   357,   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,
   258,   259,    -1,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
    -1,   299,    -1,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
   338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,   374,   375,   376,    -1,
   378,   379,   380,   381,    44,   383,   384,   385,   257,   258,
   259,    -1,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
    -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
   299,    91,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,   338,
   339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
   369,    -1,    -1,     0,   373,   374,   375,   376,    -1,   378,
   379,   380,   381,    10,   383,   384,   385,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   306,
   307,    -1,    -1,   310,    -1,    -1,    -1,   314,   315,    -1,
   317,   318,   319,   320,   321,   322,   323,    44,    -1,   326,
   327,    -1,    -1,    -1,   331,   332,   333,   334,    -1,    -1,
    -1,    58,    59,   340,    61,    -1,    63,    -1,    -1,    -1,
   347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,    -1,    -1,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
    -1,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,   279,
   280,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
   323,    -1,     0,   326,   327,    -1,    -1,    -1,   331,   332,
   333,   334,    10,    -1,    -1,    -1,    -1,   340,    -1,    -1,
    -1,    -1,    -1,    -1,   347,   348,    -1,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,   328,    -1,
   363,    -1,    -1,    -1,    -1,   335,    44,    -1,    -1,    -1,
   340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,   385,    -1,    -1,    63,    -1,    -1,    -1,    -1,
    -1,   361,   317,   318,   319,   320,   321,   322,   323,    -1,
    -1,   326,   327,    -1,    -1,    -1,    -1,    -1,   333,   334,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    -1,   348,    -1,   350,    -1,   352,   353,   354,
   355,   356,   357,   358,    -1,   360,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   257,   258,   259,    -1,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    -1,    63,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,    -1,    -1,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,    -1,    -1,   333,   334,   335,   336,
    -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,    -1,   362,    -1,   364,   365,   366,
   367,   368,   369,    -1,    -1,    -1,   373,   374,   375,   376,
    -1,   378,   379,   380,   381,    -1,   383,   384,   385,   257,
   258,   259,    -1,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,    59,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
   338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,     0,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    10,   383,   384,   385,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,    44,   329,
   330,    -1,    -1,   333,   334,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    -1,    63,   348,    -1,
   350,    -1,   352,   353,   354,   355,   356,   357,   358,    -1,
   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,
   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,     0,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    10,   292,    -1,    -1,    -1,    -1,    -1,
   298,   299,   300,   301,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,   339,    59,    -1,   342,   343,    63,   345,    -1,   347,
    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    91,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,    -1,    -1,   333,   334,   335,
   336,    -1,   338,   339,    -1,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    44,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   385,
   257,   258,   259,    -1,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,    -1,    -1,   333,   334,   335,   336,
    -1,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,     0,   362,    -1,   364,   365,   366,
   367,   368,   369,    -1,    10,    -1,   373,    10,   375,   376,
    -1,   378,   379,   380,   381,    -1,   383,   384,   385,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    61,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    91,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,     0,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    10,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,    -1,    -1,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,    -1,
    -1,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,    10,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    91,   383,   384,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    91,   280,    -1,   279,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   328,    -1,   333,   334,   335,
   336,   337,   335,   339,   340,   341,   342,   343,   341,   345,
    -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   385,
   257,   258,   259,    -1,   261,   262,   263,   264,   265,   266,
    -1,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,    -1,   280,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,    -1,    -1,   333,   334,   335,   336,
   337,   279,   339,   340,   341,   342,   343,    -1,   345,    -1,
   347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   361,   362,    -1,   364,   365,   366,
   367,   368,   369,    -1,    -1,     0,   373,    -1,   375,   376,
    -1,   378,   379,   380,   381,    10,   383,   384,   385,    -1,
   328,    -1,    -1,    -1,    -1,    -1,    -1,   335,    -1,    -1,
    -1,   306,   307,   341,    -1,   310,    -1,    -1,    -1,   314,
   315,    -1,   317,   318,   319,   320,   321,   322,   323,    44,
    -1,   326,   327,    -1,    -1,    -1,   331,   332,   333,   334,
    -1,    -1,    -1,    -1,    59,   340,    61,    -1,    63,    -1,
    -1,    -1,   347,   348,    -1,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,    -1,    -1,   363,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,
   385,    -1,   314,   315,    -1,   317,   318,   319,   320,   321,
   322,   323,    -1,    -1,   326,   327,    -1,    -1,    -1,   331,
   332,   333,   334,    -1,     0,    -1,    -1,    -1,   340,    -1,
    -1,    -1,    -1,    -1,    10,   347,   348,    10,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   306,
   307,   363,    -1,   310,    -1,    -1,    -1,   314,   315,    -1,
   317,   318,   319,   320,   321,   322,   323,    -1,    44,   326,
   327,    44,    -1,   385,   331,   332,   333,   334,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    61,    -1,
   347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,    -1,    -1,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   257,   258,   259,    -1,   261,   262,   263,   264,
   265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,    -1,   280,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
   335,   336,    -1,    -1,   339,   340,   341,   342,   343,    63,
   345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,   361,   362,    -1,   364,
   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,
   375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
   385,   257,   258,   259,    -1,   261,   262,   263,   264,   265,
   266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    -1,   280,    -1,   279,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   328,    -1,   333,   334,   335,
   336,    -1,   335,   339,   340,   341,   342,   343,   341,   345,
    -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,     0,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    10,   383,   384,   385,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,   333,
   334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   348,     0,   350,    -1,   352,   353,
   354,   355,   356,   357,   358,    10,   360,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,    63,    61,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,    -1,   261,   262,   263,
   264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,    10,   280,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
   334,   335,   336,    -1,    -1,   339,   340,   341,   342,   343,
    -1,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
   354,   355,   356,   357,   358,   359,   360,   361,   362,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   385,   257,   258,   259,    -1,   261,   262,   263,   264,
   265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,   279,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,    63,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   328,    -1,   333,   334,
   335,   336,    -1,   335,   339,   340,   341,   342,   343,   341,
   345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,     0,   362,    -1,   364,
   365,   366,   367,   368,   369,    -1,    10,    -1,   373,    -1,
   375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
   385,    -1,    -1,    -1,   759,    -1,    -1,    -1,    -1,    -1,
    -1,   766,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,   777,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    59,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,
   345,    -1,   347,    -1,   349,    -1,   351,    -1,    10,    -1,
    -1,    -1,    -1,    -1,   359,    -1,    10,    -1,    -1,   364,
   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,
   375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
   385,    -1,    44,    -1,    -1,    -1,    -1,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    -1,    -1,    -1,    59,    -1,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
   330,    -1,    -1,   333,   334,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,   348,    -1,
   350,    -1,   352,   353,   354,   355,   356,   357,   358,   964,
   360,   966,    -1,   968,    -1,    -1,    -1,    -1,   973,    -1,
    -1,    -1,    -1,    -1,    -1,   980,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,    -1,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,    -1,   280,   281,    10,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,    -1,    -1,    -1,    -1,  1052,    -1,    -1,
    -1,    -1,    -1,  1058,   328,  1060,    -1,    59,  1063,    -1,
    -1,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
    -1,   345,    -1,   347,    -1,   349,  1081,   351,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   359,    -1,   361,   362,    91,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   385,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,    -1,    -1,   269,   270,   279,   272,   273,
   274,   275,   276,   277,   278,    -1,   280,    10,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,   298,   299,    -1,   301,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,    -1,   313,
   314,   315,   316,    -1,    -1,    -1,   328,    -1,    -1,    -1,
    -1,    -1,    -1,   335,   328,    -1,    59,    -1,    -1,   341,
    -1,   335,   336,    -1,    -1,   339,   340,    -1,   342,   343,
    -1,   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,   356,    -1,    -1,   359,    -1,   361,    91,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   266,    -1,    10,   269,   270,    10,
   272,   273,   274,   275,   276,   277,   278,    -1,   280,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,   301,
   302,   303,   304,    44,   306,   307,   308,   309,   310,   311,
    -1,   313,   314,   315,   316,    59,    -1,    -1,    -1,    -1,
    61,    -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
    -1,    -1,    -1,   335,   336,    -1,    -1,   339,   340,    -1,
   342,   343,    -1,   345,    -1,   347,    -1,    91,    -1,   351,
    91,    -1,    -1,    -1,   356,    -1,    -1,   359,    -1,   361,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,   256,   257,   258,   259,   260,   261,   262,
   263,   264,   265,   266,    -1,    10,   269,   270,    10,   272,
   273,   274,   275,   276,   277,   278,    -1,   280,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,   301,   302,
   303,   304,    44,   306,   307,   308,   309,   310,   311,    -1,
   313,   314,   315,   316,    59,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
    -1,    -1,   335,   336,    -1,    -1,   339,   340,    -1,   342,
   343,    -1,   345,    -1,   347,    -1,    91,    -1,   351,    91,
    -1,    -1,    -1,   356,    -1,    -1,   359,    -1,   361,    -1,
    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,
   373,    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,
   383,   384,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,    -1,    10,   269,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,   279,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,   298,   299,    -1,   301,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,    -1,   313,
   314,   315,   316,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   328,    -1,    -1,   328,    -1,    -1,
    -1,   335,   336,    -1,   335,   339,   340,    -1,   342,   343,
   341,   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,   356,    -1,    -1,   359,    -1,    -1,    -1,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   256,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   266,    -1,    10,   269,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,   279,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,   298,   299,    -1,   301,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
   315,   316,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   328,    -1,    -1,   328,    -1,    -1,    -1,
   335,   336,    -1,   335,   339,    -1,    -1,   342,   343,   341,
   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,
    -1,   356,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,
   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,
   375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,    10,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,
    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   256,
   257,   258,   259,   260,   261,    -1,    -1,   264,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    10,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,
    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,
   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,
   257,   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,
    10,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,
    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,
   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   359,    -1,    -1,   362,    -1,   364,   365,   366,
   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,     0,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    10,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,    -1,
    -1,    58,    59,   351,    61,    -1,    63,    -1,    -1,    -1,
    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    91,   383,   384,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,     0,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    10,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,   336,    -1,    -1,   339,
    -1,    -1,   342,   343,    -1,   345,    -1,    -1,    -1,    58,
    59,   351,    -1,    -1,    63,    -1,    -1,    -1,    -1,   359,
    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,
   380,   381,    91,   383,   384,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   768,    -1,    -1,   771,    -1,    -1,    -1,    -1,
    -1,   777,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   280,   281,   282,    -1,    -1,    44,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    58,    59,    -1,    61,    -1,    63,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,    -1,    91,   333,   334,   335,    -1,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    -1,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
   357,   358,    -1,   360,   361,   362,    -1,    -1,    -1,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   280,   281,   282,    -1,    44,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    58,
    59,    -1,    61,    -1,    63,    -1,   305,   973,    -1,    -1,
   976,    -1,   978,    -1,   980,    -1,    -1,    -1,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,    91,    -1,   333,   334,   335,    -1,    -1,   338,
    -1,    -1,   341,    -1,    -1,   344,    -1,   346,    -1,   348,
    -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
    -1,   360,   361,   362,     0,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    10,   374,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
  1056,    -1,  1058,    -1,  1060,   281,   282,  1063,    -1,    -1,
    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,  1081,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,    -1,    -1,   333,   334,   335,
    -1,   337,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,
   346,    -1,   348,    -1,   350,    -1,   352,   353,   354,   355,
   356,   357,   358,    -1,   360,    -1,   362,    -1,    -1,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,   282,    -1,    44,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    58,
    59,    -1,    61,    -1,    63,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,    91,    -1,   333,   334,   335,    -1,   337,   338,
    -1,    -1,   341,    -1,    -1,   344,    -1,   346,    -1,   348,
     0,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
    10,   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
    -1,   267,   268,   269,    44,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,     0,   335,
    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    -1,    58,    59,    -1,    61,
    -1,    63,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,    -1,    -1,   333,   334,   335,    -1,   337,   338,
    -1,    -1,   341,    -1,    -1,   344,    -1,   346,    -1,   348,
     0,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
    10,   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   262,   263,   264,   374,    -1,   267,   268,   269,
    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   281,   282,    -1,    44,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    58,    59,
    -1,    61,    -1,    63,    -1,   305,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,    91,    -1,   333,   334,   335,    -1,   337,   338,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,   348,     0,
   350,    -1,   352,   353,   354,   355,   356,   357,   358,    10,
   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,   374,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    58,    59,    -1,
    61,    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
    91,   333,   334,   335,    -1,   337,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    -1,   348,     0,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    10,   360,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,
    63,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,    -1,    -1,   333,   334,   335,    -1,   337,   338,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,   348,     0,
   350,    -1,   352,   353,   354,   355,   356,   357,   358,    10,
   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,   374,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    58,    59,    -1,
    61,    -1,    63,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,   337,   338,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,    -1,   348,     0,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,    10,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,    -1,   374,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    -1,    44,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    58,    59,    -1,    61,
    -1,    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,    -1,    91,
   333,   334,   335,    -1,   337,   338,    -1,    -1,   341,    -1,
    -1,   344,    -1,   346,    -1,   348,     0,   350,    -1,   352,
   353,   354,   355,   356,   357,   358,    10,   360,    -1,   362,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    63,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    -1,    -1,   333,   334,   335,    -1,   337,   338,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,    -1,   348,     0,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,    10,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,   374,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    58,    59,    -1,    61,
    -1,    63,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,   337,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    -1,   348,     0,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    10,   360,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,   374,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   280,   281,   282,    -1,
    -1,    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    58,    59,    -1,    61,    -1,
    63,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,    -1,    91,   333,
   334,   335,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,
   344,    -1,   346,    -1,   348,     0,   350,    -1,   352,   353,
   354,   355,   356,   357,   358,    10,   360,   361,   362,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    63,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   305,    -1,    -1,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
    -1,   333,   334,   335,    -1,    -1,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    -1,   348,     0,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    10,   360,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,   374,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    58,    59,    -1,    -1,    -1,
    63,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,    91,    -1,
   333,   334,   335,    -1,    -1,   338,    -1,    -1,   341,    -1,
    -1,   344,    -1,   346,    -1,   348,     0,   350,    -1,   352,
   353,   354,   355,   356,   357,   358,    10,   360,    -1,   362,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,   374,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,    -1,    91,   333,   334,
   335,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,
    -1,   346,    -1,   348,     0,   350,    -1,   352,   353,   354,
   355,   356,   357,   358,    10,   360,    -1,   362,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    63,   281,   282,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,    -1,    -1,
   333,   334,   335,    -1,    -1,   338,    -1,    -1,   341,    -1,
    -1,   344,    -1,   346,    -1,   348,     0,   350,    -1,   352,
   353,   354,   355,   356,   357,   358,    10,   360,    -1,   362,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,
   264,   374,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    44,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    58,    59,    -1,    -1,    -1,    63,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,    91,    -1,   333,
   334,   335,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,
   344,    -1,   346,    -1,   348,     0,   350,    -1,   352,   353,
   354,   355,   356,   357,   358,    10,   360,    -1,   362,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,
   374,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    44,
    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,    -1,    -1,   333,   334,   335,
    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,
   346,    -1,   348,     0,   350,    -1,   352,   353,   354,   355,
   356,   357,   358,    10,   360,    -1,   362,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    58,    59,    -1,    -1,    -1,    63,   281,   282,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
   334,   335,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,
   344,    -1,   346,    -1,   348,     0,   350,    -1,   352,   353,
   354,   355,   356,   357,   358,    10,   360,    -1,   362,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
   374,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    44,
    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    58,    59,    -1,    -1,    -1,    63,    -1,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,    -1,   329,   330,    -1,    -1,   333,   334,
    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,
    -1,   346,    -1,   348,     0,   350,    -1,   352,   353,   354,
   355,   356,   357,   358,    10,   360,    -1,   362,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,   374,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    44,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    58,    59,    -1,    -1,    -1,    63,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,    -1,   329,   330,    -1,    -1,   333,   334,    -1,    -1,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    -1,   348,     0,   350,    -1,   352,   353,   354,   355,   356,
   357,   358,    10,   360,    -1,   362,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,   262,   263,   264,
    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    63,   281,   282,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,    -1,   329,   330,    -1,    -1,   333,   334,
     0,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,
    10,   346,    -1,   348,    -1,   350,    -1,   352,   353,   354,
   355,   356,   357,   358,    -1,   360,    -1,   362,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,   374,
    -1,   267,   268,   269,    44,   271,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    58,    59,
    -1,    -1,    -1,    63,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,    -1,   329,   330,    -1,    -1,   333,   334,    -1,
    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,
   346,    -1,   348,     0,   350,    -1,   352,   353,   354,   355,
   356,   357,   358,    10,   360,    -1,   362,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   262,   263,   264,    -1,   374,   267,
   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   281,   282,    -1,    -1,    44,    -1,    -1,
    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,   297,
    -1,    58,    59,    -1,    -1,    -1,    63,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
    -1,   329,   330,    -1,    -1,   333,   334,    -1,    -1,    -1,
   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,    -1,
   348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
   358,     0,   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,
    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   281,   282,    -1,    -1,    44,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    58,
    59,    -1,    -1,    -1,    63,   305,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
   330,    -1,    -1,   333,   334,    -1,    -1,    -1,   338,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,   348,     0,
   350,    -1,   352,   353,   354,   355,   356,   357,   358,    10,
   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    44,   271,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    58,    59,    -1,
    -1,    -1,    63,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,    -1,   329,   330,    -1,    -1,   333,   334,     0,    -1,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    10,   346,
    -1,    -1,    -1,   350,    -1,    -1,    -1,   354,   355,   356,
   357,   358,    -1,   360,    -1,   362,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
    -1,    -1,    44,   262,   263,   264,    -1,    -1,   267,   268,
   269,    -1,   271,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    63,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
   329,   330,    -1,    -1,   333,   334,    -1,    -1,     0,   338,
    -1,    -1,   341,    -1,    -1,   344,    -1,   346,    10,    -1,
    -1,   350,    -1,    -1,    -1,   354,   355,   356,   357,   358,
    -1,   360,    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,   374,   267,   268,   269,    -1,
   271,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    58,    59,    -1,   290,
   291,    63,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
    -1,    -1,   333,   334,    -1,    -1,    -1,   338,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,    -1,    -1,     0,   350,
    -1,    -1,    -1,    -1,    -1,   356,   357,   358,    10,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,   374,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    58,    59,    -1,    -1,
    -1,    63,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,    -1,   329,   330,    -1,
    -1,   333,   334,    -1,    -1,    -1,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    -1,    -1,     0,   350,    -1,
    -1,    -1,    -1,    -1,   356,   357,   358,    10,   360,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    58,    59,    -1,   290,   291,
    63,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,    -1,   329,   330,    -1,
    -1,    -1,    -1,    -1,    -1,     0,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    10,    -1,    -1,   350,    -1,
    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    44,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    63,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,    -1,   329,   330,    -1,
    -1,    -1,    -1,     0,    -1,    -1,   338,    -1,    -1,   341,
    -1,    -1,   344,    10,   346,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   356,   357,   358,    -1,   360,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,   264,   374,    -1,   267,   268,   269,    44,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,
    -1,    58,    59,    -1,    -1,    -1,    63,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,
    -1,   344,    -1,   346,    -1,    -1,     0,    -1,    -1,    -1,
    -1,    -1,    -1,   356,   357,   358,    10,   360,    -1,   362,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    -1,   374,   267,   268,   269,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    58,    59,    -1,    -1,    -1,    63,
   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,
    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   356,   357,     0,    -1,    -1,    -1,   362,    -1,    -1,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,   374,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    44,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    58,    59,    -1,    -1,    -1,    63,    -1,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,    -1,   329,   330,    -1,    -1,    -1,    -1,    -1,    -1,
     0,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
   357,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    58,    59,
    -1,    -1,    -1,    63,    -1,    -1,    -1,   281,   282,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,     0,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,
   344,    44,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   356,   357,    -1,    58,    59,    -1,   362,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   374,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,     0,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   281,   282,    10,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,    -1,   329,   330,    58,    59,    -1,    -1,    -1,    63,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
   357,    -1,   262,   263,   264,   362,    -1,   267,   268,   269,
    -1,   271,    -1,     0,    -1,    -1,    -1,   374,    -1,    -1,
    -1,   281,   282,    10,    -1,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,   324,   325,    -1,    -1,    -1,   329,
   330,    58,    59,    -1,    -1,    -1,    63,    -1,   338,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
     0,    -1,   362,    -1,    -1,    -1,    -1,    -1,   281,   282,
    10,    -1,    -1,    -1,   374,    -1,    -1,   290,   291,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,   324,   325,    -1,    -1,    -1,   329,   330,    58,    59,
    -1,    -1,    -1,    63,    -1,   338,    -1,    -1,   341,    -1,
    -1,   344,    -1,   346,    -1,    -1,    -1,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,   362,
     0,    -1,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    10,   374,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
   324,   325,    -1,    -1,    -1,   329,   330,    -1,    58,    59,
    -1,    -1,    -1,    63,   338,    -1,    -1,   341,    -1,    -1,
   344,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,   362,    -1,
   267,   268,   269,    -1,   271,    -1,     0,    -1,    -1,    -1,
   374,    -1,    -1,    -1,   281,   282,    10,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,   324,   325,    -1,
    -1,    -1,   329,   330,    58,    59,    -1,    -1,    -1,    63,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    -1,     0,    -1,   362,    -1,    -1,    -1,    -1,
    -1,   281,   282,    10,    -1,    -1,    -1,   374,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    10,    -1,    -1,   324,   325,    -1,    -1,    -1,   329,
   330,    58,    59,    -1,    -1,    -1,    63,    -1,   338,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,    -1,    -1,
    -1,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,   362,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    59,   281,   282,    10,   374,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     0,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    10,   324,   325,    -1,    -1,    -1,   329,
   330,    58,    59,    -1,    -1,    -1,    63,    -1,   338,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,   262,   263,
   264,    -1,   362,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,    58,    59,    -1,   374,    -1,    63,   281,   282,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
   324,   325,    -1,    -1,    -1,   329,   330,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,
   344,    -1,   346,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    44,   271,    -1,    -1,    -1,   362,    -1,
    -1,    -1,    -1,    -1,   281,   282,    -1,    58,    59,    -1,
   374,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,   262,   263,   264,    -1,    -1,   305,   268,
   269,    -1,   271,    -1,     0,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,   325,    -1,
    -1,    -1,   329,   330,   293,   294,   295,   296,   297,    -1,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    -1,    -1,    -1,    -1,    -1,   262,   263,   264,    44,    -1,
   267,   268,   269,    -1,   271,   362,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,   281,   282,    -1,   374,    -1,    -1,
    -1,    -1,   341,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,    -1,    -1,    -1,   262,   263,   264,   305,     0,
   267,   268,   269,   362,   271,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,   338,    -1,    -1,   341,    -1,    -1,   344,   305,   346,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   362,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,
    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    10,   362,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    44,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,     0,
   341,    -1,    -1,   344,    -1,   346,   262,   263,   264,    10,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,   362,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   374,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    44,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   338,    -1,     0,   341,    -1,    -1,   344,    -1,
   346,   262,   263,   264,    10,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   374,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    44,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,     0,
   341,    -1,    -1,   344,    -1,   346,   262,   263,   264,    10,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,   362,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   374,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    44,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   338,    -1,     0,   341,    -1,    -1,   344,    -1,
   346,   262,   263,   264,    10,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   374,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    44,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,     0,
   341,    -1,    -1,   344,    -1,   346,   262,   263,   264,    10,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,   362,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   374,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    44,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   338,    -1,     0,   341,    -1,    -1,   344,    -1,
   346,   262,   263,   264,    10,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   374,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    44,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,     0,
   341,    -1,    -1,   344,    -1,   346,   262,   263,   264,    10,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,
    -1,   362,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   374,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    44,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   338,    -1,     0,   341,    -1,    -1,   344,    -1,
   346,   262,   263,   264,    10,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,   374,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    44,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     0,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,   262,   263,   264,    -1,
    -1,   267,   268,   269,    -1,   271,    44,    -1,    -1,    -1,
    -1,   362,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    58,    59,    -1,   374,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   338,    -1,    -1,   341,    -1,    -1,   344,    -1,
   346,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    44,    -1,    -1,    -1,   362,    -1,    -1,    -1,
   281,   282,    -1,    -1,    -1,    -1,    -1,    59,   374,   290,
   291,    63,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,   262,   263,   264,     0,
    -1,   267,   268,   269,    -1,   271,    -1,    -1,    -1,    10,
    -1,   362,    -1,    -1,    -1,   281,   282,    -1,    -1,    -1,
    -1,    -1,    -1,   374,   290,   291,    -1,   293,   294,   295,
   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    59,   267,
   268,   269,    63,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   338,   281,   282,   341,    -1,    -1,   344,    -1,
   346,    -1,   290,   291,    -1,   293,   294,   295,   296,    -1,
    91,    -1,    -1,    -1,    -1,    -1,   362,   305,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   374,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
   338,    -1,    -1,   341,    -1,    -1,   344,    -1,   346,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,   362,    -1,    -1,    -1,    -1,   281,
   282,    -1,    44,    -1,    -1,    -1,   374,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    -1,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,    -1,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,   282,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,    -1,   338,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,     0,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,    -1,   338,    -1,    -1,   341,
    -1,    -1,   344,    -1,   346,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,     0,   360,
   361,   362,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,     0,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,     0,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,     0,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,     0,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    91,
    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    91,    -1,   333,   334,   335,    -1,   337,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,     0,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,    10,   360,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
     0,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    59,   290,   291,
    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    44,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,    59,
    -1,   333,   334,   335,    -1,    -1,    -1,    -1,    -1,   341,
    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,
   352,   353,   354,   355,   356,   357,   358,    -1,   360,     0,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
    -1,    -1,   333,   334,   335,    59,    -1,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,
    -1,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
    -1,   362,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   262,   263,   264,    10,    -1,   267,   268,   269,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,
     0,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
    10,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    -1,   341,
    -1,    -1,   344,    -1,   346,     0,    -1,    -1,    -1,    59,
    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   341,    -1,    -1,   344,    -1,   346,    -1,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,     0,
   271,    -1,   362,    -1,    59,    -1,    -1,    -1,    -1,    10,
   281,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
    -1,    10,    -1,    -1,    -1,    -1,   290,   291,    59,   293,
   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,
   341,    -1,    -1,   344,    -1,   346,    -1,    -1,    -1,     0,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,
   344,    -1,    -1,    -1,    -1,   262,   263,   264,    -1,    -1,
   267,   268,   269,    -1,   271,    -1,    -1,    -1,   362,     0,
    -1,    -1,    -1,    -1,   281,   282,    -1,    -1,    59,    10,
    -1,    -1,    -1,   290,   291,    -1,   293,   294,   295,   296,
   297,    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,
    -1,   271,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    -1,   281,   282,    44,    -1,    -1,    10,    -1,    -1,    -1,
   290,   291,    -1,   293,   294,   295,   296,   297,    59,    -1,
    -1,    -1,    -1,    -1,   341,    -1,    -1,   344,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,   263,   264,
    44,    -1,   267,   268,   269,   362,   271,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,   281,    -1,    -1,    -1,
    -1,   341,    -1,    -1,   344,   290,   291,    -1,   293,   294,
   295,   296,   297,    -1,    -1,    -1,    -1,     0,    -1,    -1,
    -1,    -1,   362,    -1,    -1,    -1,    -1,    10,    -1,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   281,    -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,   290,
   291,    44,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,   262,   263,   264,    59,   362,   267,   268,
   269,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   281,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    -1,   290,   291,    -1,   293,   294,   295,   296,   297,    10,
   341,   262,   263,   264,    -1,    -1,   267,   268,   269,     0,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
   281,   362,    -1,    -1,    -1,    -1,    -1,    -1,     0,   290,
   291,    -1,   293,   294,   295,   296,   297,    -1,    10,    -1,
    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,    59,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,   362,    -1,    -1,    -1,    -1,    59,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   341,    -1,   293,   294,   295,   296,   297,    59,   262,   263,
   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,    -1,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   293,
   294,   295,   296,   297,    -1,    -1,    -1,   338,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,   262,
   263,   264,    -1,    -1,   267,   268,   269,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   362,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,   341,    -1,
    -1,   262,   263,   264,    -1,    -1,   267,   268,   269,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   362,
   281,   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,
   271,    -1,   293,   294,   295,   296,   297,    59,    -1,    -1,
   262,   263,   264,    -1,    -1,    -1,   268,   269,    -1,   271,
    -1,    -1,   293,   294,   295,   296,   297,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,   291,
    -1,   293,   294,   295,   296,    -1,    -1,    -1,    -1,    -1,
   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   341,   362,    -1,    -1,    -1,    -1,    -1,   257,   258,   259,
    63,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,   341,
   270,   362,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
   362,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,    -1,   313,    -1,    -1,   316,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,
    -1,    -1,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,
   380,   381,    -1,   383,   384,   257,   258,   259,   260,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,   301,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
    -1,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,
   342,   343,    -1,   345,    -1,   347,    -1,    -1,    -1,   351,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,    -1,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
   333,   334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,   352,
   353,   354,   355,   356,   357,   358,    -1,   360,   257,   258,
   259,   260,   261,   262,   263,   264,    -1,    -1,   267,   268,
   269,   270,   271,    -1,    -1,   274,   275,   276,   277,   278,
   279,   280,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,    -1,    -1,   314,   315,    -1,   317,   318,
   319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
    -1,    -1,   331,   332,   333,   334,    -1,    -1,    -1,    -1,
    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,   347,   348,
    -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,
   257,   258,   259,   260,   261,   262,   263,   264,    -1,    -1,
   267,   268,   269,   270,   271,    -1,   385,   274,   275,   276,
   277,   278,   279,   280,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,    -1,    -1,   314,   315,    -1,
   317,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
   327,    -1,    -1,    -1,   331,   332,   333,   334,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,    -1,    -1,   363,    -1,    -1,    -1,
    -1,    -1,   257,   258,   259,   260,   261,   262,   263,   264,
    -1,    -1,   267,   268,   269,   270,   271,    -1,   385,   274,
   275,   276,   277,   278,   279,   280,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
    -1,   306,   307,   308,    -1,   310,    -1,    -1,    -1,   314,
   315,    -1,   317,   318,   319,   320,   321,   322,   323,    -1,
    -1,   326,   327,    -1,    -1,    -1,   331,   332,   333,   334,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   347,   348,    -1,   350,   351,   352,   353,   354,
   355,   356,   357,   358,   359,   360,    -1,    -1,   363,   364,
    -1,    -1,    -1,    -1,   257,   258,   259,   260,   261,   262,
   263,   264,    -1,    -1,   267,   268,   269,   270,   271,    -1,
   385,   274,   275,   276,   277,   278,   279,   280,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,    -1,   306,   307,    -1,    -1,   310,    -1,    -1,
    -1,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
   323,    -1,    -1,   326,   327,    -1,    -1,    -1,   331,   332,
   333,   334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   347,   348,    -1,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,   360,    -1,    -1,
   363,   364,    -1,    -1,    -1,    -1,   257,   258,   259,   260,
   261,   262,   263,   264,    -1,    -1,   267,   268,   269,   270,
   271,    -1,   385,   274,   275,   276,   277,   278,   279,   280,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,    -1,   306,   307,    -1,    -1,   310,
    -1,    -1,    -1,   314,   315,    -1,   317,   318,   319,   320,
   321,   322,   323,    -1,    -1,   326,   327,    -1,    -1,    -1,
   331,   332,   333,   334,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   347,   348,    -1,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,   256,
   257,   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,   385,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,   298,   299,   300,   301,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,
    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,
   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
    -1,   378,   379,   380,   381,    -1,   383,   384,   256,   257,
   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
   298,   299,    -1,   301,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,   347,
    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    -1,   383,   384,   256,   257,   258,
   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
    -1,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,
   299,    -1,   301,   302,   303,   304,    -1,   306,   307,   308,
   309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,
   339,    -1,    -1,   342,   343,    -1,   345,    -1,   347,    -1,
    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,
   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,
   379,   380,   381,    -1,   383,   384,   257,   258,   259,    -1,
   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,
    -1,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
    -1,    -1,   283,   284,   285,   286,   287,   288,   289,    -1,
    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
    -1,   302,   303,   304,    -1,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,
    -1,   342,   343,    -1,   345,    -1,   347,    -1,   349,    -1,
   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,
    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,
    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,
   381,    -1,   383,   384,   385,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,
   342,   343,    -1,   345,    -1,   347,    -1,   349,    -1,   351,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,   385,   257,   258,   259,    -1,   261,    -1,
    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,
   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,
   283,   284,   285,   286,   287,   288,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
   303,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,   342,
   343,    -1,   345,    -1,   347,    -1,   349,    -1,   351,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,
    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,
   373,    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,
   383,   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,   342,   343,
    -1,   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,
   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,
   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,
   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
    -1,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,
   345,    -1,    -1,    -1,   349,    -1,   351,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,
   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,
   375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
   385,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,
    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   385,
   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,
    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,
   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,
   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,
    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,
    -1,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,
    -1,   378,   379,   380,   381,    -1,   383,   384,   385,   257,
   258,   259,   260,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
   298,   299,   300,   301,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,   347,
    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    -1,   383,   384,   257,   258,   259,
   260,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   298,   299,
    -1,   301,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,
    -1,    -1,   342,   343,    -1,   345,    -1,   347,    -1,    -1,
    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,
    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,
   380,   381,    -1,   383,   384,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
    -1,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,   340,    -1,
   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,   351,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,    -1,   313,
   314,   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,   342,   343,
    -1,   345,    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,
    -1,   347,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,   347,
    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    -1,   383,   384,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,
    -1,    -1,   342,   343,    -1,   345,    -1,   347,    -1,    -1,
    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,
    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,
   380,   381,    -1,   383,   384,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
    -1,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,
   342,   343,    -1,   345,    -1,   347,    -1,    -1,    -1,   351,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,    -1,   313,
   314,   315,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   336,    -1,    -1,   339,   340,    -1,   342,   343,
    -1,   345,    -1,    -1,    -1,    -1,    -1,   351,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,
    -1,    -1,    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,    -1,
    -1,    -1,    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    -1,   383,   384,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,
    -1,    -1,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
    -1,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,
    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,
   380,   381,    -1,   383,   384,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
    -1,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,
   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,   351,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,    -1,   313,
    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,
    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,   342,   343,
    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,    -1,   313,    -1,    -1,
   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,
    -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   257,
   258,   259,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,
    -1,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
   278,    -1,    -1,    -1,    -1,   283,   284,   285,   286,   287,
   288,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,   303,   304,    -1,   306,   307,
   308,   309,   310,   311,    -1,   313,    -1,    -1,   316,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
    -1,   339,    -1,    -1,   342,   343,    -1,   345,    -1,   347,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,   366,   367,
   368,   369,    -1,    -1,    -1,   373,    -1,   375,   376,    -1,
   378,   379,   380,   381,    -1,   383,   384,   257,   258,   259,
    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
   270,    -1,   272,   273,   274,   275,   276,   277,   278,    -1,
    -1,    -1,    -1,   283,   284,   285,   286,   287,   288,   289,
    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
   310,   311,    -1,   313,    -1,    -1,   316,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,
    -1,    -1,   342,   343,    -1,   345,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   364,   365,   366,   367,   368,   369,
    -1,    -1,    -1,   373,    -1,   375,   376,    -1,   378,   379,
   380,   381,    -1,   383,   384,   257,   258,   259,    -1,   261,
    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,   270,    -1,
   272,   273,   274,   275,   276,   277,   278,    -1,    -1,    -1,
    -1,   283,   284,   285,   286,   287,   288,   289,    -1,    -1,
   292,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
   302,   303,   304,    -1,   306,   307,   308,   309,   310,   311,
    -1,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,
   342,   343,    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   364,   365,   366,   367,   368,   369,    -1,    -1,
    -1,   373,    -1,   375,   376,    -1,   378,   379,   380,   381,
    -1,   383,   384,   257,   258,   259,    -1,   261,    -1,    -1,
    -1,   265,   266,    -1,    -1,    -1,   270,    -1,   272,   273,
   274,   275,   276,   277,   278,    -1,    -1,    -1,    -1,   283,
   284,   285,   286,   287,   288,   289,    -1,    -1,   292,    -1,
    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
   304,    -1,   306,   307,   308,   309,   310,   311,    -1,   313,
    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   336,    -1,    -1,   339,    -1,    -1,   342,   343,
    -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   364,   365,   366,   367,   368,   369,    -1,    -1,    -1,   373,
    -1,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
   384,   257,   258,   259,    -1,   261,    -1,    -1,    -1,   265,
   266,    -1,    -1,    -1,   270,    -1,   272,   273,   274,   275,
   276,   277,   278,    -1,    -1,    -1,    -1,   283,   284,   285,
   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,    -1,
   306,   307,   308,   309,   310,   311,    -1,   313,    -1,    -1,
   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   336,    -1,    -1,   339,    -1,    -1,   342,   343,    -1,   345,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,
   366,   367,   368,   369,    -1,    -1,    -1,   373,    -1,   375,
   376,    -1,   378,   379,   380,   381,    -1,   383,   384,   306,
   307,    -1,    -1,   310,    -1,    -1,    -1,   314,   315,    -1,
   317,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
   327,    -1,    -1,    -1,   331,   332,   333,   334,    -1,    -1,
    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,
   347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   306,   307,   363,    -1,   310,    -1,
    -1,    -1,   314,   315,    -1,   317,   318,   319,   320,   321,
   322,   323,    -1,    -1,   326,   327,    -1,    -1,   385,   331,
   332,   333,   334,    -1,    -1,    -1,    -1,    -1,   340,    -1,
    -1,    -1,    -1,    -1,    -1,   347,   348,    -1,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   306,
   307,   363,    -1,   310,    -1,    -1,    -1,   314,   315,    -1,
   317,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
   327,    -1,    -1,   385,   331,   332,   333,   334,    -1,    -1,
    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,
   347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,   306,   307,   363,    -1,   310,    -1,
    -1,    -1,   314,   315,    -1,   317,   318,   319,   320,   321,
   322,   323,    -1,    -1,   326,   327,    -1,    -1,   385,   331,
   332,   333,   334,    -1,    -1,    -1,    -1,    -1,   340,    -1,
    -1,    -1,    -1,    -1,    -1,   347,   348,    -1,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,   360,   306,
   307,   363,    -1,   310,    -1,    -1,    -1,   314,   315,    -1,
   317,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
   327,    -1,    -1,   385,   331,   332,   333,   334,    -1,    -1,
    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,
   347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
   357,   358,   359,   360,    -1,    -1,   363,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
    };

  /** maps symbol value to printable name.
      @see #yyExpecting
    */
  protected static final String[] yyNames = {
    "end-of-file",null,null,null,null,null,null,null,null,null,"'\\n'",
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"' '",null,null,null,null,null,
    null,null,null,null,null,null,"','",null,null,null,null,null,null,
    null,null,null,null,null,null,null,"':'","';'",null,"'='",null,"'?'",
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,
    "kCLASS","kMODULE","kDEF","kUNDEF","kBEGIN","kRESCUE","kENSURE",
    "kEND","kIF","kUNLESS","kTHEN","kELSIF","kELSE","kCASE","kWHEN",
    "kWHILE","kUNTIL","kFOR","kBREAK","kNEXT","kREDO","kRETRY","kIN",
    "kDO","kDO_COND","kDO_BLOCK","kRETURN","kYIELD","kSUPER","kSELF",
    "kNIL","kTRUE","kFALSE","kAND","kOR","kNOT","kIF_MOD","kUNLESS_MOD",
    "kWHILE_MOD","kUNTIL_MOD","kRESCUE_MOD","kALIAS","kDEFINED","klBEGIN",
    "klEND","k__LINE__","k__FILE__","k__ENCODING__","kDO_LAMBDA",
    "tIDENTIFIER","tFID","tGVAR","tIVAR","tCONSTANT","tCVAR","tLABEL",
    "tCHAR","tUPLUS","tUMINUS","tUMINUS_NUM","tPOW","tCMP","tEQ","tEQQ",
    "tNEQ","tGEQ","tLEQ","tANDOP","tOROP","tMATCH","tNMATCH","tDOT",
    "tDOT2","tDOT3","tAREF","tASET","tLSHFT","tRSHFT","tCOLON2","tCOLON3",
    "tOP_ASGN","tASSOC","tLPAREN","tLPAREN2","tRPAREN","tLPAREN_ARG",
    "tLBRACK","tRBRACK","tLBRACE","tLBRACE_ARG","tSTAR","tSTAR2","tAMPER",
    "tAMPER2","tTILDE","tPERCENT","tDIVIDE","tPLUS","tMINUS","tLT","tGT",
    "tPIPE","tBANG","tCARET","tLCURLY","tRCURLY","tBACK_REF2","tSYMBEG",
    "tSTRING_BEG","tXSTRING_BEG","tREGEXP_BEG","tWORDS_BEG","tQWORDS_BEG",
    "tSTRING_DBEG","tSTRING_DVAR","tSTRING_END","tLAMBDA","tLAMBEG",
    "tNTH_REF","tBACK_REF","tSTRING_CONTENT","tINTEGER","tIMAGINARY",
    "tFLOAT","tRATIONAL","tREGEXP_END","tSYMBOLS_BEG","tQSYMBOLS_BEG",
    "tDSTAR","tSTRING_DEND","tLABEL_END","tLOWEST",
    };

  /** printable rules for debugging.
    */
  protected static final String [] yyRule = {
    "$accept : program",
    "$$1 :",
    "program : $$1 top_compstmt",
    "top_compstmt : top_stmts opt_terms",
    "top_stmts : none",
    "top_stmts : top_stmt",
    "top_stmts : top_stmts terms top_stmt",
    "top_stmts : error top_stmt",
    "top_stmt : stmt",
    "$$2 :",
    "top_stmt : klBEGIN $$2 tLCURLY top_compstmt tRCURLY",
    "bodystmt : compstmt opt_rescue opt_else opt_ensure",
    "compstmt : stmts opt_terms",
    "stmts : none",
    "stmts : stmt_or_begin",
    "stmts : stmts terms stmt_or_begin",
    "stmts : error stmt",
    "stmt_or_begin : stmt",
    "$$3 :",
    "stmt_or_begin : kBEGIN $$3 tLCURLY top_compstmt tRCURLY",
    "$$4 :",
    "stmt : kALIAS fitem $$4 fitem",
    "stmt : kALIAS tGVAR tGVAR",
    "stmt : kALIAS tGVAR tBACK_REF",
    "stmt : kALIAS tGVAR tNTH_REF",
    "stmt : kUNDEF undef_list",
    "stmt : stmt kIF_MOD expr_value",
    "stmt : stmt kUNLESS_MOD expr_value",
    "stmt : stmt kWHILE_MOD expr_value",
    "stmt : stmt kUNTIL_MOD expr_value",
    "stmt : stmt kRESCUE_MOD stmt",
    "stmt : klEND tLCURLY compstmt tRCURLY",
    "stmt : command_asgn",
    "stmt : mlhs '=' command_call",
    "stmt : var_lhs tOP_ASGN command_call",
    "stmt : primary_value '[' opt_call_args rbracket tOP_ASGN command_call",
    "stmt : primary_value tDOT tIDENTIFIER tOP_ASGN command_call",
    "stmt : primary_value tDOT tCONSTANT tOP_ASGN command_call",
    "stmt : primary_value tCOLON2 tCONSTANT tOP_ASGN command_call",
    "stmt : primary_value tCOLON2 tIDENTIFIER tOP_ASGN command_call",
    "stmt : backref tOP_ASGN command_call",
    "stmt : lhs '=' mrhs",
    "stmt : mlhs '=' mrhs_arg",
    "stmt : expr",
    "command_asgn : lhs '=' command_call",
    "command_asgn : lhs '=' command_asgn",
    "expr : command_call",
    "expr : expr kAND expr",
    "expr : expr kOR expr",
    "expr : kNOT opt_nl expr",
    "expr : tBANG command_call",
    "expr : arg",
    "expr_value : expr",
    "command_call : command",
    "command_call : block_command",
    "block_command : block_call",
    "block_command : block_call dot_or_colon operation2 command_args",
    "$$5 :",
    "cmd_brace_block : tLBRACE_ARG $$5 opt_block_param compstmt tRCURLY",
    "fcall : operation",
    "command : fcall command_args",
    "command : fcall command_args cmd_brace_block",
    "command : primary_value tDOT operation2 command_args",
    "command : primary_value tDOT operation2 command_args cmd_brace_block",
    "command : primary_value tCOLON2 operation2 command_args",
    "command : primary_value tCOLON2 operation2 command_args cmd_brace_block",
    "command : kSUPER command_args",
    "command : kYIELD command_args",
    "command : kRETURN call_args",
    "command : kBREAK call_args",
    "command : kNEXT call_args",
    "mlhs : mlhs_basic",
    "mlhs : tLPAREN mlhs_inner rparen",
    "mlhs_inner : mlhs_basic",
    "mlhs_inner : tLPAREN mlhs_inner rparen",
    "mlhs_basic : mlhs_head",
    "mlhs_basic : mlhs_head mlhs_item",
    "mlhs_basic : mlhs_head tSTAR mlhs_node",
    "mlhs_basic : mlhs_head tSTAR mlhs_node ',' mlhs_post",
    "mlhs_basic : mlhs_head tSTAR",
    "mlhs_basic : mlhs_head tSTAR ',' mlhs_post",
    "mlhs_basic : tSTAR mlhs_node",
    "mlhs_basic : tSTAR mlhs_node ',' mlhs_post",
    "mlhs_basic : tSTAR",
    "mlhs_basic : tSTAR ',' mlhs_post",
    "mlhs_item : mlhs_node",
    "mlhs_item : tLPAREN mlhs_inner rparen",
    "mlhs_head : mlhs_item ','",
    "mlhs_head : mlhs_head mlhs_item ','",
    "mlhs_post : mlhs_item",
    "mlhs_post : mlhs_post ',' mlhs_item",
    "mlhs_node : tIDENTIFIER",
    "mlhs_node : tIVAR",
    "mlhs_node : tGVAR",
    "mlhs_node : tCONSTANT",
    "mlhs_node : tCVAR",
    "mlhs_node : kNIL",
    "mlhs_node : kSELF",
    "mlhs_node : kTRUE",
    "mlhs_node : kFALSE",
    "mlhs_node : k__FILE__",
    "mlhs_node : k__LINE__",
    "mlhs_node : k__ENCODING__",
    "mlhs_node : primary_value '[' opt_call_args rbracket",
    "mlhs_node : primary_value tDOT tIDENTIFIER",
    "mlhs_node : primary_value tCOLON2 tIDENTIFIER",
    "mlhs_node : primary_value tDOT tCONSTANT",
    "mlhs_node : primary_value tCOLON2 tCONSTANT",
    "mlhs_node : tCOLON3 tCONSTANT",
    "mlhs_node : backref",
    "lhs : tIDENTIFIER",
    "lhs : tIVAR",
    "lhs : tGVAR",
    "lhs : tCONSTANT",
    "lhs : tCVAR",
    "lhs : kNIL",
    "lhs : kSELF",
    "lhs : kTRUE",
    "lhs : kFALSE",
    "lhs : k__FILE__",
    "lhs : k__LINE__",
    "lhs : k__ENCODING__",
    "lhs : primary_value '[' opt_call_args rbracket",
    "lhs : primary_value tDOT tIDENTIFIER",
    "lhs : primary_value tCOLON2 tIDENTIFIER",
    "lhs : primary_value tDOT tCONSTANT",
    "lhs : primary_value tCOLON2 tCONSTANT",
    "lhs : tCOLON3 tCONSTANT",
    "lhs : backref",
    "cname : tIDENTIFIER",
    "cname : tCONSTANT",
    "cpath : tCOLON3 cname",
    "cpath : cname",
    "cpath : primary_value tCOLON2 cname",
    "fname : tIDENTIFIER",
    "fname : tCONSTANT",
    "fname : tFID",
    "fname : op",
    "fname : reswords",
    "fsym : fname",
    "fsym : symbol",
    "fitem : fsym",
    "fitem : dsym",
    "undef_list : fitem",
    "$$6 :",
    "undef_list : undef_list ',' $$6 fitem",
    "op : tPIPE",
    "op : tCARET",
    "op : tAMPER2",
    "op : tCMP",
    "op : tEQ",
    "op : tEQQ",
    "op : tMATCH",
    "op : tNMATCH",
    "op : tGT",
    "op : tGEQ",
    "op : tLT",
    "op : tLEQ",
    "op : tNEQ",
    "op : tLSHFT",
    "op : tRSHFT",
    "op : tDSTAR",
    "op : tPLUS",
    "op : tMINUS",
    "op : tSTAR2",
    "op : tSTAR",
    "op : tDIVIDE",
    "op : tPERCENT",
    "op : tPOW",
    "op : tBANG",
    "op : tTILDE",
    "op : tUPLUS",
    "op : tUMINUS",
    "op : tAREF",
    "op : tASET",
    "op : tBACK_REF2",
    "reswords : k__LINE__",
    "reswords : k__FILE__",
    "reswords : k__ENCODING__",
    "reswords : klBEGIN",
    "reswords : klEND",
    "reswords : kALIAS",
    "reswords : kAND",
    "reswords : kBEGIN",
    "reswords : kBREAK",
    "reswords : kCASE",
    "reswords : kCLASS",
    "reswords : kDEF",
    "reswords : kDEFINED",
    "reswords : kDO",
    "reswords : kELSE",
    "reswords : kELSIF",
    "reswords : kEND",
    "reswords : kENSURE",
    "reswords : kFALSE",
    "reswords : kFOR",
    "reswords : kIN",
    "reswords : kMODULE",
    "reswords : kNEXT",
    "reswords : kNIL",
    "reswords : kNOT",
    "reswords : kOR",
    "reswords : kREDO",
    "reswords : kRESCUE",
    "reswords : kRETRY",
    "reswords : kRETURN",
    "reswords : kSELF",
    "reswords : kSUPER",
    "reswords : kTHEN",
    "reswords : kTRUE",
    "reswords : kUNDEF",
    "reswords : kWHEN",
    "reswords : kYIELD",
    "reswords : kIF_MOD",
    "reswords : kUNLESS_MOD",
    "reswords : kWHILE_MOD",
    "reswords : kUNTIL_MOD",
    "reswords : kRESCUE_MOD",
    "arg : lhs '=' arg",
    "arg : lhs '=' arg kRESCUE_MOD arg",
    "arg : var_lhs tOP_ASGN arg",
    "arg : var_lhs tOP_ASGN arg kRESCUE_MOD arg",
    "arg : primary_value '[' opt_call_args rbracket tOP_ASGN arg",
    "arg : primary_value tDOT tIDENTIFIER tOP_ASGN arg",
    "arg : primary_value tDOT tCONSTANT tOP_ASGN arg",
    "arg : primary_value tCOLON2 tIDENTIFIER tOP_ASGN arg",
    "arg : primary_value tCOLON2 tCONSTANT tOP_ASGN arg",
    "arg : tCOLON3 tCONSTANT tOP_ASGN arg",
    "arg : backref tOP_ASGN arg",
    "arg : arg tDOT2 arg",
    "arg : arg tDOT3 arg",
    "arg : arg tPLUS arg",
    "arg : arg tMINUS arg",
    "arg : arg tSTAR2 arg",
    "arg : arg tDIVIDE arg",
    "arg : arg tPERCENT arg",
    "arg : arg tPOW arg",
    "arg : tUMINUS_NUM simple_numeric tPOW arg",
    "arg : tUPLUS arg",
    "arg : tUMINUS arg",
    "arg : arg tPIPE arg",
    "arg : arg tCARET arg",
    "arg : arg tAMPER2 arg",
    "arg : arg tCMP arg",
    "arg : arg tGT arg",
    "arg : arg tGEQ arg",
    "arg : arg tLT arg",
    "arg : arg tLEQ arg",
    "arg : arg tEQ arg",
    "arg : arg tEQQ arg",
    "arg : arg tNEQ arg",
    "arg : arg tMATCH arg",
    "arg : arg tNMATCH arg",
    "arg : tBANG arg",
    "arg : tTILDE arg",
    "arg : arg tLSHFT arg",
    "arg : arg tRSHFT arg",
    "arg : arg tANDOP arg",
    "arg : arg tOROP arg",
    "arg : kDEFINED opt_nl arg",
    "arg : arg '?' arg opt_nl ':' arg",
    "arg : primary",
    "arg_value : arg",
    "aref_args : none",
    "aref_args : args trailer",
    "aref_args : args ',' assocs trailer",
    "aref_args : assocs trailer",
    "paren_args : tLPAREN2 opt_call_args rparen",
    "opt_paren_args : none",
    "opt_paren_args : paren_args",
    "opt_call_args : none",
    "opt_call_args : call_args",
    "opt_call_args : args ','",
    "opt_call_args : args ',' assocs ','",
    "opt_call_args : assocs ','",
    "call_args : command",
    "call_args : args opt_block_arg",
    "call_args : assocs opt_block_arg",
    "call_args : args ',' assocs opt_block_arg",
    "call_args : block_arg",
    "$$7 :",
    "command_args : $$7 call_args",
    "block_arg : tAMPER arg_value",
    "opt_block_arg : ',' block_arg",
    "opt_block_arg : none_block_pass",
    "args : arg_value",
    "args : tSTAR arg_value",
    "args : args ',' arg_value",
    "args : args ',' tSTAR arg_value",
    "mrhs_arg : mrhs",
    "mrhs_arg : arg_value",
    "mrhs : args ',' arg_value",
    "mrhs : args ',' tSTAR arg_value",
    "mrhs : tSTAR arg_value",
    "primary : literal",
    "primary : strings",
    "primary : xstring",
    "primary : regexp",
    "primary : words",
    "primary : qwords",
    "primary : symbols",
    "primary : qsymbols",
    "primary : var_ref",
    "primary : backref",
    "primary : tFID",
    "primary : kBEGIN bodystmt kEND",
    "$$8 :",
    "primary : tLPAREN_ARG $$8 rparen",
    "$$9 :",
    "primary : tLPAREN_ARG expr $$9 rparen",
    "primary : tLPAREN compstmt tRPAREN",
    "primary : primary_value tCOLON2 tCONSTANT",
    "primary : tCOLON3 tCONSTANT",
    "primary : tLBRACK aref_args tRBRACK",
    "primary : tLBRACE assoc_list tRCURLY",
    "primary : kRETURN",
    "primary : kYIELD tLPAREN2 call_args rparen",
    "primary : kYIELD tLPAREN2 rparen",
    "primary : kYIELD",
    "primary : kDEFINED opt_nl tLPAREN2 expr rparen",
    "primary : kNOT tLPAREN2 expr rparen",
    "primary : kNOT tLPAREN2 rparen",
    "primary : fcall brace_block",
    "primary : method_call",
    "primary : method_call brace_block",
    "primary : tLAMBDA lambda",
    "primary : kIF expr_value then compstmt if_tail kEND",
    "primary : kUNLESS expr_value then compstmt opt_else kEND",
    "$$10 :",
    "$$11 :",
    "primary : kWHILE $$10 expr_value do $$11 compstmt kEND",
    "$$12 :",
    "$$13 :",
    "primary : kUNTIL $$12 expr_value do $$13 compstmt kEND",
    "primary : kCASE expr_value opt_terms case_body kEND",
    "primary : kCASE opt_terms case_body kEND",
    "$$14 :",
    "$$15 :",
    "primary : kFOR for_var kIN $$14 expr_value do $$15 compstmt kEND",
    "$$16 :",
    "primary : kCLASS cpath superclass $$16 bodystmt kEND",
    "$$17 :",
    "$$18 :",
    "primary : kCLASS tLSHFT expr $$17 term $$18 bodystmt kEND",
    "$$19 :",
    "primary : kMODULE cpath $$19 bodystmt kEND",
    "$$20 :",
    "primary : kDEF fname $$20 f_arglist bodystmt kEND",
    "$$21 :",
    "$$22 :",
    "primary : kDEF singleton dot_or_colon $$21 fname $$22 f_arglist bodystmt kEND",
    "primary : kBREAK",
    "primary : kNEXT",
    "primary : kREDO",
    "primary : kRETRY",
    "primary_value : primary",
    "then : term",
    "then : kTHEN",
    "then : term kTHEN",
    "do : term",
    "do : kDO_COND",
    "if_tail : opt_else",
    "if_tail : kELSIF expr_value then compstmt if_tail",
    "opt_else : none",
    "opt_else : kELSE compstmt",
    "for_var : lhs",
    "for_var : mlhs",
    "f_marg : f_norm_arg",
    "f_marg : tLPAREN f_margs rparen",
    "f_marg_list : f_marg",
    "f_marg_list : f_marg_list ',' f_marg",
    "f_margs : f_marg_list",
    "f_margs : f_marg_list ',' tSTAR f_norm_arg",
    "f_margs : f_marg_list ',' tSTAR f_norm_arg ',' f_marg_list",
    "f_margs : f_marg_list ',' tSTAR",
    "f_margs : f_marg_list ',' tSTAR ',' f_marg_list",
    "f_margs : tSTAR f_norm_arg",
    "f_margs : tSTAR f_norm_arg ',' f_marg_list",
    "f_margs : tSTAR",
    "f_margs : tSTAR ',' f_marg_list",
    "block_args_tail : f_block_kwarg ',' f_kwrest opt_f_block_arg",
    "block_args_tail : f_block_kwarg opt_f_block_arg",
    "block_args_tail : f_kwrest opt_f_block_arg",
    "block_args_tail : f_block_arg",
    "opt_block_args_tail : ',' block_args_tail",
    "opt_block_args_tail :",
    "block_param : f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg opt_block_args_tail",
    "block_param : f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail",
    "block_param : f_arg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_arg ','",
    "block_param : f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_arg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_rest_arg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : f_block_optarg opt_block_args_tail",
    "block_param : f_block_optarg ',' f_arg opt_block_args_tail",
    "block_param : f_rest_arg opt_block_args_tail",
    "block_param : f_rest_arg ',' f_arg opt_block_args_tail",
    "block_param : block_args_tail",
    "opt_block_param : none",
    "opt_block_param : block_param_def",
    "block_param_def : tPIPE opt_bv_decl tPIPE",
    "block_param_def : tOROP",
    "block_param_def : tPIPE block_param opt_bv_decl tPIPE",
    "opt_bv_decl : opt_nl",
    "opt_bv_decl : opt_nl ';' bv_decls opt_nl",
    "bv_decls : bvar",
    "bv_decls : bv_decls ',' bvar",
    "bvar : tIDENTIFIER",
    "bvar : f_bad_arg",
    "$$23 :",
    "lambda : $$23 f_larglist lambda_body",
    "f_larglist : tLPAREN2 f_args opt_bv_decl tRPAREN",
    "f_larglist : f_args",
    "lambda_body : tLAMBEG compstmt tRCURLY",
    "lambda_body : kDO_LAMBDA compstmt kEND",
    "$$24 :",
    "do_block : kDO_BLOCK $$24 opt_block_param compstmt kEND",
    "block_call : command do_block",
    "block_call : block_call dot_or_colon operation2 opt_paren_args",
    "block_call : block_call dot_or_colon operation2 opt_paren_args brace_block",
    "block_call : block_call dot_or_colon operation2 command_args do_block",
    "method_call : fcall paren_args",
    "method_call : primary_value tDOT operation2 opt_paren_args",
    "method_call : primary_value tCOLON2 operation2 paren_args",
    "method_call : primary_value tCOLON2 operation3",
    "method_call : primary_value tDOT paren_args",
    "method_call : primary_value tCOLON2 paren_args",
    "method_call : kSUPER paren_args",
    "method_call : kSUPER",
    "method_call : primary_value '[' opt_call_args rbracket",
    "$$25 :",
    "brace_block : tLCURLY $$25 opt_block_param compstmt tRCURLY",
    "$$26 :",
    "brace_block : kDO $$26 opt_block_param compstmt kEND",
    "case_body : kWHEN args then compstmt cases",
    "cases : opt_else",
    "cases : case_body",
    "opt_rescue : kRESCUE exc_list exc_var then compstmt opt_rescue",
    "opt_rescue :",
    "exc_list : arg_value",
    "exc_list : mrhs",
    "exc_list : none",
    "exc_var : tASSOC lhs",
    "exc_var : none",
    "opt_ensure : kENSURE compstmt",
    "opt_ensure : none",
    "literal : numeric",
    "literal : symbol",
    "literal : dsym",
    "strings : string",
    "string : tCHAR",
    "string : string1",
    "string : string string1",
    "string1 : tSTRING_BEG string_contents tSTRING_END",
    "xstring : tXSTRING_BEG xstring_contents tSTRING_END",
    "regexp : tREGEXP_BEG regexp_contents tREGEXP_END",
    "words : tWORDS_BEG ' ' tSTRING_END",
    "words : tWORDS_BEG word_list tSTRING_END",
    "word_list :",
    "word_list : word_list word ' '",
    "word : string_content",
    "word : word string_content",
    "symbols : tSYMBOLS_BEG ' ' tSTRING_END",
    "symbols : tSYMBOLS_BEG symbol_list tSTRING_END",
    "symbol_list :",
    "symbol_list : symbol_list word ' '",
    "qwords : tQWORDS_BEG ' ' tSTRING_END",
    "qwords : tQWORDS_BEG qword_list tSTRING_END",
    "qsymbols : tQSYMBOLS_BEG ' ' tSTRING_END",
    "qsymbols : tQSYMBOLS_BEG qsym_list tSTRING_END",
    "qword_list :",
    "qword_list : qword_list tSTRING_CONTENT ' '",
    "qsym_list :",
    "qsym_list : qsym_list tSTRING_CONTENT ' '",
    "string_contents :",
    "string_contents : string_contents string_content",
    "xstring_contents :",
    "xstring_contents : xstring_contents string_content",
    "regexp_contents :",
    "regexp_contents : regexp_contents string_content",
    "string_content : tSTRING_CONTENT",
    "$$27 :",
    "string_content : tSTRING_DVAR $$27 string_dvar",
    "$$28 :",
    "$$29 :",
    "string_content : tSTRING_DBEG $$28 $$29 compstmt tRCURLY",
    "string_dvar : tGVAR",
    "string_dvar : tIVAR",
    "string_dvar : tCVAR",
    "string_dvar : backref",
    "symbol : tSYMBEG sym",
    "sym : fname",
    "sym : tIVAR",
    "sym : tGVAR",
    "sym : tCVAR",
    "dsym : tSYMBEG xstring_contents tSTRING_END",
    "numeric : simple_numeric",
    "numeric : tUMINUS_NUM simple_numeric",
    "simple_numeric : tINTEGER",
    "simple_numeric : tFLOAT",
    "simple_numeric : tRATIONAL",
    "simple_numeric : tIMAGINARY",
    "var_ref : tIDENTIFIER",
    "var_ref : tIVAR",
    "var_ref : tGVAR",
    "var_ref : tCONSTANT",
    "var_ref : tCVAR",
    "var_ref : kNIL",
    "var_ref : kSELF",
    "var_ref : kTRUE",
    "var_ref : kFALSE",
    "var_ref : k__FILE__",
    "var_ref : k__LINE__",
    "var_ref : k__ENCODING__",
    "var_lhs : tIDENTIFIER",
    "var_lhs : tIVAR",
    "var_lhs : tGVAR",
    "var_lhs : tCONSTANT",
    "var_lhs : tCVAR",
    "var_lhs : kNIL",
    "var_lhs : kSELF",
    "var_lhs : kTRUE",
    "var_lhs : kFALSE",
    "var_lhs : k__FILE__",
    "var_lhs : k__LINE__",
    "var_lhs : k__ENCODING__",
    "backref : tNTH_REF",
    "backref : tBACK_REF",
    "superclass : term",
    "$$30 :",
    "superclass : tLT $$30 expr_value term",
    "superclass : error term",
    "f_arglist : tLPAREN2 f_args rparen",
    "$$31 :",
    "f_arglist : $$31 f_args term",
    "args_tail : f_kwarg ',' f_kwrest opt_f_block_arg",
    "args_tail : f_kwarg opt_f_block_arg",
    "args_tail : f_kwrest opt_f_block_arg",
    "args_tail : f_block_arg",
    "opt_args_tail : ',' args_tail",
    "opt_args_tail :",
    "f_args : f_arg ',' f_optarg ',' f_rest_arg opt_args_tail",
    "f_args : f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_arg ',' f_optarg opt_args_tail",
    "f_args : f_arg ',' f_optarg ',' f_arg opt_args_tail",
    "f_args : f_arg ',' f_rest_arg opt_args_tail",
    "f_args : f_arg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_arg opt_args_tail",
    "f_args : f_optarg ',' f_rest_arg opt_args_tail",
    "f_args : f_optarg ',' f_rest_arg ',' f_arg opt_args_tail",
    "f_args : f_optarg opt_args_tail",
    "f_args : f_optarg ',' f_arg opt_args_tail",
    "f_args : f_rest_arg opt_args_tail",
    "f_args : f_rest_arg ',' f_arg opt_args_tail",
    "f_args : args_tail",
    "f_args :",
    "f_bad_arg : tCONSTANT",
    "f_bad_arg : tIVAR",
    "f_bad_arg : tGVAR",
    "f_bad_arg : tCVAR",
    "f_norm_arg : f_bad_arg",
    "f_norm_arg : tIDENTIFIER",
    "f_arg_item : f_norm_arg",
    "f_arg_item : tLPAREN f_margs rparen",
    "f_arg : f_arg_item",
    "f_arg : f_arg ',' f_arg_item",
    "f_label : tLABEL",
    "f_kw : f_label arg_value",
    "f_kw : f_label",
    "f_block_kw : f_label primary_value",
    "f_block_kw : f_label",
    "f_block_kwarg : f_block_kw",
    "f_block_kwarg : f_block_kwarg ',' f_block_kw",
    "f_kwarg : f_kw",
    "f_kwarg : f_kwarg ',' f_kw",
    "kwrest_mark : tPOW",
    "kwrest_mark : tDSTAR",
    "f_kwrest : kwrest_mark tIDENTIFIER",
    "f_kwrest : kwrest_mark",
    "f_opt : f_norm_arg '=' arg_value",
    "f_block_opt : tIDENTIFIER '=' primary_value",
    "f_block_optarg : f_block_opt",
    "f_block_optarg : f_block_optarg ',' f_block_opt",
    "f_optarg : f_opt",
    "f_optarg : f_optarg ',' f_opt",
    "restarg_mark : tSTAR2",
    "restarg_mark : tSTAR",
    "f_rest_arg : restarg_mark tIDENTIFIER",
    "f_rest_arg : restarg_mark",
    "blkarg_mark : tAMPER2",
    "blkarg_mark : tAMPER",
    "f_block_arg : blkarg_mark tIDENTIFIER",
    "opt_f_block_arg : ',' f_block_arg",
    "opt_f_block_arg :",
    "singleton : var_ref",
    "$$32 :",
    "singleton : tLPAREN2 $$32 expr rparen",
    "assoc_list : none",
    "assoc_list : assocs trailer",
    "assocs : assoc",
    "assocs : assocs ',' assoc",
    "assoc : arg_value tASSOC arg_value",
    "assoc : tLABEL arg_value",
    "assoc : tSTRING_BEG string_contents tLABEL_END arg_value",
    "assoc : tDSTAR arg_value",
    "operation : tIDENTIFIER",
    "operation : tCONSTANT",
    "operation : tFID",
    "operation2 : tIDENTIFIER",
    "operation2 : tCONSTANT",
    "operation2 : tFID",
    "operation2 : op",
    "operation3 : tIDENTIFIER",
    "operation3 : tFID",
    "operation3 : op",
    "dot_or_colon : tDOT",
    "dot_or_colon : tCOLON2",
    "opt_terms :",
    "opt_terms : terms",
    "opt_nl :",
    "opt_nl : '\\n'",
    "rparen : opt_nl tRPAREN",
    "rbracket : opt_nl tRBRACK",
    "trailer :",
    "trailer : '\\n'",
    "trailer : ','",
    "term : ';'",
    "term : '\\n'",
    "terms : term",
    "terms : terms ';'",
    "none :",
    "none_block_pass :",
    };

  protected org.jruby.parser.YYDebug yydebug;

  /** index-checked interface to {@link #yyNames}.
      @param token single character or <tt>%token</tt> value.
      @return token name or <tt>[illegal]</tt> or <tt>[unknown]</tt>.
    */
  public static String yyName (int token) {
    if (token < 0 || token > yyNames.length) return "[illegal]";
    String name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }


  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected String[] yyExpecting (int state) {
    int token, n, len = 0;
    boolean[] ok = new boolean[yyNames.length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    String result[] = new String[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @param yydebug debug message writer implementing <tt>yyDebug</tt>, or <tt>null</tt>.
      @return result of the last reduction, if any.
    */
  public Object yyparse (RubyLexer yyLex, Object ayydebug)
				throws java.io.IOException {
    this.yydebug = (org.jruby.parser.YYDebug) ayydebug;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of {@link #yyparse}.
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as <tt>$$ = yyDefault($1)</tt>, prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for <tt>$1</tt>, or <tt>null</tt>.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @return result of the last reduction, if any.
    */
  public Object yyparse (RubyLexer yyLex) throws java.io.IOException {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0, yyStates[] = new int[yyMax];	// state stack
    Object yyVal = null, yyVals[] = new Object[yyMax];	// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tokens to shift

    yyLoop: for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.length) {			// dynamically increase
        int[] i = new int[yyStates.length+yyMax];
        System.arraycopy(yyStates, 0, i, 0, yyStates.length);
        yyStates = i;
        Object[] o = new Object[yyVals.length+yyMax];
        System.arraycopy(yyVals, 0, o, 0, yyVals.length);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (yydebug != null) yydebug.push(yyState, yyVal);

      yyDiscarded: for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
//            yyToken = yyLex.advance() ? yyLex.token() : 0;
            yyToken = yyLex.nextToken();
            if (yydebug != null)
              yydebug.lex(yyState, yyToken, yyName(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken) {
            if (yydebug != null)
              yydebug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            continue yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              support.yyerror("syntax error", yyExpecting(yyState), yyNames[yyToken]);
              if (yydebug != null) yydebug.error("syntax error");
  
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += yyErrorCode) >= 0 && yyN < yyTable.length
                    && yyCheck[yyN] == yyErrorCode) {
                  if (yydebug != null)
                    yydebug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  continue yyLoop;
                }
                if (yydebug != null) yydebug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (yydebug != null) yydebug.reject();
              support.yyerror("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (yydebug != null) yydebug.reject();
                support.yyerror("irrecoverable syntax error at end-of-file");
              }
              if (yydebug != null)
                yydebug.discard(yyState, yyToken, yyName(yyToken),
  							yyLex.value());
              yyToken = -1;
              continue yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (yydebug != null)
          yydebug.reduce(yyState, yyStates[yyV-1], yyN, yyRule[yyN], yyLen[yyN]);
        ParserState state = states[yyN];
        if (state == null) {
            yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        } else {
            yyVal = state.execute(support, lexer, yyVal, yyVals, yyTop);
        }
//        switch (yyN) {
// ACTIONS_BEGIN
case 1:
					// line 305 "RubyParser.y"
  {
                  lexer.setState(LexState.EXPR_BEG);
                  support.initTopLocalVariables();
              }
  break;
case 2:
					// line 308 "RubyParser.y"
  {
  /* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
                  if (((Node)yyVals[0+yyTop]) != null) {
                      /* last expression should not be void */
                      if (((Node)yyVals[0+yyTop]) instanceof BlockNode) {
                          support.checkUselessStatement(((BlockNode)yyVals[0+yyTop]).getLast());
                      } else {
                          support.checkUselessStatement(((Node)yyVals[0+yyTop]));
                      }
                  }
                  support.getResult().setAST(support.addRootNode(((Node)yyVals[0+yyTop])));
              }
  break;
case 3:
					// line 321 "RubyParser.y"
  {
                  if (((Node)yyVals[-1+yyTop]) instanceof BlockNode) {
                      support.checkUselessStatements(((BlockNode)yyVals[-1+yyTop]));
                  }
                  yyVal = ((Node)yyVals[-1+yyTop]);
              }
  break;
case 5:
					// line 329 "RubyParser.y"
  {
                    yyVal = support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop])));
              }
  break;
case 6:
					// line 332 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-2+yyTop]), support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop]))));
              }
  break;
case 7:
					// line 335 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
              }
  break;
case 9:
					// line 340 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("BEGIN in method");
                    }
              }
  break;
case 10:
					// line 344 "RubyParser.y"
  {
                    support.getResult().addBeginNode(new PreExe19Node(((ISourcePosition)yyVals[-4+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop])));
                    yyVal = null;
              }
  break;
case 11:
					// line 349 "RubyParser.y"
  {
                  Node node = ((Node)yyVals[-3+yyTop]);

                  if (((RescueBodyNode)yyVals[-2+yyTop]) != null) {
                      node = new RescueNode(support.getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), ((RescueBodyNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
                  } else if (((Node)yyVals[-1+yyTop]) != null) {
                      support.warn(ID.ELSE_WITHOUT_RESCUE, support.getPosition(((Node)yyVals[-3+yyTop])), "else without rescue is useless");
                      node = support.appendToBlock(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                  }
                  if (((Node)yyVals[0+yyTop]) != null) {
                      if (node == null) node = NilImplicitNode.NIL;
                      node = new EnsureNode(support.getPosition(((Node)yyVals[-3+yyTop])), node, ((Node)yyVals[0+yyTop]));
                  }

                  support.fixpos(node, ((Node)yyVals[-3+yyTop]));
                  yyVal = node;
                }
  break;
case 12:
					// line 367 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) instanceof BlockNode) {
                        support.checkUselessStatements(((BlockNode)yyVals[-1+yyTop]));
                    }
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 14:
					// line 375 "RubyParser.y"
  {
                    yyVal = support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop])));
                }
  break;
case 15:
					// line 378 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-2+yyTop]), support.newline_node(((Node)yyVals[0+yyTop]), support.getPosition(((Node)yyVals[0+yyTop]))));
                }
  break;
case 16:
					// line 381 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 17:
					// line 385 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 18:
					// line 389 "RubyParser.y"
  {
                   support.yyerror("BEGIN is permitted only at toplevel");
                }
  break;
case 19:
					// line 391 "RubyParser.y"
  {
                    yyVal = new BeginNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-3+yyTop]));
                }
  break;
case 20:
					// line 395 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 21:
					// line 397 "RubyParser.y"
  {
                    yyVal = support.newAlias(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 22:
					// line 400 "RubyParser.y"
  {
                    yyVal = new VAliasNode(((ISourcePosition)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 23:
					// line 403 "RubyParser.y"
  {
                    yyVal = new VAliasNode(((ISourcePosition)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]), "$" + ((BackRefNode)yyVals[0+yyTop]).getType());
                }
  break;
case 24:
					// line 406 "RubyParser.y"
  {
                    support.yyerror("can't make alias for the number variables");
                }
  break;
case 25:
					// line 409 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 26:
					// line 412 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), null);
                    support.fixpos(((Node)yyVal), ((Node)yyVals[0+yyTop]));
                }
  break;
case 27:
					// line 416 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), null, ((Node)yyVals[-2+yyTop]));
                    support.fixpos(((Node)yyVal), ((Node)yyVals[0+yyTop]));
                }
  break;
case 28:
					// line 420 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) != null && ((Node)yyVals[-2+yyTop]) instanceof BeginNode) {
                        yyVal = new WhileNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((BeginNode)yyVals[-2+yyTop]).getBodyNode(), false);
                    } else {
                        yyVal = new WhileNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), true);
                    }
                }
  break;
case 29:
					// line 427 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) != null && ((Node)yyVals[-2+yyTop]) instanceof BeginNode) {
                        yyVal = new UntilNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((BeginNode)yyVals[-2+yyTop]).getBodyNode(), false);
                    } else {
                        yyVal = new UntilNode(support.getPosition(((Node)yyVals[-2+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), true);
                    }
                }
  break;
case 30:
					// line 434 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    yyVal = new RescueNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), new RescueBodyNode(support.getPosition(((Node)yyVals[-2+yyTop])), null, body, null), null);
                }
  break;
case 31:
					// line 438 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.warn(ID.END_IN_METHOD, ((ISourcePosition)yyVals[-3+yyTop]), "END in method; use at_exit");
                    }
                    yyVal = new PostExeNode(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 33:
					// line 445 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    ((MultipleAsgn19Node)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                    yyVal = ((MultipleAsgn19Node)yyVals[-2+yyTop]);
                }
  break;
case 34:
					// line 450 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    ISourcePosition pos = ((AssignableNode)yyVals[-2+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-1+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-2+yyTop])), asgnOp, ((Node)yyVals[0+yyTop])));
                        ((AssignableNode)yyVals[-2+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-2+yyTop]);
                    }
                }
  break;
case 35:
					// line 467 "RubyParser.y"
  {
  /* FIXME: arg_concat logic missing for opt_call_args*/
                    yyVal = support.new_opElementAsgnNode(((Node)yyVals[-5+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 36:
					// line 471 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 37:
					// line 474 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 38:
					// line 477 "RubyParser.y"
  {
                    support.yyerror("can't make alias for the number variables");
                    yyVal = null;
                }
  break;
case 39:
					// line 482 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 40:
					// line 485 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[-2+yyTop]));
                }
  break;
case 41:
					// line 488 "RubyParser.y"
  {
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 42:
					// line 491 "RubyParser.y"
  {
                    ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                    yyVal = ((MultipleAsgn19Node)yyVals[-2+yyTop]);
                    ((MultipleAsgn19Node)yyVals[-2+yyTop]).setPosition(support.getPosition(((MultipleAsgn19Node)yyVals[-2+yyTop])));
                }
  break;
case 44:
					// line 498 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 45:
					// line 502 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 47:
					// line 509 "RubyParser.y"
  {
                    yyVal = support.newAndNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 48:
					// line 512 "RubyParser.y"
  {
                    yyVal = support.newOrNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 49:
					// line 515 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 50:
					// line 518 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 52:
					// line 523 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                }
  break;
case 56:
					// line 533 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 57:
					// line 538 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 58:
					// line 540 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 59:
					// line 545 "RubyParser.y"
  {
                    yyVal = support.new_fcall(((String)yyVals[0+yyTop]));
                }
  break;
case 60:
					// line 550 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);
                }
  break;
case 61:
					// line 554 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                    yyVal = ((FCallNode)yyVals[-2+yyTop]);
                }
  break;
case 62:
					// line 558 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 63:
					// line 561 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop])); 
                }
  break;
case 64:
					// line 564 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 65:
					// line 567 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 66:
					// line 570 "RubyParser.y"
  {
                    yyVal = support.new_super(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 67:
					// line 573 "RubyParser.y"
  {
                    yyVal = support.new_yield(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 68:
					// line 576 "RubyParser.y"
  {
                    yyVal = new ReturnNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 69:
					// line 579 "RubyParser.y"
  {
                    yyVal = new BreakNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 70:
					// line 582 "RubyParser.y"
  {
                    yyVal = new NextNode(((ISourcePosition)yyVals[-1+yyTop]), support.ret_args(((Node)yyVals[0+yyTop]), ((ISourcePosition)yyVals[-1+yyTop])));
                }
  break;
case 72:
					// line 588 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 73:
					// line 593 "RubyParser.y"
  {
                    yyVal = ((MultipleAsgn19Node)yyVals[0+yyTop]);
                }
  break;
case 74:
					// line 596 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ISourcePosition)yyVals[-2+yyTop]), support.newArrayNode(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop])), null, null);
                }
  break;
case 75:
					// line 601 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[0+yyTop]).getPosition(), ((ListNode)yyVals[0+yyTop]), null, null);
                }
  break;
case 76:
					// line 604 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]).add(((Node)yyVals[0+yyTop])), null, null);
                }
  break;
case 77:
					// line 607 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-2+yyTop]).getPosition(), ((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), (ListNode) null);
                }
  break;
case 78:
					// line 610 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-4+yyTop]), ((Node)yyVals[-2+yyTop]), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 79:
					// line 613 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), new StarNode(lexer.getPosition()), null);
                }
  break;
case 80:
					// line 616 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 81:
					// line 619 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((Node)yyVals[0+yyTop]).getPosition(), null, ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 82:
					// line 622 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((Node)yyVals[-2+yyTop]).getPosition(), null, ((Node)yyVals[-2+yyTop]), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 83:
					// line 625 "RubyParser.y"
  {
                      yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), null);
                }
  break;
case 84:
					// line 628 "RubyParser.y"
  {
                      yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 86:
					// line 633 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 87:
					// line 638 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 88:
					// line 641 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
                }
  break;
case 89:
					// line 646 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 90:
					// line 649 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 91:
					// line 653 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 92:
					// line 656 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 93:
					// line 659 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 94:
					// line 662 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 95:
					// line 667 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 96:
					// line 670 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 97:
					// line 674 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 98:
					// line 678 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 99:
					// line 682 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 100:
					// line 686 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 101:
					// line 690 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 102:
					// line 694 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 103:
					// line 698 "RubyParser.y"
  {
                    yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 104:
					// line 701 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 105:
					// line 704 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 106:
					// line 707 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 107:
					// line 710 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = support.getPosition(((Node)yyVals[-2+yyTop]));

                    yyVal = new ConstDeclNode(position, null, support.new_colon2(position, ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 108:
					// line 719 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = lexer.getPosition();

                    yyVal = new ConstDeclNode(position, null, support.new_colon3(position, ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 109:
					// line 728 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
                }
  break;
case 110:
					// line 732 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 111:
					// line 735 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 112:
					// line 738 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 113:
					// line 741 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 114:
					// line 746 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 115:
					// line 749 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 116:
					// line 753 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 117:
					// line 757 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 118:
					// line 761 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 119:
					// line 765 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 120:
					// line 769 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 121:
					// line 773 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 122:
					// line 777 "RubyParser.y"
  {
                    yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 123:
					// line 780 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 124:
					// line 783 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 125:
					// line 786 "RubyParser.y"
  {
                    yyVal = support.attrset(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 126:
					// line 789 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = support.getPosition(((Node)yyVals[-2+yyTop]));

                    yyVal = new ConstDeclNode(position, null, support.new_colon2(position, ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 127:
					// line 798 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("dynamic constant assignment");
                    }

                    ISourcePosition position = lexer.getPosition();

                    yyVal = new ConstDeclNode(position, null, support.new_colon3(position, ((String)yyVals[0+yyTop])), NilImplicitNode.NIL);
                }
  break;
case 128:
					// line 807 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
                }
  break;
case 129:
					// line 811 "RubyParser.y"
  {
                    support.yyerror("class/module name must be CONSTANT");
                }
  break;
case 131:
					// line 816 "RubyParser.y"
  {
                    yyVal = support.new_colon3(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 132:
					// line 819 "RubyParser.y"
  {
                    yyVal = support.new_colon2(lexer.getPosition(), null, ((String)yyVals[0+yyTop]));
                }
  break;
case 133:
					// line 822 "RubyParser.y"
  {
                    yyVal = support.new_colon2(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 137:
					// line 828 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_ENDFN);
                   yyVal = ((String)yyVals[0+yyTop]);
               }
  break;
case 138:
					// line 832 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_ENDFN);
                   yyVal = ((String)yyVals[0+yyTop]);
               }
  break;
case 139:
					// line 838 "RubyParser.y"
  {
                    yyVal = new LiteralNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 140:
					// line 841 "RubyParser.y"
  {
                    yyVal = new LiteralNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 141:
					// line 846 "RubyParser.y"
  {
                    yyVal = ((LiteralNode)yyVals[0+yyTop]);
                }
  break;
case 142:
					// line 849 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 143:
					// line 853 "RubyParser.y"
  {
                    yyVal = support.newUndef(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 144:
					// line 856 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 145:
					// line 858 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((Node)yyVals[-3+yyTop]), support.newUndef(((Node)yyVals[-3+yyTop]).getPosition(), ((Node)yyVals[0+yyTop])));
                }
  break;
case 176:
					// line 870 "RubyParser.y"
  {
                    yyVal = "__LINE__";
                }
  break;
case 177:
					// line 873 "RubyParser.y"
  {
                    yyVal = "__FILE__";
                }
  break;
case 178:
					// line 876 "RubyParser.y"
  {
                    yyVal = "__ENCODING__";
                }
  break;
case 179:
					// line 879 "RubyParser.y"
  {
                    yyVal = "BEGIN";
                }
  break;
case 180:
					// line 882 "RubyParser.y"
  {
                    yyVal = "END";
                }
  break;
case 181:
					// line 885 "RubyParser.y"
  {
                    yyVal = "alias";
                }
  break;
case 182:
					// line 888 "RubyParser.y"
  {
                    yyVal = "and";
                }
  break;
case 183:
					// line 891 "RubyParser.y"
  {
                    yyVal = "begin";
                }
  break;
case 184:
					// line 894 "RubyParser.y"
  {
                    yyVal = "break";
                }
  break;
case 185:
					// line 897 "RubyParser.y"
  {
                    yyVal = "case";
                }
  break;
case 186:
					// line 900 "RubyParser.y"
  {
                    yyVal = "class";
                }
  break;
case 187:
					// line 903 "RubyParser.y"
  {
                    yyVal = "def";
                }
  break;
case 188:
					// line 906 "RubyParser.y"
  {
                    yyVal = "defined?";
                }
  break;
case 189:
					// line 909 "RubyParser.y"
  {
                    yyVal = "do";
                }
  break;
case 190:
					// line 912 "RubyParser.y"
  {
                    yyVal = "else";
                }
  break;
case 191:
					// line 915 "RubyParser.y"
  {
                    yyVal = "elsif";
                }
  break;
case 192:
					// line 918 "RubyParser.y"
  {
                    yyVal = "end";
                }
  break;
case 193:
					// line 921 "RubyParser.y"
  {
                    yyVal = "ensure";
                }
  break;
case 194:
					// line 924 "RubyParser.y"
  {
                    yyVal = "false";
                }
  break;
case 195:
					// line 927 "RubyParser.y"
  {
                    yyVal = "for";
                }
  break;
case 196:
					// line 930 "RubyParser.y"
  {
                    yyVal = "in";
                }
  break;
case 197:
					// line 933 "RubyParser.y"
  {
                    yyVal = "module";
                }
  break;
case 198:
					// line 936 "RubyParser.y"
  {
                    yyVal = "next";
                }
  break;
case 199:
					// line 939 "RubyParser.y"
  {
                    yyVal = "nil";
                }
  break;
case 200:
					// line 942 "RubyParser.y"
  {
                    yyVal = "not";
                }
  break;
case 201:
					// line 945 "RubyParser.y"
  {
                    yyVal = "or";
                }
  break;
case 202:
					// line 948 "RubyParser.y"
  {
                    yyVal = "redo";
                }
  break;
case 203:
					// line 951 "RubyParser.y"
  {
                    yyVal = "rescue";
                }
  break;
case 204:
					// line 954 "RubyParser.y"
  {
                    yyVal = "retry";
                }
  break;
case 205:
					// line 957 "RubyParser.y"
  {
                    yyVal = "return";
                }
  break;
case 206:
					// line 960 "RubyParser.y"
  {
                    yyVal = "self";
                }
  break;
case 207:
					// line 963 "RubyParser.y"
  {
                    yyVal = "super";
                }
  break;
case 208:
					// line 966 "RubyParser.y"
  {
                    yyVal = "then";
                }
  break;
case 209:
					// line 969 "RubyParser.y"
  {
                    yyVal = "true";
                }
  break;
case 210:
					// line 972 "RubyParser.y"
  {
                    yyVal = "undef";
                }
  break;
case 211:
					// line 975 "RubyParser.y"
  {
                    yyVal = "when";
                }
  break;
case 212:
					// line 978 "RubyParser.y"
  {
                    yyVal = "yield";
                }
  break;
case 213:
					// line 981 "RubyParser.y"
  {
                    yyVal = "if";
                }
  break;
case 214:
					// line 984 "RubyParser.y"
  {
                    yyVal = "unless";
                }
  break;
case 215:
					// line 987 "RubyParser.y"
  {
                    yyVal = "while";
                }
  break;
case 216:
					// line 990 "RubyParser.y"
  {
                    yyVal = "until";
                }
  break;
case 217:
					// line 993 "RubyParser.y"
  {
                    yyVal = "rescue";
                }
  break;
case 218:
					// line 997 "RubyParser.y"
  {
                    yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    /* FIXME: Consider fixing node_assign itself rather than single case*/
                    ((Node)yyVal).setPosition(support.getPosition(((Node)yyVals[-2+yyTop])));
                }
  break;
case 219:
					// line 1002 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-4+yyTop]));
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    yyVal = support.node_assign(((Node)yyVals[-4+yyTop]), new RescueNode(position, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(position, null, body, null), null));
                }
  break;
case 220:
					// line 1007 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    ISourcePosition pos = ((AssignableNode)yyVals[-2+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-1+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-2+yyTop])), ((AssignableNode)yyVals[-2+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-2+yyTop])), asgnOp, ((Node)yyVals[0+yyTop])));
                        ((AssignableNode)yyVals[-2+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-2+yyTop]);
                    }
                }
  break;
case 221:
					// line 1024 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    ISourcePosition pos = support.getPosition(((Node)yyVals[0+yyTop]));
                    Node body = ((Node)yyVals[0+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[0+yyTop]);
                    Node rescue = new RescueNode(pos, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(support.getPosition(((Node)yyVals[-2+yyTop])), null, body, null), null);

                    pos = ((AssignableNode)yyVals[-4+yyTop]).getPosition();
                    String asgnOp = ((String)yyVals[-3+yyTop]);
                    if (asgnOp.equals("||")) {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(rescue);
                        yyVal = new OpAsgnOrNode(pos, support.gettable2(((AssignableNode)yyVals[-4+yyTop])), ((AssignableNode)yyVals[-4+yyTop]));
                    } else if (asgnOp.equals("&&")) {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(rescue);
                        yyVal = new OpAsgnAndNode(pos, support.gettable2(((AssignableNode)yyVals[-4+yyTop])), ((AssignableNode)yyVals[-4+yyTop]));
                    } else {
                        ((AssignableNode)yyVals[-4+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(((AssignableNode)yyVals[-4+yyTop])), asgnOp, rescue));
                        ((AssignableNode)yyVals[-4+yyTop]).setPosition(pos);
                        yyVal = ((AssignableNode)yyVals[-4+yyTop]);
                    }
                }
  break;
case 222:
					// line 1044 "RubyParser.y"
  {
  /* FIXME: arg_concat missing for opt_call_args*/
                    yyVal = support.new_opElementAsgnNode(((Node)yyVals[-5+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 223:
					// line 1048 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 224:
					// line 1051 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 225:
					// line 1054 "RubyParser.y"
  {
                    yyVal = new OpAsgnNode(support.getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), ((String)yyVals[-2+yyTop]), ((String)yyVals[-1+yyTop]));
                }
  break;
case 226:
					// line 1057 "RubyParser.y"
  {
                    support.yyerror("constant re-assignment");
                }
  break;
case 227:
					// line 1060 "RubyParser.y"
  {
                    support.yyerror("constant re-assignment");
                }
  break;
case 228:
					// line 1063 "RubyParser.y"
  {
                    support.backrefAssignError(((Node)yyVals[-2+yyTop]));
                }
  break;
case 229:
					// line 1066 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    support.checkExpression(((Node)yyVals[0+yyTop]));
    
                    boolean isLiteral = ((Node)yyVals[-2+yyTop]) instanceof FixnumNode && ((Node)yyVals[0+yyTop]) instanceof FixnumNode;
                    yyVal = new DotNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), false, isLiteral);
                }
  break;
case 230:
					// line 1073 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[-2+yyTop]));
                    support.checkExpression(((Node)yyVals[0+yyTop]));

                    boolean isLiteral = ((Node)yyVals[-2+yyTop]) instanceof FixnumNode && ((Node)yyVals[0+yyTop]) instanceof FixnumNode;
                    yyVal = new DotNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), true, isLiteral);
                }
  break;
case 231:
					// line 1080 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "+", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 232:
					// line 1083 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "-", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 233:
					// line 1086 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "*", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 234:
					// line 1089 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "/", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 235:
					// line 1092 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "%", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 236:
					// line 1095 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 237:
					// line 1098 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getOperatorCallNode(((NumericNode)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]), lexer.getPosition()), "-@");
                }
  break;
case 238:
					// line 1101 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "+@");
                }
  break;
case 239:
					// line 1104 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "-@");
                }
  break;
case 240:
					// line 1107 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "|", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 241:
					// line 1110 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "^", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 242:
					// line 1113 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "&", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 243:
					// line 1116 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=>", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 244:
					// line 1119 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 245:
					// line 1122 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 246:
					// line 1125 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 247:
					// line 1128 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 248:
					// line 1131 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "==", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 249:
					// line 1134 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "===", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 250:
					// line 1137 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "!=", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 251:
					// line 1140 "RubyParser.y"
  {
                    yyVal = support.getMatchNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                  /* ENEBO
                        $$ = match_op($1, $3);
                        if (nd_type($1) == NODE_LIT && TYPE($1->nd_lit) == T_REGEXP) {
                            $$ = reg_named_capture_assign($1->nd_lit, $$);
                        }
                  */
                }
  break;
case 252:
					// line 1149 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "!~", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 253:
					// line 1152 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[0+yyTop])), "!");
                }
  break;
case 254:
					// line 1155 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "~");
                }
  break;
case 255:
					// line 1158 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<<", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 256:
					// line 1161 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">>", ((Node)yyVals[0+yyTop]), lexer.getPosition());
                }
  break;
case 257:
					// line 1164 "RubyParser.y"
  {
                    yyVal = support.newAndNode(((Node)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 258:
					// line 1167 "RubyParser.y"
  {
                    yyVal = support.newOrNode(((Node)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 259:
					// line 1170 "RubyParser.y"
  {
                    yyVal = support.new_defined(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 260:
					// line 1173 "RubyParser.y"
  {
                    yyVal = new IfNode(support.getPosition(((Node)yyVals[-5+yyTop])), support.getConditionNode(((Node)yyVals[-5+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 261:
					// line 1176 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 262:
					// line 1180 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = ((Node)yyVals[0+yyTop]) != null ? ((Node)yyVals[0+yyTop]) : NilImplicitNode.NIL;
                }
  break;
case 264:
					// line 1186 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 265:
					// line 1189 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 266:
					// line 1192 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 267:
					// line 1196 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    if (yyVal != null) ((Node)yyVal).setPosition(((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 272:
					// line 1205 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 273:
					// line 1208 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 274:
					// line 1211 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                }
  break;
case 275:
					// line 1217 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 276:
					// line 1220 "RubyParser.y"
  {
                    yyVal = support.arg_blk_pass(((Node)yyVals[-1+yyTop]), ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 277:
					// line 1223 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((HashNode)yyVals[-1+yyTop]).getPosition(), ((HashNode)yyVals[-1+yyTop]));
                    yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 278:
					// line 1227 "RubyParser.y"
  {
                    yyVal = support.arg_append(((Node)yyVals[-3+yyTop]), ((HashNode)yyVals[-1+yyTop]));
                    yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
                }
  break;
case 279:
					// line 1231 "RubyParser.y"
  {
                }
  break;
case 280:
					// line 1234 "RubyParser.y"
  {
                    yyVal = Long.valueOf(lexer.getCmdArgumentState().begin());
                }
  break;
case 281:
					// line 1236 "RubyParser.y"
  {
                    lexer.getCmdArgumentState().reset(((Long)yyVals[-1+yyTop]).longValue());
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 282:
					// line 1241 "RubyParser.y"
  {
                    yyVal = new BlockPassNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 283:
					// line 1245 "RubyParser.y"
  {
                    yyVal = ((BlockPassNode)yyVals[0+yyTop]);
                }
  break;
case 285:
					// line 1251 "RubyParser.y"
  { /* ArrayNode*/
                    ISourcePosition pos = ((Node)yyVals[0+yyTop]) == null ? lexer.getPosition() : ((Node)yyVals[0+yyTop]).getPosition();
                    yyVal = support.newArrayNode(pos, ((Node)yyVals[0+yyTop]));
                }
  break;
case 286:
					// line 1255 "RubyParser.y"
  { /* SplatNode*/
                    yyVal = support.newSplatNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 287:
					// line 1258 "RubyParser.y"
  { /* ArgsCatNode, SplatNode, ArrayNode*/
                    Node node = support.splat_array(((Node)yyVals[-2+yyTop]));

                    if (node != null) {
                        yyVal = support.list_append(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_append(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 288:
					// line 1267 "RubyParser.y"
  { /* ArgsCatNode, SplatNode, ArrayNode*/
                    Node node = null;

                    /* FIXME: lose syntactical elements here (and others like this)*/
                    if (((Node)yyVals[0+yyTop]) instanceof ArrayNode &&
                        (node = support.splat_array(((Node)yyVals[-3+yyTop]))) != null) {
                        yyVal = support.list_concat(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_concat(support.getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 289:
					// line 1279 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 290:
					// line 1282 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 291:
					// line 1287 "RubyParser.y"
  {
                    Node node = support.splat_array(((Node)yyVals[-2+yyTop]));

                    if (node != null) {
                        yyVal = support.list_append(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_append(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 292:
					// line 1296 "RubyParser.y"
  {
                    Node node = null;

                    if (((Node)yyVals[0+yyTop]) instanceof ArrayNode &&
                        (node = support.splat_array(((Node)yyVals[-3+yyTop]))) != null) {
                        yyVal = support.list_concat(node, ((Node)yyVals[0+yyTop]));
                    } else {
                        yyVal = support.arg_concat(((Node)yyVals[-3+yyTop]).getPosition(), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
                    }
                }
  break;
case 293:
					// line 1306 "RubyParser.y"
  {
                     yyVal = support.newSplatNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 300:
					// line 1316 "RubyParser.y"
  { 
                     yyVal = ((ListNode)yyVals[0+yyTop]); /* FIXME: Why complaining without $$ = $1;*/
                }
  break;
case 301:
					// line 1319 "RubyParser.y"
  {
                     yyVal = ((ListNode)yyVals[0+yyTop]); /* FIXME: Why complaining without $$ = $1;*/
                }
  break;
case 304:
					// line 1324 "RubyParser.y"
  {
                    yyVal = support.new_fcall(((String)yyVals[0+yyTop]));
                }
  break;
case 305:
					// line 1327 "RubyParser.y"
  {
                    yyVal = new BeginNode(((ISourcePosition)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]));
                }
  break;
case 306:
					// line 1330 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_ENDARG);
                }
  break;
case 307:
					// line 1332 "RubyParser.y"
  {
                    yyVal = null; /*FIXME: Should be implicit nil?*/
                }
  break;
case 308:
					// line 1335 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_ENDARG); 
                }
  break;
case 309:
					// line 1337 "RubyParser.y"
  {
                    if (Options.PARSER_WARN_GROUPED_EXPRESSIONS.load()) {
                      support.warning(ID.GROUPED_EXPRESSION, ((ISourcePosition)yyVals[-3+yyTop]), "(...) interpreted as grouped expression");
                    }
                    yyVal = ((Node)yyVals[-2+yyTop]);
                }
  break;
case 310:
					// line 1343 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) != null) {
                        /* compstmt position includes both parens around it*/
                        ((ISourcePositionHolder) ((Node)yyVals[-1+yyTop])).setPosition(((ISourcePosition)yyVals[-2+yyTop]));
                        yyVal = ((Node)yyVals[-1+yyTop]);
                    } else {
                        yyVal = new NilNode(((ISourcePosition)yyVals[-2+yyTop]));
                    }
                }
  break;
case 311:
					// line 1352 "RubyParser.y"
  {
                    yyVal = support.new_colon2(support.getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]));
                }
  break;
case 312:
					// line 1355 "RubyParser.y"
  {
                    yyVal = support.new_colon3(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 313:
					// line 1358 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-1+yyTop]));
                    if (((Node)yyVals[-1+yyTop]) == null) {
                        yyVal = new ZArrayNode(position); /* zero length array */
                    } else {
                        yyVal = ((Node)yyVals[-1+yyTop]);
                    }
                }
  break;
case 314:
					// line 1366 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-1+yyTop]);
                }
  break;
case 315:
					// line 1369 "RubyParser.y"
  {
                    yyVal = new ReturnNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 316:
					// line 1372 "RubyParser.y"
  {
                    yyVal = support.new_yield(((ISourcePosition)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 317:
					// line 1375 "RubyParser.y"
  {
                    yyVal = new ZYieldNode(((ISourcePosition)yyVals[-2+yyTop]));
                }
  break;
case 318:
					// line 1378 "RubyParser.y"
  {
                    yyVal = new ZYieldNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 319:
					// line 1381 "RubyParser.y"
  {
                    yyVal = support.new_defined(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 320:
					// line 1384 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(support.getConditionNode(((Node)yyVals[-1+yyTop])), "!");
                }
  break;
case 321:
					// line 1387 "RubyParser.y"
  {
                    yyVal = support.getOperatorCallNode(NilImplicitNode.NIL, "!");
                }
  break;
case 322:
					// line 1390 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), null, ((IterNode)yyVals[0+yyTop]));
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);                    
                }
  break;
case 324:
					// line 1395 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) != null && 
                          ((BlockAcceptingNode)yyVals[-1+yyTop]).getIterNode() instanceof BlockPassNode) {
                        throw new SyntaxException(PID.BLOCK_ARG_AND_BLOCK_GIVEN, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "Both block arg and actual block given.");
                    }
                    yyVal = ((BlockAcceptingNode)yyVals[-1+yyTop]).setIterNode(((IterNode)yyVals[0+yyTop]));
                    ((Node)yyVal).setPosition(((Node)yyVals[-1+yyTop]).getPosition());
                }
  break;
case 325:
					// line 1403 "RubyParser.y"
  {
                    yyVal = ((LambdaNode)yyVals[0+yyTop]);
                }
  break;
case 326:
					// line 1406 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-5+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 327:
					// line 1409 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-5+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-2+yyTop]));
                }
  break;
case 328:
					// line 1412 "RubyParser.y"
  {
                    lexer.getConditionState().begin();
                }
  break;
case 329:
					// line 1414 "RubyParser.y"
  {
                    lexer.getConditionState().end();
                }
  break;
case 330:
					// line 1416 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);
                    yyVal = new WhileNode(((ISourcePosition)yyVals[-6+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), body);
                }
  break;
case 331:
					// line 1420 "RubyParser.y"
  {
                  lexer.getConditionState().begin();
                }
  break;
case 332:
					// line 1422 "RubyParser.y"
  {
                  lexer.getConditionState().end();
                }
  break;
case 333:
					// line 1424 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);
                    yyVal = new UntilNode(((ISourcePosition)yyVals[-6+yyTop]), support.getConditionNode(((Node)yyVals[-4+yyTop])), body);
                }
  break;
case 334:
					// line 1428 "RubyParser.y"
  {
                    yyVal = support.newCaseNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 335:
					// line 1431 "RubyParser.y"
  {
                    yyVal = support.newCaseNode(((ISourcePosition)yyVals[-3+yyTop]), null, ((Node)yyVals[-1+yyTop]));
                }
  break;
case 336:
					// line 1434 "RubyParser.y"
  {
                    lexer.getConditionState().begin();
                }
  break;
case 337:
					// line 1436 "RubyParser.y"
  {
                    lexer.getConditionState().end();
                }
  break;
case 338:
					// line 1438 "RubyParser.y"
  {
                      /* ENEBO: Lots of optz in 1.9 parser here*/
                    yyVal = new ForNode(((ISourcePosition)yyVals[-8+yyTop]), ((Node)yyVals[-7+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-4+yyTop]), support.getCurrentScope());
                }
  break;
case 339:
					// line 1442 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) {
                        support.yyerror("class definition in method body");
                    }
                    support.pushLocalScope();
                }
  break;
case 340:
					// line 1447 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new ClassNode(((ISourcePosition)yyVals[-5+yyTop]), ((Colon3Node)yyVals[-4+yyTop]), support.getCurrentScope(), body, ((Node)yyVals[-3+yyTop]));
                    support.popCurrentScope();
                }
  break;
case 341:
					// line 1453 "RubyParser.y"
  {
                    yyVal = Boolean.valueOf(support.isInDef());
                    support.setInDef(false);
                }
  break;
case 342:
					// line 1456 "RubyParser.y"
  {
                    yyVal = Integer.valueOf(support.getInSingle());
                    support.setInSingle(0);
                    support.pushLocalScope();
                }
  break;
case 343:
					// line 1460 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new SClassNode(((ISourcePosition)yyVals[-7+yyTop]), ((Node)yyVals[-5+yyTop]), support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInDef(((Boolean)yyVals[-4+yyTop]).booleanValue());
                    support.setInSingle(((Integer)yyVals[-2+yyTop]).intValue());
                }
  break;
case 344:
					// line 1468 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) { 
                        support.yyerror("module definition in method body");
                    }
                    support.pushLocalScope();
                }
  break;
case 345:
					// line 1473 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]) == null ? NilImplicitNode.NIL : ((Node)yyVals[-1+yyTop]);

                    yyVal = new ModuleNode(((ISourcePosition)yyVals[-4+yyTop]), ((Colon3Node)yyVals[-3+yyTop]), support.getCurrentScope(), body);
                    support.popCurrentScope();
                }
  break;
case 346:
					// line 1479 "RubyParser.y"
  {
                    support.setInDef(true);
                    support.pushLocalScope();
                }
  break;
case 347:
					// line 1482 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]);
                    if (body == null) body = NilImplicitNode.NIL;

                    yyVal = new DefnNode(((ISourcePosition)yyVals[-5+yyTop]), new ArgumentNode(((ISourcePosition)yyVals[-5+yyTop]), ((String)yyVals[-4+yyTop])), (ArgsNode) yyVals[-2+yyTop], support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInDef(false);
                }
  break;
case 348:
					// line 1490 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_FNAME);
                }
  break;
case 349:
					// line 1492 "RubyParser.y"
  {
                    support.setInSingle(support.getInSingle() + 1);
                    support.pushLocalScope();
                    lexer.setState(LexState.EXPR_ENDFN); /* force for args */
                }
  break;
case 350:
					// line 1496 "RubyParser.y"
  {
                    Node body = ((Node)yyVals[-1+yyTop]);
                    if (body == null) body = NilImplicitNode.NIL;

                    yyVal = new DefsNode(((ISourcePosition)yyVals[-8+yyTop]), ((Node)yyVals[-7+yyTop]), new ArgumentNode(((ISourcePosition)yyVals[-8+yyTop]), ((String)yyVals[-4+yyTop])), (ArgsNode) yyVals[-2+yyTop], support.getCurrentScope(), body);
                    support.popCurrentScope();
                    support.setInSingle(support.getInSingle() - 1);
                }
  break;
case 351:
					// line 1504 "RubyParser.y"
  {
                    yyVal = new BreakNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 352:
					// line 1507 "RubyParser.y"
  {
                    yyVal = new NextNode(((ISourcePosition)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 353:
					// line 1510 "RubyParser.y"
  {
                    yyVal = new RedoNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 354:
					// line 1513 "RubyParser.y"
  {
                    yyVal = new RetryNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 355:
					// line 1517 "RubyParser.y"
  {
                    support.checkExpression(((Node)yyVals[0+yyTop]));
                    yyVal = ((Node)yyVals[0+yyTop]);
                    if (yyVal == null) yyVal = NilImplicitNode.NIL;
                }
  break;
case 362:
					// line 1531 "RubyParser.y"
  {
                    yyVal = new IfNode(((ISourcePosition)yyVals[-4+yyTop]), support.getConditionNode(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 364:
					// line 1536 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 366:
					// line 1541 "RubyParser.y"
  {
                }
  break;
case 367:
					// line 1544 "RubyParser.y"
  {
                     yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 368:
					// line 1547 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 369:
					// line 1552 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 370:
					// line 1555 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 371:
					// line 1559 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[0+yyTop]).getPosition(), ((ListNode)yyVals[0+yyTop]), null, null);
                }
  break;
case 372:
					// line 1562 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null), null);
                }
  break;
case 373:
					// line 1565 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), null), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 374:
					// line 1568 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-2+yyTop]).getPosition(), ((ListNode)yyVals[-2+yyTop]), new StarNode(lexer.getPosition()), null);
                }
  break;
case 375:
					// line 1571 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(((ListNode)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-4+yyTop]), new StarNode(lexer.getPosition()), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 376:
					// line 1574 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null), null);
                }
  break;
case 377:
					// line 1577 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), null), ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 378:
					// line 1580 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(lexer.getPosition(), null, new StarNode(lexer.getPosition()), null);
                }
  break;
case 379:
					// line 1583 "RubyParser.y"
  {
                    yyVal = new MultipleAsgn19Node(support.getPosition(((ListNode)yyVals[0+yyTop])), null, null, ((ListNode)yyVals[0+yyTop]));
                }
  break;
case 380:
					// line 1587 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 381:
					// line 1590 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 382:
					// line 1593 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 383:
					// line 1596 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((BlockArgNode)yyVals[0+yyTop]).getPosition(), null, null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 384:
					// line 1600 "RubyParser.y"
  {
                    yyVal = ((ArgsTailHolder)yyVals[0+yyTop]);
                }
  break;
case 385:
					// line 1603 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, null, null);
                }
  break;
case 386:
					// line 1608 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 387:
					// line 1611 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-7+yyTop]).getPosition(), ((ListNode)yyVals[-7+yyTop]), ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 388:
					// line 1614 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 389:
					// line 1617 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 390:
					// line 1620 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 391:
					// line 1623 "RubyParser.y"
  {
                    RestArgNode rest = new UnnamedRestArgNode(((ListNode)yyVals[-1+yyTop]).getPosition(), null, support.getCurrentScope().addVariable("*"));
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, rest, null, (ArgsTailHolder) null);
                }
  break;
case 392:
					// line 1627 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 393:
					// line 1630 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 394:
					// line 1633 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-3+yyTop])), null, ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 395:
					// line 1636 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-5+yyTop])), null, ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 396:
					// line 1639 "RubyParser.y"
  {
                    yyVal = support.new_args(support.getPosition(((ListNode)yyVals[-1+yyTop])), null, ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 397:
					// line 1642 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 398:
					// line 1645 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-1+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 399:
					// line 1648 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-3+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 400:
					// line 1651 "RubyParser.y"
  {
                    yyVal = support.new_args(((ArgsTailHolder)yyVals[0+yyTop]).getPosition(), null, null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 401:
					// line 1655 "RubyParser.y"
  {
    /* was $$ = null;*/
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 402:
					// line 1659 "RubyParser.y"
  {
                    lexer.commandStart = true;
                    yyVal = ((ArgsNode)yyVals[0+yyTop]);
                }
  break;
case 403:
					// line 1664 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 404:
					// line 1667 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 405:
					// line 1670 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-2+yyTop]);
                }
  break;
case 406:
					// line 1675 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 407:
					// line 1678 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 408:
					// line 1683 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 409:
					// line 1686 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 410:
					// line 1690 "RubyParser.y"
  {
                    support.new_bv(((String)yyVals[0+yyTop]));
                }
  break;
case 411:
					// line 1693 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 412:
					// line 1697 "RubyParser.y"
  {
                    support.pushBlockScope();
                    yyVal = lexer.getLeftParenBegin();
                    lexer.setLeftParenBegin(lexer.incrementParenNest());
                }
  break;
case 413:
					// line 1701 "RubyParser.y"
  {
                    yyVal = new LambdaNode(((ArgsNode)yyVals[-1+yyTop]).getPosition(), ((ArgsNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                    lexer.setLeftParenBegin(((Integer)yyVals[-2+yyTop]));
                }
  break;
case 414:
					// line 1707 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-2+yyTop]);
                }
  break;
case 415:
					// line 1710 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[0+yyTop]);
                }
  break;
case 416:
					// line 1714 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 417:
					// line 1717 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 418:
					// line 1721 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 419:
					// line 1723 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 420:
					// line 1732 "RubyParser.y"
  {
                    /* Workaround for JRUBY-2326 (MRI does not enter this production for some reason)*/
                    if (((Node)yyVals[-1+yyTop]) instanceof YieldNode) {
                        throw new SyntaxException(PID.BLOCK_GIVEN_TO_YIELD, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "block given to yield");
                    }
                    if (((Node)yyVals[-1+yyTop]) instanceof BlockAcceptingNode && ((BlockAcceptingNode)yyVals[-1+yyTop]).getIterNode() instanceof BlockPassNode) {
                        throw new SyntaxException(PID.BLOCK_ARG_AND_BLOCK_GIVEN, ((Node)yyVals[-1+yyTop]).getPosition(), lexer.getCurrentLine(), "Both block arg and actual block given.");
                    }
                    if (((Node)yyVals[-1+yyTop]) instanceof NonLocalControlFlowNode) {
                        ((BlockAcceptingNode) ((NonLocalControlFlowNode)yyVals[-1+yyTop]).getValueNode()).setIterNode(((IterNode)yyVals[0+yyTop]));
                    } else {
                        ((BlockAcceptingNode)yyVals[-1+yyTop]).setIterNode(((IterNode)yyVals[0+yyTop]));
                    }
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    ((Node)yyVal).setPosition(((Node)yyVals[-1+yyTop]).getPosition());
                }
  break;
case 421:
					// line 1748 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 422:
					// line 1751 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 423:
					// line 1754 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((String)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop]));
                }
  break;
case 424:
					// line 1759 "RubyParser.y"
  {
                    support.frobnicate_fcall_args(((FCallNode)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                    yyVal = ((FCallNode)yyVals[-1+yyTop]);
                }
  break;
case 425:
					// line 1763 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 426:
					// line 1766 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 427:
					// line 1769 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop]), null, null);
                }
  break;
case 428:
					// line 1772 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), "call", ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 429:
					// line 1775 "RubyParser.y"
  {
                    yyVal = support.new_call(((Node)yyVals[-2+yyTop]), "call", ((Node)yyVals[0+yyTop]), null);
                }
  break;
case 430:
					// line 1778 "RubyParser.y"
  {
                    yyVal = support.new_super(((ISourcePosition)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 431:
					// line 1781 "RubyParser.y"
  {
                    yyVal = new ZSuperNode(((ISourcePosition)yyVals[0+yyTop]));
                }
  break;
case 432:
					// line 1784 "RubyParser.y"
  {
                    if (((Node)yyVals[-3+yyTop]) instanceof SelfNode) {
                        yyVal = support.new_fcall("[]");
                        support.frobnicate_fcall_args(((FCallNode)yyVal), ((Node)yyVals[-1+yyTop]), null);
                    } else {
                        yyVal = support.new_call(((Node)yyVals[-3+yyTop]), "[]", ((Node)yyVals[-1+yyTop]), null);
                    }
                }
  break;
case 433:
					// line 1793 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 434:
					// line 1795 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 435:
					// line 1799 "RubyParser.y"
  {
                    support.pushBlockScope();
                }
  break;
case 436:
					// line 1801 "RubyParser.y"
  {
                    yyVal = new IterNode(((ISourcePosition)yyVals[-4+yyTop]), ((ArgsNode)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]), support.getCurrentScope());
                    support.popCurrentScope();
                }
  break;
case 437:
					// line 1806 "RubyParser.y"
  {
                    yyVal = support.newWhenNode(((ISourcePosition)yyVals[-4+yyTop]), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 440:
					// line 1812 "RubyParser.y"
  {
                    Node node;
                    if (((Node)yyVals[-3+yyTop]) != null) {
                        node = support.appendToBlock(support.node_assign(((Node)yyVals[-3+yyTop]), new GlobalVarNode(((ISourcePosition)yyVals[-5+yyTop]), "$!")), ((Node)yyVals[-1+yyTop]));
                        if (((Node)yyVals[-1+yyTop]) != null) {
                            node.setPosition(((ISourcePosition)yyVals[-5+yyTop]));
                        }
                    } else {
                        node = ((Node)yyVals[-1+yyTop]);
                    }
                    Node body = node == null ? NilImplicitNode.NIL : node;
                    yyVal = new RescueBodyNode(((ISourcePosition)yyVals[-5+yyTop]), ((Node)yyVals[-4+yyTop]), body, ((RescueBodyNode)yyVals[0+yyTop]));
                }
  break;
case 441:
					// line 1825 "RubyParser.y"
  { 
                    yyVal = null; 
                }
  break;
case 442:
					// line 1829 "RubyParser.y"
  {
                    yyVal = support.newArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 443:
					// line 1832 "RubyParser.y"
  {
                    yyVal = support.splat_array(((Node)yyVals[0+yyTop]));
                    if (yyVal == null) yyVal = ((Node)yyVals[0+yyTop]); /* ArgsCat or ArgsPush*/
                }
  break;
case 445:
					// line 1838 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 447:
					// line 1843 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 449:
					// line 1848 "RubyParser.y"
  {
                    yyVal = ((NumericNode)yyVals[0+yyTop]);
                }
  break;
case 450:
					// line 1851 "RubyParser.y"
  {
                    yyVal = new SymbolNode(lexer.getPosition(), new ByteList(((String)yyVals[0+yyTop]).getBytes(), lexer.getEncoding()));
                }
  break;
case 452:
					// line 1856 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]) instanceof EvStrNode ? new DStrNode(((Node)yyVals[0+yyTop]).getPosition(), lexer.getEncoding()).add(((Node)yyVals[0+yyTop])) : ((Node)yyVals[0+yyTop]);
                    /*
                    NODE *node = $1;
                    if (!node) {
                        node = NEW_STR(STR_NEW0());
                    } else {
                        node = evstr2dstr(node);
                    }
                    $$ = node;
                    */
                }
  break;
case 453:
					// line 1870 "RubyParser.y"
  {
                    yyVal = ((StrNode)yyVals[0+yyTop]);
                }
  break;
case 454:
					// line 1873 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 455:
					// line 1876 "RubyParser.y"
  {
                    yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 456:
					// line 1880 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 457:
					// line 1884 "RubyParser.y"
  {
                    ISourcePosition position = support.getPosition(((Node)yyVals[-1+yyTop]));

                    if (((Node)yyVals[-1+yyTop]) == null) {
                        yyVal = new XStrNode(position, null);
                    } else if (((Node)yyVals[-1+yyTop]) instanceof StrNode) {
                        yyVal = new XStrNode(position, (ByteList) ((StrNode)yyVals[-1+yyTop]).getValue().clone());
                    } else if (((Node)yyVals[-1+yyTop]) instanceof DStrNode) {
                        yyVal = new DXStrNode(position, ((DStrNode)yyVals[-1+yyTop]));

                        ((Node)yyVal).setPosition(position);
                    } else {
                        yyVal = new DXStrNode(position).add(((Node)yyVals[-1+yyTop]));
                    }
                }
  break;
case 458:
					// line 1900 "RubyParser.y"
  {
                    yyVal = support.newRegexpNode(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), (RegexpNode) ((RegexpNode)yyVals[0+yyTop]));
                }
  break;
case 459:
					// line 1904 "RubyParser.y"
  {
                    yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 460:
					// line 1907 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 461:
					// line 1911 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 462:
					// line 1914 "RubyParser.y"
  {
                     yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DStrNode(((ListNode)yyVals[-2+yyTop]).getPosition(), lexer.getEncoding()).add(((Node)yyVals[-1+yyTop])) : ((Node)yyVals[-1+yyTop]));
                }
  break;
case 463:
					// line 1918 "RubyParser.y"
  {
                     yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 464:
					// line 1921 "RubyParser.y"
  {
                     yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 465:
					// line 1925 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 466:
					// line 1928 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 467:
					// line 1932 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 468:
					// line 1935 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DSymbolNode(((ListNode)yyVals[-2+yyTop]).getPosition()).add(((Node)yyVals[-1+yyTop])) : support.asSymbol(((ListNode)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop])));
                }
  break;
case 469:
					// line 1939 "RubyParser.y"
  {
                     yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 470:
					// line 1942 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 471:
					// line 1946 "RubyParser.y"
  {
                    yyVal = new ZArrayNode(lexer.getPosition());
                }
  break;
case 472:
					// line 1949 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-1+yyTop]);
                }
  break;
case 473:
					// line 1954 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 474:
					// line 1957 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
                }
  break;
case 475:
					// line 1961 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition());
                }
  break;
case 476:
					// line 1964 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(support.asSymbol(((ListNode)yyVals[-2+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop])));
                }
  break;
case 477:
					// line 1968 "RubyParser.y"
  {
                    ByteList aChar = ByteList.create("");
                    aChar.setEncoding(lexer.getEncoding());
                    yyVal = lexer.createStrNode(lexer.getPosition(), aChar, 0);
                }
  break;
case 478:
					// line 1973 "RubyParser.y"
  {
                    yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 479:
					// line 1977 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 480:
					// line 1980 "RubyParser.y"
  {
                    yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 481:
					// line 1984 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 482:
					// line 1987 "RubyParser.y"
  {
    /* FIXME: mri is different here.*/
                    yyVal = support.literal_concat(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 483:
					// line 1992 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 484:
					// line 1995 "RubyParser.y"
  {
                    yyVal = lexer.getStrTerm();
                    lexer.setStrTerm(null);
                    lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 485:
					// line 1999 "RubyParser.y"
  {
                    lexer.setStrTerm(((StrTerm)yyVals[-1+yyTop]));
                    yyVal = new EvStrNode(support.getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
                }
  break;
case 486:
					// line 2003 "RubyParser.y"
  {
                   yyVal = lexer.getStrTerm();
                   lexer.setStrTerm(null);
                   lexer.getConditionState().stop();
                   lexer.getCmdArgumentState().stop();
                }
  break;
case 487:
					// line 2008 "RubyParser.y"
  {
                   yyVal = lexer.getState();
                   lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 488:
					// line 2011 "RubyParser.y"
  {
                   lexer.getConditionState().restart();
                   lexer.getCmdArgumentState().restart();
                   lexer.setStrTerm(((StrTerm)yyVals[-3+yyTop]));
                   lexer.setState(((LexState)yyVals[-2+yyTop]));

                   yyVal = support.newEvStrNode(support.getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]));
                }
  break;
case 489:
					// line 2020 "RubyParser.y"
  {
                     yyVal = new GlobalVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 490:
					// line 2023 "RubyParser.y"
  {
                     yyVal = new InstVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 491:
					// line 2026 "RubyParser.y"
  {
                     yyVal = new ClassVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 493:
					// line 2032 "RubyParser.y"
  {
                     lexer.setState(LexState.EXPR_END);
                     yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 498:
					// line 2040 "RubyParser.y"
  {
                     lexer.setState(LexState.EXPR_END);

                     /* DStrNode: :"some text #{some expression}"*/
                     /* StrNode: :"some text"*/
                     /* EvStrNode :"#{some expression}"*/
                     /* Ruby 1.9 allows empty strings as symbols*/
                     if (((Node)yyVals[-1+yyTop]) == null) {
                         yyVal = new SymbolNode(lexer.getPosition(), new ByteList(new byte[0], lexer.getEncoding()));
                     } else if (((Node)yyVals[-1+yyTop]) instanceof DStrNode) {
                         yyVal = new DSymbolNode(((Node)yyVals[-1+yyTop]).getPosition(), ((DStrNode)yyVals[-1+yyTop]));
                     } else if (((Node)yyVals[-1+yyTop]) instanceof StrNode) {
                         yyVal = new SymbolNode(((Node)yyVals[-1+yyTop]).getPosition(), ((StrNode)yyVals[-1+yyTop]).getValue());
                     } else {
                         yyVal = new DSymbolNode(((Node)yyVals[-1+yyTop]).getPosition());
                         ((DSymbolNode)yyVal).add(((Node)yyVals[-1+yyTop]));
                     }
                }
  break;
case 499:
					// line 2059 "RubyParser.y"
  {
                    yyVal = ((NumericNode)yyVals[0+yyTop]);  
                }
  break;
case 500:
					// line 2062 "RubyParser.y"
  {
                     yyVal = support.negateNumeric(((NumericNode)yyVals[0+yyTop]));
                }
  break;
case 501:
					// line 2066 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 502:
					// line 2069 "RubyParser.y"
  {
                     yyVal = ((FloatNode)yyVals[0+yyTop]);
                }
  break;
case 503:
					// line 2072 "RubyParser.y"
  {
                     yyVal = ((RationalNode)yyVals[0+yyTop]);
                }
  break;
case 504:
					// line 2075 "RubyParser.y"
  {
                     yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 505:
					// line 2080 "RubyParser.y"
  {
                    yyVal = support.declareIdentifier(((String)yyVals[0+yyTop]));
                }
  break;
case 506:
					// line 2083 "RubyParser.y"
  {
                    yyVal = new InstVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 507:
					// line 2086 "RubyParser.y"
  {
                    yyVal = new GlobalVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 508:
					// line 2089 "RubyParser.y"
  {
                    yyVal = new ConstNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 509:
					// line 2092 "RubyParser.y"
  {
                    yyVal = new ClassVarNode(lexer.getPosition(), ((String)yyVals[0+yyTop]));
                }
  break;
case 510:
					// line 2095 "RubyParser.y"
  { 
                    yyVal = new NilNode(lexer.getPosition());
                }
  break;
case 511:
					// line 2098 "RubyParser.y"
  {
                    yyVal = new SelfNode(lexer.getPosition());
                }
  break;
case 512:
					// line 2101 "RubyParser.y"
  { 
                    yyVal = new TrueNode(lexer.getPosition());
                }
  break;
case 513:
					// line 2104 "RubyParser.y"
  {
                    yyVal = new FalseNode(lexer.getPosition());
                }
  break;
case 514:
					// line 2107 "RubyParser.y"
  {
                    yyVal = new FileNode(lexer.getPosition(), new ByteList(lexer.getPosition().getFile().getBytes(),
                    support.getConfiguration().getRuntime().getEncodingService().getLocaleEncoding()));
                }
  break;
case 515:
					// line 2111 "RubyParser.y"
  {
                    yyVal = new FixnumNode(lexer.getPosition(), lexer.tokline.getLine()+1);
                }
  break;
case 516:
					// line 2114 "RubyParser.y"
  {
                    yyVal = new EncodingNode(lexer.getPosition(), lexer.getEncoding());
                }
  break;
case 517:
					// line 2119 "RubyParser.y"
  {
                    yyVal = support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), null);
                }
  break;
case 518:
					// line 2122 "RubyParser.y"
  {
                   yyVal = new InstAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 519:
					// line 2125 "RubyParser.y"
  {
                   yyVal = new GlobalAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 520:
					// line 2128 "RubyParser.y"
  {
                    if (support.isInDef() || support.isInSingle()) support.compile_error("dynamic constant assignment");

                    yyVal = new ConstDeclNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), null, NilImplicitNode.NIL);
                }
  break;
case 521:
					// line 2133 "RubyParser.y"
  {
                    yyVal = new ClassVarAsgnNode(lexer.getPosition(), ((String)yyVals[0+yyTop]), NilImplicitNode.NIL);
                }
  break;
case 522:
					// line 2136 "RubyParser.y"
  {
                    support.compile_error("Can't assign to nil");
                    yyVal = null;
                }
  break;
case 523:
					// line 2140 "RubyParser.y"
  {
                    support.compile_error("Can't change the value of self");
                    yyVal = null;
                }
  break;
case 524:
					// line 2144 "RubyParser.y"
  {
                    support.compile_error("Can't assign to true");
                    yyVal = null;
                }
  break;
case 525:
					// line 2148 "RubyParser.y"
  {
                    support.compile_error("Can't assign to false");
                    yyVal = null;
                }
  break;
case 526:
					// line 2152 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __FILE__");
                    yyVal = null;
                }
  break;
case 527:
					// line 2156 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __LINE__");
                    yyVal = null;
                }
  break;
case 528:
					// line 2160 "RubyParser.y"
  {
                    support.compile_error("Can't assign to __ENCODING__");
                    yyVal = null;
                }
  break;
case 529:
					// line 2166 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 530:
					// line 2169 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 531:
					// line 2173 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 532:
					// line 2176 "RubyParser.y"
  {
                   lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 533:
					// line 2178 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 534:
					// line 2181 "RubyParser.y"
  {
                   yyVal = null;
                }
  break;
case 535:
					// line 2187 "RubyParser.y"
  {
                    yyVal = ((ArgsNode)yyVals[-1+yyTop]);
                    lexer.setState(LexState.EXPR_BEG);
                    lexer.commandStart = true;
                }
  break;
case 536:
					// line 2192 "RubyParser.y"
  {
                   yyVal = lexer.inKwarg;
                   lexer.inKwarg = true;
                }
  break;
case 537:
					// line 2195 "RubyParser.y"
  {
                   lexer.inKwarg = ((Boolean)yyVals[-2+yyTop]);
                    yyVal = ((ArgsNode)yyVals[-1+yyTop]);
                    lexer.setState(LexState.EXPR_BEG);
                    lexer.commandStart = true;
                }
  break;
case 538:
					// line 2203 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 539:
					// line 2206 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 540:
					// line 2209 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, ((String)yyVals[-1+yyTop]), ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 541:
					// line 2212 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(((BlockArgNode)yyVals[0+yyTop]).getPosition(), null, null, ((BlockArgNode)yyVals[0+yyTop]));
                }
  break;
case 542:
					// line 2216 "RubyParser.y"
  {
                    yyVal = ((ArgsTailHolder)yyVals[0+yyTop]);
                }
  break;
case 543:
					// line 2219 "RubyParser.y"
  {
                    yyVal = support.new_args_tail(lexer.getPosition(), null, null, null);
                }
  break;
case 544:
					// line 2224 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 545:
					// line 2227 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-7+yyTop]).getPosition(), ((ListNode)yyVals[-7+yyTop]), ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 546:
					// line 2230 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 547:
					// line 2233 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 548:
					// line 2236 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 549:
					// line 2239 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), ((ListNode)yyVals[-5+yyTop]), null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 550:
					// line 2242 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 551:
					// line 2245 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 552:
					// line 2248 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-5+yyTop]).getPosition(), null, ((ListNode)yyVals[-5+yyTop]), ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 553:
					// line 2251 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-1+yyTop]).getPosition(), null, ((ListNode)yyVals[-1+yyTop]), null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 554:
					// line 2254 "RubyParser.y"
  {
                    yyVal = support.new_args(((ListNode)yyVals[-3+yyTop]).getPosition(), null, ((ListNode)yyVals[-3+yyTop]), null, ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 555:
					// line 2257 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-1+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-1+yyTop]), null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 556:
					// line 2260 "RubyParser.y"
  {
                    yyVal = support.new_args(((RestArgNode)yyVals[-3+yyTop]).getPosition(), null, null, ((RestArgNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 557:
					// line 2263 "RubyParser.y"
  {
                    yyVal = support.new_args(((ArgsTailHolder)yyVals[0+yyTop]).getPosition(), null, null, null, null, ((ArgsTailHolder)yyVals[0+yyTop]));
                }
  break;
case 558:
					// line 2266 "RubyParser.y"
  {
                    yyVal = support.new_args(lexer.getPosition(), null, null, null, null, (ArgsTailHolder) null);
                }
  break;
case 559:
					// line 2270 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a constant");
                }
  break;
case 560:
					// line 2273 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be an instance variable");
                }
  break;
case 561:
					// line 2276 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a global variable");
                }
  break;
case 562:
					// line 2279 "RubyParser.y"
  {
                    support.yyerror("formal argument cannot be a class variable");
                }
  break;
case 564:
					// line 2285 "RubyParser.y"
  {
                    yyVal = support.formal_argument(((String)yyVals[0+yyTop]));
                }
  break;
case 565:
					// line 2289 "RubyParser.y"
  {
                    yyVal = support.arg_var(((String)yyVals[0+yyTop]));
                }
  break;
case 566:
					// line 2292 "RubyParser.y"
  {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                    /*            {
            ID tid = internal_id();
            arg_var(tid);
            if (dyna_in_block()) {
                $2->nd_value = NEW_DVAR(tid);
            }
            else {
                $2->nd_value = NEW_LVAR(tid);
            }
            $$ = NEW_ARGS_AUX(tid, 1);
            $$->nd_next = $2;*/
                }
  break;
case 567:
					// line 2308 "RubyParser.y"
  {
                    yyVal = new ArrayNode(lexer.getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 568:
					// line 2311 "RubyParser.y"
  {
                    ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                    yyVal = ((ListNode)yyVals[-2+yyTop]);
                }
  break;
case 569:
					// line 2316 "RubyParser.y"
  {
                    support.arg_var(support.formal_argument(((String)yyVals[0+yyTop])));
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 570:
					// line 2321 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(((Node)yyVals[0+yyTop]).getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 571:
					// line 2324 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(lexer.getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), new RequiredKeywordArgumentValueNode()));
                }
  break;
case 572:
					// line 2328 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 573:
					// line 2331 "RubyParser.y"
  {
                    yyVal = support.keyword_arg(lexer.getPosition(), support.assignableLabelOrIdentifier(((String)yyVals[0+yyTop]), new RequiredKeywordArgumentValueNode()));
                }
  break;
case 574:
					// line 2336 "RubyParser.y"
  {
                    yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 575:
					// line 2339 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 576:
					// line 2343 "RubyParser.y"
  {
                    yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
                }
  break;
case 577:
					// line 2346 "RubyParser.y"
  {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 578:
					// line 2350 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 579:
					// line 2353 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 580:
					// line 2357 "RubyParser.y"
  {
                    support.shadowing_lvar(((String)yyVals[0+yyTop]));
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 581:
					// line 2361 "RubyParser.y"
  {
                    yyVal = support.internalId();
                }
  break;
case 582:
					// line 2365 "RubyParser.y"
  {
                    support.arg_var(((String)yyVals[-2+yyTop]));
                    yyVal = new OptArgNode(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 583:
					// line 2370 "RubyParser.y"
  {
                    support.arg_var(support.formal_argument(((String)yyVals[-2+yyTop])));
                    yyVal = new OptArgNode(support.getPosition(((Node)yyVals[0+yyTop])), support.assignableLabelOrIdentifier(((String)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
                }
  break;
case 584:
					// line 2375 "RubyParser.y"
  {
                    yyVal = new BlockNode(((Node)yyVals[0+yyTop]).getPosition()).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 585:
					// line 2378 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 586:
					// line 2382 "RubyParser.y"
  {
                    yyVal = new BlockNode(((Node)yyVals[0+yyTop]).getPosition()).add(((Node)yyVals[0+yyTop]));
                }
  break;
case 587:
					// line 2385 "RubyParser.y"
  {
                    yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 590:
					// line 2392 "RubyParser.y"
  {
                    if (!support.is_local_id(((String)yyVals[0+yyTop]))) {
                        support.yyerror("rest argument must be local variable");
                    }
                    
                    yyVal = new RestArgNode(support.arg_var(support.shadowing_lvar(((String)yyVals[0+yyTop]))));
                }
  break;
case 591:
					// line 2399 "RubyParser.y"
  {
                    yyVal = new UnnamedRestArgNode(lexer.getPosition(), "", support.getCurrentScope().addVariable("*"));
                }
  break;
case 594:
					// line 2407 "RubyParser.y"
  {
                    if (!support.is_local_id(((String)yyVals[0+yyTop]))) {
                        support.yyerror("block argument must be local variable");
                    }
                    
                    yyVal = new BlockArgNode(support.arg_var(support.shadowing_lvar(((String)yyVals[0+yyTop]))));
                }
  break;
case 595:
					// line 2415 "RubyParser.y"
  {
                    yyVal = ((BlockArgNode)yyVals[0+yyTop]);
                }
  break;
case 596:
					// line 2418 "RubyParser.y"
  {
                    yyVal = null;
                }
  break;
case 597:
					// line 2422 "RubyParser.y"
  {
                    if (!(((Node)yyVals[0+yyTop]) instanceof SelfNode)) {
                        support.checkExpression(((Node)yyVals[0+yyTop]));
                    }
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
  break;
case 598:
					// line 2428 "RubyParser.y"
  {
                    lexer.setState(LexState.EXPR_BEG);
                }
  break;
case 599:
					// line 2430 "RubyParser.y"
  {
                    if (((Node)yyVals[-1+yyTop]) == null) {
                        support.yyerror("can't define single method for ().");
                    } else if (((Node)yyVals[-1+yyTop]) instanceof ILiteralNode) {
                        support.yyerror("can't define single method for literals.");
                    }
                    support.checkExpression(((Node)yyVals[-1+yyTop]));
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
  break;
case 600:
					// line 2441 "RubyParser.y"
  {
                    yyVal = new HashNode(lexer.getPosition());
                }
  break;
case 601:
					// line 2444 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-1+yyTop]);
                }
  break;
case 602:
					// line 2449 "RubyParser.y"
  {
                    yyVal = new HashNode(lexer.getPosition(), ((KeyValuePair)yyVals[0+yyTop]));
                }
  break;
case 603:
					// line 2452 "RubyParser.y"
  {
                    yyVal = ((HashNode)yyVals[-2+yyTop]).add(((KeyValuePair)yyVals[0+yyTop]));
                }
  break;
case 604:
					// line 2457 "RubyParser.y"
  {
                    yyVal = new KeyValuePair<Node,Node>(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
                }
  break;
case 605:
					// line 2460 "RubyParser.y"
  {
                    SymbolNode label = new SymbolNode(support.getPosition(((Node)yyVals[0+yyTop])), new ByteList(((String)yyVals[-1+yyTop]).getBytes(), lexer.getEncoding()));
                    yyVal = new KeyValuePair<Node,Node>(label, ((Node)yyVals[0+yyTop]));
                }
  break;
case 606:
					// line 2464 "RubyParser.y"
  {
                    if (((Node)yyVals[-2+yyTop]) instanceof StrNode) {
                        DStrNode dnode = new DStrNode(support.getPosition(((Node)yyVals[-2+yyTop])), lexer.getEncoding());
                        dnode.add(((Node)yyVals[-2+yyTop]));
                        yyVal = new KeyValuePair<Node,Node>(new DSymbolNode(support.getPosition(((Node)yyVals[-2+yyTop])), dnode), ((Node)yyVals[0+yyTop]));
                    } else if (((Node)yyVals[-2+yyTop]) instanceof DStrNode) {
                        yyVal = new KeyValuePair<Node,Node>(new DSymbolNode(support.getPosition(((Node)yyVals[-2+yyTop])), ((DStrNode)yyVals[-2+yyTop])), ((Node)yyVals[0+yyTop]));
                    } else {
                        support.compile_error("Uknown type for assoc in strings: " + ((Node)yyVals[-2+yyTop]));
                    }

                }
  break;
case 607:
					// line 2477 "RubyParser.y"
  {
                    yyVal = new KeyValuePair<Node,Node>(null, ((Node)yyVals[0+yyTop]));
                }
  break;
case 624:
					// line 2487 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 625:
					// line 2490 "RubyParser.y"
  {
                    yyVal = ((String)yyVals[0+yyTop]);
                }
  break;
case 633:
					// line 2501 "RubyParser.y"
  {
                      yyVal = null;
                }
  break;
case 634:
					// line 2505 "RubyParser.y"
  {  
                  yyVal = null;
                }
  break;
					// line 9741 "-"
// ACTIONS_END
//        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (yydebug != null) yydebug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.nextToken();
//            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
               yydebug.lex(yyState, yyToken,yyName(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (yydebug != null) yydebug.accept(yyVal);
            return yyVal;
          }
          continue yyLoop;
        }
        if ((yyN = yyGindex[yyM]) != 0 && (yyN += yyState) >= 0
            && yyN < yyTable.length && yyCheck[yyN] == yyState)
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (yydebug != null) yydebug.shift(yyStates[yyTop], yyState);
        continue yyLoop;
      }
    }
  }

// ACTION_BODIES
					// line 2510 "RubyParser.y"

    /** The parse method use an lexer stream and parse it to an AST node 
     * structure
     */
    public RubyParserResult parse(ParserConfiguration configuration, LexerSource source) throws IOException {
        support.reset();
        support.setConfiguration(configuration);
        support.setResult(new RubyParserResult());
        
        lexer.reset();
        lexer.setSource(source);
        lexer.setEncoding(configuration.getDefaultEncoding());

        yyparse(lexer, configuration.isDebug() ? new YYDebug() : null);
        
        return support.getResult();
    }
}
					// line 9793 "-"
