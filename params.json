{"name":"GitHub-page-test","tagline":"","body":"# Reactive Ruby - Truffle Ruby meets Reactive Programming\r\n\r\nReactive Ruby is an experimental reactive language, which extends Truffle Ruby. It supports speculative just in time compilation via the Graal VM, which is a research VM from Oracle Labs. Reactive Ruby was initially started as a studentâ€™s thesis at the TU Darmstadt. \r\n\r\nReactive Ruby adds _Behaviors_ to Truffle Ruby. Behaviors represent values which change over time. In general Behaviors represent a functional dependency over other Behaviors (the behavior expression). Whenever the value of a behavior changes Reactive Ruby ensures that the values of all other Behaviors are valid (reevaluates the behavior expression if necessary). \r\n\r\nThe following example demonstrates the general concept of reactive programming in Reactive Ruby.\r\n```\r\nrange = rangeB(1,100)\r\n\r\neven = range.filter(0) { |x|\r\n   x.to_i % 2 == 0\r\n}\r\n\r\nsum = even.fold ( 0 ) { |acc , val|\r\n   acc + val\r\n}\r\n\r\ncombine = range.map(sum) { |x , y| [x , y] }\r\ncombine.onChange {|x| puts \"sum: #{x}\"}\r\n```\r\nIn this example, method _rangeB(1,100)_ creates a behavior which initially holds the value _1_ and then stepwise increases until it holds the value _100_. The _range.filter_ creates behavior _even_ which holds the last even value of _range_. Then _range.fold_ produces behavior _sum_ that adds up over all values of the behavior _even_. After that, _range.map_ combines behaviors _range_ and behavior _sum_. The value of this behavior is printed whenever it changes.\r\n\r\nMore information about the languages and its implementation are in the written thesis at: [Thesis](mviering.de/ reactiveruby.pdf)\r\n\r\n## Installation\r\n\r\nThe current version of Reactive Ruby is not yet updated to the newest Graal and Truffle version. Reactive Ruby requires Truffle and Graal from the change set 22218:aebb7c58725d.\r\nA mirror of the used Graal hg repository is at: [Graal Mirror](https://github.com/OracleLabs/GraalVM)\r\n \r\n## Usage\r\n\r\nThe jt tool can be used to execute Reactive Ruby programs.\r\n(See: https://github.com/jruby/jruby/tree/master/truffle#workflow-tool)\r\n\r\n```jt run --graal examples/time.rb``` executes the following example which prints the current time every second.\r\n\r\n```\r\ntime = timeB(1) \r\ntime.onChange { |x| puts x}\r\n```\r\n\r\n```jt run --graal examples/sum.rb``` executes the next example, which demonstrates some operators.\r\n\r\n```\r\nrange = rangeB(1,100)\r\n\r\neven = range.filter(0) { | x | \r\n\tx.to_i % 2 == 0\r\n}\r\n\r\nsum = even.fold( 0 ) { |acc, val| \r\n\tacc + val\r\n}\r\n\r\ncombine = range.map(sum) { | x, y | [x,y] }\r\n\r\ncombine.onChange {|x| puts \"sum: #{x}\"}\r\n\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\nsum: [2, 2]\r\nsum: [3, 2]\r\nsum: [4, 6]\r\nsum: [5, 6]\r\nsum: [6, 12]\r\nsum: [7, 12]\r\nsum: [8, 20]\r\nsum: [9, 20]\r\nsum: [10, 30]\r\n...\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}