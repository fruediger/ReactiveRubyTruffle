fails:Array#* tries to convert the passed argument to a String using #to_str
fails:Array#* tires to convert the passed argument to an Integer using #to_int
fails:Array#* converts the passed argument to a String rather than an Integer
fails:Array#* with an integer properly handles recursive arrays
fails:Array#* with an integer raises an ArgumentError when passed a negative integer
fails:Array#* with an integer copies the taint status of the original array even if the passed count is 0
fails:Array#* with an integer copies the taint status of the original array even if the array is empty
fails:Array#* with an integer copies the taint status of the original array if the passed count is not 0
fails:Array#* with an integer copies the untrusted status of the original array even if the passed count is 0
fails:Array#* with an integer copies the untrusted status of the original array even if the array is empty
fails:Array#* with an integer copies the untrusted status of the original array if the passed count is not 0
fails:Array#* with an integer with a subclass of Array returns a subclass instance
fails:Array#* with a string returns a string formed by concatenating each element.to_str separated by separator
fails:Array#* with a string uses the same separator with nested arrays
fails:Array#* with a string with a tainted separator does not taint the result if the array is empty
fails:Array#* with a string with a tainted separator does not taint the result if the array has only one element
fails:Array#* with a string with a tainted separator taints the result if the array has two or more elements
fails:Array#* with a string with an untrusted separator does not untrust the result if the array is empty
fails:Array#* with a string with an untrusted separator does not untrust the result if the array has only one element
fails:Array#* with a string with an untrusted separator untrusts the result if the array has two or more elements
