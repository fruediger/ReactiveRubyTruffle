fails:Array#[]= calls to_int on its start and length arguments
fails:Array#[]= sets elements in the range arguments when passed ranges
fails:Array#[]= inserts the given elements with [range] which the range is zero-width
fails:Array#[]= inserts the given elements with [start, length] which length is zero
fails:Array#[]= inserts the given elements with [range] which the range has negative width
fails:Array#[]= just inserts nil if the section defined by range is zero-width and the rhs is nil
fails:Array#[]= just inserts nil if the section defined by range has negative width and the rhs is nil
fails:Array#[]= does nothing if the section defined by range has negative width and the rhs is an empty array
fails:Array#[]= tries to convert Range elements to Integers using #to_int with [m..n] and [m...n]
fails:Array#[]= raises an IndexError when passed indexes out of bounds
fails:Array#[]= calls to_ary on its rhs argument for multi-element sets
fails:Array#[]= with [m..n] replaces the section if m and n < 0
fails:Array#[]= with [m..n] replaces the section if m < 0 and n > 0
fails:Array#[]= with [m..n] inserts the other section at m if m > n
fails:Array#[]= with [m..n] accepts Range subclasses
fails:Array#[] after a shift works for insertion
