fails:Array#[]= sets the section defined by [start,length] to other
fails:Array#[]= replaces the section defined by [start,length] with the given values
fails:Array#[]= just sets the section defined by [start,length] to other even if other is nil
fails:Array#[]= returns nil if the rhs is nil
fails:Array#[]= sets the section defined by range to other
fails:Array#[]= replaces the section defined by range with the given values
fails:Array#[]= just sets the section defined by range to other even if other is nil
fails:Array#[]= expands and nil-pads the array if section assigned by range is outside array boundaries
fails:Array#[]= calls to_int on its start and length arguments
fails:Array#[]= sets elements in the range arguments when passed ranges
fails:Array#[]= inserts the given elements with [range] which the range is zero-width
fails:Array#[]= inserts the given elements with [start, length] which length is zero
fails:Array#[]= inserts the given elements with [range] which the range has negative width
fails:Array#[]= just inserts nil if the section defined by range is zero-width and the rhs is nil
fails:Array#[]= just inserts nil if the section defined by range has negative width and the rhs is nil
fails:Array#[]= does nothing if the section defined by range is zero-width and the rhs is an empty array
fails:Array#[]= does nothing if the section defined by range has negative width and the rhs is an empty array
fails:Array#[]= tries to convert Range elements to Integers using #to_int with [m..n] and [m...n]
fails:Array#[]= raises an IndexError when passed indexes out of bounds
fails:Array#[]= calls to_ary on its rhs argument for multi-element sets
fails:Array#[]= does not call to_ary on rhs array subclasses for multi-element sets
fails:Array#[]= with [index, count] returns non-array value if non-array value assigned
fails:Array#[]= with [index, count] returns array if array assigned
fails:Array#[]= with [index, count] just sets the section defined by [start,length] to nil even if the rhs is nil
fails:Array#[]= with [index, count] just sets the section defined by [start,length] to nil if negative index within bounds, cnt > 0 and the rhs is nil
fails:Array#[]= with [index, count] replaces the section defined by [start,length] to other
fails:Array#[]= with [index, count] replaces the section to other if idx < 0 and cnt > 0
fails:Array#[]= with [index, count] replaces the section to other even if cnt spanning beyond the array boundary
fails:Array#[]= with [index, count] pads the Array with nils if the span is past the end
fails:Array#[]= with [index, count] inserts other section in place defined by idx
fails:Array#[]= with [index, count] raises an IndexError when passed start and negative length
fails:Array#[]= with [m..n] returns non-array value if non-array value assigned
fails:Array#[]= with [m..n] returns array if array assigned
fails:Array#[]= with [m..n] just sets the section defined by range to nil even if the rhs is nil
fails:Array#[]= with [m..n] just sets the section defined by range to nil if m and n < 0 and the rhs is nil
fails:Array#[]= with [m..n] replaces the section defined by range
fails:Array#[]= with [m..n] replaces the section if m and n < 0
fails:Array#[]= with [m..n] replaces the section if m < 0 and n > 0
fails:Array#[]= with [m..n] inserts the other section at m if m > n
fails:Array#[]= with [m..n] accepts Range subclasses
fails:Array#[] after a shift works for insertion
